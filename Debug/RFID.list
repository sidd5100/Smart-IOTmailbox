
RFID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007da8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005cc  08007f38  08007f38  00008f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008504  08008504  0000a0d0  2**0
                  CONTENTS
  4 .ARM          00000008  08008504  08008504  00009504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800850c  0800850c  0000a0d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800850c  0800850c  0000950c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008510  08008510  00009510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000d0  20000000  08008514  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a0d0  2**0
                  CONTENTS
 10 .bss          00000334  200000d0  200000d0  0000a0d0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000404  20000404  0000a0d0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a0d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000137f2  00000000  00000000  0000a100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000298c  00000000  00000000  0001d8f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013c8  00000000  00000000  00020280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f8b  00000000  00000000  00021648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000231d3  00000000  00000000  000225d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001685b  00000000  00000000  000457a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d23ee  00000000  00000000  0005c001  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012e3ef  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005f84  00000000  00000000  0012e434  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  001343b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000d0 	.word	0x200000d0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007f20 	.word	0x08007f20

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000d4 	.word	0x200000d4
 80001cc:	08007f20 	.word	0x08007f20

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <RC522_2_SPI_Transfer>:
 * Description: A common function used by Write_2_MFRC522 and Read_2_MFRC522
 * Input Parameters: data - the value to be written
 * Returns: a byte of data read from the module
 */
uint8_t RC522_2_SPI_Transfer(uchar data)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b086      	sub	sp, #24
 8000584:	af02      	add	r7, sp, #8
 8000586:	4603      	mov	r3, r0
 8000588:	71fb      	strb	r3, [r7, #7]
	uchar rx_data;
	HAL_SPI_TransmitReceive(HSPI_INSTANCE,&data,&rx_data,1,100);
 800058a:	f107 020f 	add.w	r2, r7, #15
 800058e:	1df9      	adds	r1, r7, #7
 8000590:	2364      	movs	r3, #100	@ 0x64
 8000592:	9300      	str	r3, [sp, #0]
 8000594:	2301      	movs	r3, #1
 8000596:	4804      	ldr	r0, [pc, #16]	@ (80005a8 <RC522_2_SPI_Transfer+0x28>)
 8000598:	f004 fd67 	bl	800506a <HAL_SPI_TransmitReceive>

	return rx_data;
 800059c:	7bfb      	ldrb	r3, [r7, #15]
}
 800059e:	4618      	mov	r0, r3
 80005a0:	3710      	adds	r7, #16
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	20000148 	.word	0x20000148

080005ac <Write_2_MFRC522>:
 * Function Description: To a certain MFRC522 register to write a byte of data
 * Input Parameters: addr - register address; val - the value to be written
 * Return value: None
 */
void Write_2_MFRC522(uchar addr, uchar val)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	460a      	mov	r2, r1
 80005b6:	71fb      	strb	r3, [r7, #7]
 80005b8:	4613      	mov	r3, r2
 80005ba:	71bb      	strb	r3, [r7, #6]
	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_2_CS_PIN,GPIO_PIN_RESET);
 80005bc:	2200      	movs	r2, #0
 80005be:	2180      	movs	r1, #128	@ 0x80
 80005c0:	480c      	ldr	r0, [pc, #48]	@ (80005f4 <Write_2_MFRC522+0x48>)
 80005c2:	f003 fb5f 	bl	8003c84 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and clear the MSb to indicate a write
	  // - bottom 8 bits are the data bits being sent for that address, we send them
	RC522_2_SPI_Transfer((addr<<1)&0x7E);
 80005c6:	79fb      	ldrb	r3, [r7, #7]
 80005c8:	005b      	lsls	r3, r3, #1
 80005ca:	b2db      	uxtb	r3, r3
 80005cc:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 80005d0:	b2db      	uxtb	r3, r3
 80005d2:	4618      	mov	r0, r3
 80005d4:	f7ff ffd4 	bl	8000580 <RC522_2_SPI_Transfer>
	RC522_2_SPI_Transfer(val);
 80005d8:	79bb      	ldrb	r3, [r7, #6]
 80005da:	4618      	mov	r0, r3
 80005dc:	f7ff ffd0 	bl	8000580 <RC522_2_SPI_Transfer>

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_2_CS_PIN,GPIO_PIN_SET);
 80005e0:	2201      	movs	r2, #1
 80005e2:	2180      	movs	r1, #128	@ 0x80
 80005e4:	4803      	ldr	r0, [pc, #12]	@ (80005f4 <Write_2_MFRC522+0x48>)
 80005e6:	f003 fb4d 	bl	8003c84 <HAL_GPIO_WritePin>
}
 80005ea:	bf00      	nop
 80005ec:	3708      	adds	r7, #8
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	40021000 	.word	0x40021000

080005f8 <Read_2_MFRC522>:
 * Description: From a certain MFRC522 read a byte of data register
 * Input Parameters: addr - register address
 * Returns: a byte of data read from the module
 */
uchar Read_2_MFRC522(uchar addr)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	4603      	mov	r3, r0
 8000600:	71fb      	strb	r3, [r7, #7]
	uchar val;

	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_2_CS_PIN,GPIO_PIN_RESET);
 8000602:	2200      	movs	r2, #0
 8000604:	2180      	movs	r1, #128	@ 0x80
 8000606:	480f      	ldr	r0, [pc, #60]	@ (8000644 <Read_2_MFRC522+0x4c>)
 8000608:	f003 fb3c 	bl	8003c84 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and set the MSb to indicate a read
	  // - bottom 8 bits are all 0s on a read per 8.1.2.1 Table 6
	RC522_2_SPI_Transfer(((addr<<1)&0x7E) | 0x80);
 800060c:	79fb      	ldrb	r3, [r7, #7]
 800060e:	005b      	lsls	r3, r3, #1
 8000610:	b25b      	sxtb	r3, r3
 8000612:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8000616:	b25b      	sxtb	r3, r3
 8000618:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800061c:	b25b      	sxtb	r3, r3
 800061e:	b2db      	uxtb	r3, r3
 8000620:	4618      	mov	r0, r3
 8000622:	f7ff ffad 	bl	8000580 <RC522_2_SPI_Transfer>
	val = RC522_2_SPI_Transfer(0x00);
 8000626:	2000      	movs	r0, #0
 8000628:	f7ff ffaa 	bl	8000580 <RC522_2_SPI_Transfer>
 800062c:	4603      	mov	r3, r0
 800062e:	73fb      	strb	r3, [r7, #15]

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_2_CS_PIN,GPIO_PIN_SET);
 8000630:	2201      	movs	r2, #1
 8000632:	2180      	movs	r1, #128	@ 0x80
 8000634:	4803      	ldr	r0, [pc, #12]	@ (8000644 <Read_2_MFRC522+0x4c>)
 8000636:	f003 fb25 	bl	8003c84 <HAL_GPIO_WritePin>

	return val;
 800063a:	7bfb      	ldrb	r3, [r7, #15]

}
 800063c:	4618      	mov	r0, r3
 800063e:	3710      	adds	r7, #16
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	40021000 	.word	0x40021000

08000648 <SetBitMask_2>:
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask_2(uchar reg, uchar mask)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b084      	sub	sp, #16
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	460a      	mov	r2, r1
 8000652:	71fb      	strb	r3, [r7, #7]
 8000654:	4613      	mov	r3, r2
 8000656:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_2_MFRC522(reg);
 8000658:	79fb      	ldrb	r3, [r7, #7]
 800065a:	4618      	mov	r0, r3
 800065c:	f7ff ffcc 	bl	80005f8 <Read_2_MFRC522>
 8000660:	4603      	mov	r3, r0
 8000662:	73fb      	strb	r3, [r7, #15]
    Write_2_MFRC522(reg, tmp | mask);  // set bit mask
 8000664:	7bfa      	ldrb	r2, [r7, #15]
 8000666:	79bb      	ldrb	r3, [r7, #6]
 8000668:	4313      	orrs	r3, r2
 800066a:	b2da      	uxtb	r2, r3
 800066c:	79fb      	ldrb	r3, [r7, #7]
 800066e:	4611      	mov	r1, r2
 8000670:	4618      	mov	r0, r3
 8000672:	f7ff ff9b 	bl	80005ac <Write_2_MFRC522>
}
 8000676:	bf00      	nop
 8000678:	3710      	adds	r7, #16
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}

0800067e <ClearBitMask_2>:
 * Description: clear RC522 register bit
 * Input parameters: reg - register address; mask - clear bit value
 * Return value: None
*/
void ClearBitMask_2(uchar reg, uchar mask)
{
 800067e:	b580      	push	{r7, lr}
 8000680:	b084      	sub	sp, #16
 8000682:	af00      	add	r7, sp, #0
 8000684:	4603      	mov	r3, r0
 8000686:	460a      	mov	r2, r1
 8000688:	71fb      	strb	r3, [r7, #7]
 800068a:	4613      	mov	r3, r2
 800068c:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_2_MFRC522(reg);
 800068e:	79fb      	ldrb	r3, [r7, #7]
 8000690:	4618      	mov	r0, r3
 8000692:	f7ff ffb1 	bl	80005f8 <Read_2_MFRC522>
 8000696:	4603      	mov	r3, r0
 8000698:	73fb      	strb	r3, [r7, #15]
    Write_2_MFRC522(reg, tmp & (~mask));  // clear bit mask
 800069a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800069e:	43db      	mvns	r3, r3
 80006a0:	b25a      	sxtb	r2, r3
 80006a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006a6:	4013      	ands	r3, r2
 80006a8:	b25b      	sxtb	r3, r3
 80006aa:	b2da      	uxtb	r2, r3
 80006ac:	79fb      	ldrb	r3, [r7, #7]
 80006ae:	4611      	mov	r1, r2
 80006b0:	4618      	mov	r0, r3
 80006b2:	f7ff ff7b 	bl	80005ac <Write_2_MFRC522>
}
 80006b6:	bf00      	nop
 80006b8:	3710      	adds	r7, #16
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}

080006be <AntennaOn_2>:
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn_2(void)
{
 80006be:	b580      	push	{r7, lr}
 80006c0:	af00      	add	r7, sp, #0

	Read_2_MFRC522(TxControlReg);
 80006c2:	2014      	movs	r0, #20
 80006c4:	f7ff ff98 	bl	80005f8 <Read_2_MFRC522>
	SetBitMask_2(TxControlReg, 0x03);
 80006c8:	2103      	movs	r1, #3
 80006ca:	2014      	movs	r0, #20
 80006cc:	f7ff ffbc 	bl	8000648 <SetBitMask_2>
}
 80006d0:	bf00      	nop
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <MFRC522_2_Reset>:
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_2_Reset(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
    Write_2_MFRC522(CommandReg, PCD_RESETPHASE);
 80006d8:	210f      	movs	r1, #15
 80006da:	2001      	movs	r0, #1
 80006dc:	f7ff ff66 	bl	80005ac <Write_2_MFRC522>
}
 80006e0:	bf00      	nop
 80006e2:	bd80      	pop	{r7, pc}

080006e4 <MFRC522_2_Init>:
 * Description: Initialize RC522
 * Input: None
 * Return value: None
*/
void MFRC522_2_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_2_CS_PIN,GPIO_PIN_SET);
 80006e8:	2201      	movs	r2, #1
 80006ea:	2180      	movs	r1, #128	@ 0x80
 80006ec:	4812      	ldr	r0, [pc, #72]	@ (8000738 <MFRC522_2_Init+0x54>)
 80006ee:	f003 fac9 	bl	8003c84 <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(MFRC522_CS_PORT,GPIO_PIN_3,GPIO_PIN_SET);
	HAL_GPIO_WritePin(MFRC522_RST_PORT,MFRC522_2_RST_PIN,GPIO_PIN_SET);
 80006f2:	2201      	movs	r2, #1
 80006f4:	2120      	movs	r1, #32
 80006f6:	4811      	ldr	r0, [pc, #68]	@ (800073c <MFRC522_2_Init+0x58>)
 80006f8:	f003 fac4 	bl	8003c84 <HAL_GPIO_WritePin>
	MFRC522_2_Reset();
 80006fc:	f7ff ffea 	bl	80006d4 <MFRC522_2_Reset>

	//Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
	Write_2_MFRC522(TModeReg, 0x8D);		//Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 8000700:	218d      	movs	r1, #141	@ 0x8d
 8000702:	202a      	movs	r0, #42	@ 0x2a
 8000704:	f7ff ff52 	bl	80005ac <Write_2_MFRC522>
	Write_2_MFRC522(TPrescalerReg, 0x3E);	//TModeReg[3..0] + TPrescalerReg
 8000708:	213e      	movs	r1, #62	@ 0x3e
 800070a:	202b      	movs	r0, #43	@ 0x2b
 800070c:	f7ff ff4e 	bl	80005ac <Write_2_MFRC522>
	Write_2_MFRC522(TReloadRegL, 30);
 8000710:	211e      	movs	r1, #30
 8000712:	202d      	movs	r0, #45	@ 0x2d
 8000714:	f7ff ff4a 	bl	80005ac <Write_2_MFRC522>
	Write_2_MFRC522(TReloadRegH, 0);
 8000718:	2100      	movs	r1, #0
 800071a:	202c      	movs	r0, #44	@ 0x2c
 800071c:	f7ff ff46 	bl	80005ac <Write_2_MFRC522>

	Write_2_MFRC522(TxAutoReg, 0x40);		// force 100% ASK modulation
 8000720:	2140      	movs	r1, #64	@ 0x40
 8000722:	2015      	movs	r0, #21
 8000724:	f7ff ff42 	bl	80005ac <Write_2_MFRC522>
	Write_2_MFRC522(ModeReg, 0x3D);		// CRC Initial value 0x6363
 8000728:	213d      	movs	r1, #61	@ 0x3d
 800072a:	2011      	movs	r0, #17
 800072c:	f7ff ff3e 	bl	80005ac <Write_2_MFRC522>

	AntennaOn_2();
 8000730:	f7ff ffc5 	bl	80006be <AntennaOn_2>
}
 8000734:	bf00      	nop
 8000736:	bd80      	pop	{r7, pc}
 8000738:	40021000 	.word	0x40021000
 800073c:	40020800 	.word	0x40020800

08000740 <MFRC522_2_ToCard>:
 *			 backData--Received the card returns data,
 *			 backLen--Return data bit length
 * Return value: the successful return MI_OK
 */
uchar MFRC522_2_ToCard(uchar command, uchar *sendData, uchar sendLen, uchar *backData, uint *backLen)
{
 8000740:	b590      	push	{r4, r7, lr}
 8000742:	b089      	sub	sp, #36	@ 0x24
 8000744:	af00      	add	r7, sp, #0
 8000746:	60b9      	str	r1, [r7, #8]
 8000748:	607b      	str	r3, [r7, #4]
 800074a:	4603      	mov	r3, r0
 800074c:	73fb      	strb	r3, [r7, #15]
 800074e:	4613      	mov	r3, r2
 8000750:	73bb      	strb	r3, [r7, #14]
    uchar status = MI_ERR;
 8000752:	2302      	movs	r3, #2
 8000754:	77fb      	strb	r3, [r7, #31]
    uchar irqEn = 0x00;
 8000756:	2300      	movs	r3, #0
 8000758:	77bb      	strb	r3, [r7, #30]
    uchar waitIRq = 0x00;
 800075a:	2300      	movs	r3, #0
 800075c:	777b      	strb	r3, [r7, #29]
    uchar lastBits;

    uchar n=0;
 800075e:	2300      	movs	r3, #0
 8000760:	773b      	strb	r3, [r7, #28]
    uint i=0;
 8000762:	2300      	movs	r3, #0
 8000764:	61bb      	str	r3, [r7, #24]
    uchar read3;
    uchar read5;*/ //this was for reading register values



    switch (command)
 8000766:	7bfb      	ldrb	r3, [r7, #15]
 8000768:	2b0c      	cmp	r3, #12
 800076a:	d006      	beq.n	800077a <MFRC522_2_ToCard+0x3a>
 800076c:	2b0e      	cmp	r3, #14
 800076e:	d109      	bne.n	8000784 <MFRC522_2_ToCard+0x44>
    {
        case PCD_AUTHENT:		// Certification cards close
		{
			irqEn = 0x12;
 8000770:	2312      	movs	r3, #18
 8000772:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x10;
 8000774:	2310      	movs	r3, #16
 8000776:	777b      	strb	r3, [r7, #29]
			break;
 8000778:	e005      	b.n	8000786 <MFRC522_2_ToCard+0x46>
		}
		case PCD_TRANSCEIVE:	// Transmit FIFO data
		{
			irqEn = 0x77;
 800077a:	2377      	movs	r3, #119	@ 0x77
 800077c:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x30;
 800077e:	2330      	movs	r3, #48	@ 0x30
 8000780:	777b      	strb	r3, [r7, #29]
			break;
 8000782:	e000      	b.n	8000786 <MFRC522_2_ToCard+0x46>
		}
		default:
			break;
 8000784:	bf00      	nop
    }

    Write_2_MFRC522(CommIEnReg, irqEn|0x80);	// Interrupt request
 8000786:	7fbb      	ldrb	r3, [r7, #30]
 8000788:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800078c:	b2db      	uxtb	r3, r3
 800078e:	4619      	mov	r1, r3
 8000790:	2002      	movs	r0, #2
 8000792:	f7ff ff0b 	bl	80005ac <Write_2_MFRC522>
    ClearBitMask_2(CommIrqReg, 0x80);			// Clear all interrupt request bit
 8000796:	2180      	movs	r1, #128	@ 0x80
 8000798:	2004      	movs	r0, #4
 800079a:	f7ff ff70 	bl	800067e <ClearBitMask_2>

    ClearBitMask_2(FIFOLevelReg, 0x80);
 800079e:	2180      	movs	r1, #128	@ 0x80
 80007a0:	200a      	movs	r0, #10
 80007a2:	f7ff ff6c 	bl	800067e <ClearBitMask_2>
    SetBitMask_2(FIFOLevelReg, 0x80);			// FlushBuffer=1, FIFO Initialization
 80007a6:	2180      	movs	r1, #128	@ 0x80
 80007a8:	200a      	movs	r0, #10
 80007aa:	f7ff ff4d 	bl	8000648 <SetBitMask_2>
    //read2 = Read_2_MFRC522(FIFOLevelReg);

    Write_2_MFRC522(CommandReg, PCD_IDLE);	// NO action; Cancel the current command
 80007ae:	2100      	movs	r1, #0
 80007b0:	2001      	movs	r0, #1
 80007b2:	f7ff fefb 	bl	80005ac <Write_2_MFRC522>

	// Writing data to the FIFO
    for (i=0; i<sendLen; i++)
 80007b6:	2300      	movs	r3, #0
 80007b8:	61bb      	str	r3, [r7, #24]
 80007ba:	e00a      	b.n	80007d2 <MFRC522_2_ToCard+0x92>
    {
		Write_2_MFRC522(FIFODataReg, sendData[i]);
 80007bc:	68ba      	ldr	r2, [r7, #8]
 80007be:	69bb      	ldr	r3, [r7, #24]
 80007c0:	4413      	add	r3, r2
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	4619      	mov	r1, r3
 80007c6:	2009      	movs	r0, #9
 80007c8:	f7ff fef0 	bl	80005ac <Write_2_MFRC522>
    for (i=0; i<sendLen; i++)
 80007cc:	69bb      	ldr	r3, [r7, #24]
 80007ce:	3301      	adds	r3, #1
 80007d0:	61bb      	str	r3, [r7, #24]
 80007d2:	7bbb      	ldrb	r3, [r7, #14]
 80007d4:	69ba      	ldr	r2, [r7, #24]
 80007d6:	429a      	cmp	r2, r3
 80007d8:	d3f0      	bcc.n	80007bc <MFRC522_2_ToCard+0x7c>
	}

    // Execute the command
	Write_2_MFRC522(CommandReg, command);
 80007da:	7bfb      	ldrb	r3, [r7, #15]
 80007dc:	4619      	mov	r1, r3
 80007de:	2001      	movs	r0, #1
 80007e0:	f7ff fee4 	bl	80005ac <Write_2_MFRC522>
    if (command == PCD_TRANSCEIVE)
 80007e4:	7bfb      	ldrb	r3, [r7, #15]
 80007e6:	2b0c      	cmp	r3, #12
 80007e8:	d103      	bne.n	80007f2 <MFRC522_2_ToCard+0xb2>
    {
		SetBitMask_2(BitFramingReg, 0x80);		// StartSend=1,transmission of data starts
 80007ea:	2180      	movs	r1, #128	@ 0x80
 80007ec:	200d      	movs	r0, #13
 80007ee:	f7ff ff2b 	bl	8000648 <SetBitMask_2>
	}

    // Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 80007f2:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80007f6:	61bb      	str	r3, [r7, #24]
    do
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = Read_2_MFRC522(CommIrqReg);
 80007f8:	2004      	movs	r0, #4
 80007fa:	f7ff fefd 	bl	80005f8 <Read_2_MFRC522>
 80007fe:	4603      	mov	r3, r0
 8000800:	773b      	strb	r3, [r7, #28]
        i--;
 8000802:	69bb      	ldr	r3, [r7, #24]
 8000804:	3b01      	subs	r3, #1
 8000806:	61bb      	str	r3, [r7, #24]
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8000808:	69bb      	ldr	r3, [r7, #24]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d00a      	beq.n	8000824 <MFRC522_2_ToCard+0xe4>
 800080e:	7f3b      	ldrb	r3, [r7, #28]
 8000810:	f003 0301 	and.w	r3, r3, #1
 8000814:	2b00      	cmp	r3, #0
 8000816:	d105      	bne.n	8000824 <MFRC522_2_ToCard+0xe4>
 8000818:	7f3a      	ldrb	r2, [r7, #28]
 800081a:	7f7b      	ldrb	r3, [r7, #29]
 800081c:	4013      	ands	r3, r2
 800081e:	b2db      	uxtb	r3, r3
 8000820:	2b00      	cmp	r3, #0
 8000822:	d0e9      	beq.n	80007f8 <MFRC522_2_ToCard+0xb8>

    ClearBitMask_2(BitFramingReg, 0x80);			//StartSend=0
 8000824:	2180      	movs	r1, #128	@ 0x80
 8000826:	200d      	movs	r0, #13
 8000828:	f7ff ff29 	bl	800067e <ClearBitMask_2>
	//read5 =  (Read_2_MFRC522(ErrorReg) & 0x1B);

    if (i != 0)
 800082c:	69bb      	ldr	r3, [r7, #24]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d052      	beq.n	80008d8 <MFRC522_2_ToCard+0x198>
    {
        if(!(Read_2_MFRC522(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
 8000832:	2006      	movs	r0, #6
 8000834:	f7ff fee0 	bl	80005f8 <Read_2_MFRC522>
 8000838:	4603      	mov	r3, r0
 800083a:	f003 031b 	and.w	r3, r3, #27
 800083e:	2b00      	cmp	r3, #0
 8000840:	d148      	bne.n	80008d4 <MFRC522_2_ToCard+0x194>
        {
            status = MI_OK;
 8000842:	2300      	movs	r3, #0
 8000844:	77fb      	strb	r3, [r7, #31]
            if (n & irqEn & 0x01)
 8000846:	7f3a      	ldrb	r2, [r7, #28]
 8000848:	7fbb      	ldrb	r3, [r7, #30]
 800084a:	4013      	ands	r3, r2
 800084c:	b2db      	uxtb	r3, r3
 800084e:	f003 0301 	and.w	r3, r3, #1
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MFRC522_2_ToCard+0x11a>
            {
				status = MI_NOTAGERR;
 8000856:	2301      	movs	r3, #1
 8000858:	77fb      	strb	r3, [r7, #31]
			}

            if (command == PCD_TRANSCEIVE)
 800085a:	7bfb      	ldrb	r3, [r7, #15]
 800085c:	2b0c      	cmp	r3, #12
 800085e:	d13b      	bne.n	80008d8 <MFRC522_2_ToCard+0x198>
            {
               	n = Read_2_MFRC522(FIFOLevelReg);
 8000860:	200a      	movs	r0, #10
 8000862:	f7ff fec9 	bl	80005f8 <Read_2_MFRC522>
 8000866:	4603      	mov	r3, r0
 8000868:	773b      	strb	r3, [r7, #28]
              	lastBits = Read_2_MFRC522(ControlReg) & 0x07;
 800086a:	200c      	movs	r0, #12
 800086c:	f7ff fec4 	bl	80005f8 <Read_2_MFRC522>
 8000870:	4603      	mov	r3, r0
 8000872:	f003 0307 	and.w	r3, r3, #7
 8000876:	75fb      	strb	r3, [r7, #23]
                if (lastBits)
 8000878:	7dfb      	ldrb	r3, [r7, #23]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d008      	beq.n	8000890 <MFRC522_2_ToCard+0x150>
                {
					*backLen = (n-1)*8 + lastBits;
 800087e:	7f3b      	ldrb	r3, [r7, #28]
 8000880:	3b01      	subs	r3, #1
 8000882:	00da      	lsls	r2, r3, #3
 8000884:	7dfb      	ldrb	r3, [r7, #23]
 8000886:	4413      	add	r3, r2
 8000888:	461a      	mov	r2, r3
 800088a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	e004      	b.n	800089a <MFRC522_2_ToCard+0x15a>
				}
                else
                {
					*backLen = n*8;
 8000890:	7f3b      	ldrb	r3, [r7, #28]
 8000892:	00db      	lsls	r3, r3, #3
 8000894:	461a      	mov	r2, r3
 8000896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000898:	601a      	str	r2, [r3, #0]
				}

                if (n == 0)
 800089a:	7f3b      	ldrb	r3, [r7, #28]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d101      	bne.n	80008a4 <MFRC522_2_ToCard+0x164>
                {
					n = 1;
 80008a0:	2301      	movs	r3, #1
 80008a2:	773b      	strb	r3, [r7, #28]
				}
                if (n > MAX_LEN)
 80008a4:	7f3b      	ldrb	r3, [r7, #28]
 80008a6:	2b10      	cmp	r3, #16
 80008a8:	d901      	bls.n	80008ae <MFRC522_2_ToCard+0x16e>
                {
					n = MAX_LEN;
 80008aa:	2310      	movs	r3, #16
 80008ac:	773b      	strb	r3, [r7, #28]
				}

                // Reading the received data in FIFO
                for (i=0; i<n; i++)
 80008ae:	2300      	movs	r3, #0
 80008b0:	61bb      	str	r3, [r7, #24]
 80008b2:	e00a      	b.n	80008ca <MFRC522_2_ToCard+0x18a>
                {
					backData[i] = Read_2_MFRC522(FIFODataReg);
 80008b4:	687a      	ldr	r2, [r7, #4]
 80008b6:	69bb      	ldr	r3, [r7, #24]
 80008b8:	18d4      	adds	r4, r2, r3
 80008ba:	2009      	movs	r0, #9
 80008bc:	f7ff fe9c 	bl	80005f8 <Read_2_MFRC522>
 80008c0:	4603      	mov	r3, r0
 80008c2:	7023      	strb	r3, [r4, #0]
                for (i=0; i<n; i++)
 80008c4:	69bb      	ldr	r3, [r7, #24]
 80008c6:	3301      	adds	r3, #1
 80008c8:	61bb      	str	r3, [r7, #24]
 80008ca:	7f3b      	ldrb	r3, [r7, #28]
 80008cc:	69ba      	ldr	r2, [r7, #24]
 80008ce:	429a      	cmp	r2, r3
 80008d0:	d3f0      	bcc.n	80008b4 <MFRC522_2_ToCard+0x174>
 80008d2:	e001      	b.n	80008d8 <MFRC522_2_ToCard+0x198>
				}
            }
        }
        else
        {
			status = MI_ERR;
 80008d4:	2302      	movs	r3, #2
 80008d6:	77fb      	strb	r3, [r7, #31]
    }

    //SetBitMask_2(ControlReg,0x80);           //timer stops
    //Write_2_MFRC522(CommandReg, PCD_IDLE);

    return status;
 80008d8:	7ffb      	ldrb	r3, [r7, #31]
}
 80008da:	4618      	mov	r0, r3
 80008dc:	3724      	adds	r7, #36	@ 0x24
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd90      	pop	{r4, r7, pc}

080008e2 <MFRC522_2_Request>:
 *    0x0800 = Mifare_Pro(X)
 *    0x4403 = Mifare_DESFire
 * Return value: the successful return MI_OK
 */
uchar MFRC522_2_Request(uchar reqMode, uchar *TagType)
{
 80008e2:	b580      	push	{r7, lr}
 80008e4:	b086      	sub	sp, #24
 80008e6:	af02      	add	r7, sp, #8
 80008e8:	4603      	mov	r3, r0
 80008ea:	6039      	str	r1, [r7, #0]
 80008ec:	71fb      	strb	r3, [r7, #7]
	uchar status;
	uint backBits;			 // The received data bits

	Write_2_MFRC522(BitFramingReg, 0x07);		//TxLastBists = BitFramingReg[2..0]
 80008ee:	2107      	movs	r1, #7
 80008f0:	200d      	movs	r0, #13
 80008f2:	f7ff fe5b 	bl	80005ac <Write_2_MFRC522>

	TagType[0] = reqMode;
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	79fa      	ldrb	r2, [r7, #7]
 80008fa:	701a      	strb	r2, [r3, #0]
	status = MFRC522_2_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 80008fc:	f107 0308 	add.w	r3, r7, #8
 8000900:	9300      	str	r3, [sp, #0]
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	2201      	movs	r2, #1
 8000906:	6839      	ldr	r1, [r7, #0]
 8000908:	200c      	movs	r0, #12
 800090a:	f7ff ff19 	bl	8000740 <MFRC522_2_ToCard>
 800090e:	4603      	mov	r3, r0
 8000910:	73fb      	strb	r3, [r7, #15]

	if ((status != MI_OK) || (backBits != 0x10))
 8000912:	7bfb      	ldrb	r3, [r7, #15]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d102      	bne.n	800091e <MFRC522_2_Request+0x3c>
 8000918:	68bb      	ldr	r3, [r7, #8]
 800091a:	2b10      	cmp	r3, #16
 800091c:	d001      	beq.n	8000922 <MFRC522_2_Request+0x40>
	{
		status = MI_ERR;
 800091e:	2302      	movs	r3, #2
 8000920:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8000922:	7bfb      	ldrb	r3, [r7, #15]
}
 8000924:	4618      	mov	r0, r3
 8000926:	3710      	adds	r7, #16
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}

0800092c <MFRC522_2_Anticoll>:
 * Description: Anti-collision detection, reading selected card serial number card
 * Input parameters: serNum - returns 4 bytes card serial number, the first 5 bytes for the checksum byte
 * Return value: the successful return MI_OK
 */
uchar MFRC522_2_Anticoll(uchar *serNum)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b086      	sub	sp, #24
 8000930:	af02      	add	r7, sp, #8
 8000932:	6078      	str	r0, [r7, #4]
    uchar status;
    uchar i;
	uchar serNumCheck=0;
 8000934:	2300      	movs	r3, #0
 8000936:	737b      	strb	r3, [r7, #13]
    uint unLen;

	Write_2_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 8000938:	2100      	movs	r1, #0
 800093a:	200d      	movs	r0, #13
 800093c:	f7ff fe36 	bl	80005ac <Write_2_MFRC522>

    serNum[0] = PICC_ANTICOLL;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	2293      	movs	r2, #147	@ 0x93
 8000944:	701a      	strb	r2, [r3, #0]
    serNum[1] = 0x20;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	3301      	adds	r3, #1
 800094a:	2220      	movs	r2, #32
 800094c:	701a      	strb	r2, [r3, #0]
    status = MFRC522_2_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 800094e:	f107 0308 	add.w	r3, r7, #8
 8000952:	9300      	str	r3, [sp, #0]
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2202      	movs	r2, #2
 8000958:	6879      	ldr	r1, [r7, #4]
 800095a:	200c      	movs	r0, #12
 800095c:	f7ff fef0 	bl	8000740 <MFRC522_2_ToCard>
 8000960:	4603      	mov	r3, r0
 8000962:	73fb      	strb	r3, [r7, #15]

    if (status == MI_OK)
 8000964:	7bfb      	ldrb	r3, [r7, #15]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d118      	bne.n	800099c <MFRC522_2_Anticoll+0x70>
	{
    	 //Check card serial number
		for (i=0; i<4; i++)
 800096a:	2300      	movs	r3, #0
 800096c:	73bb      	strb	r3, [r7, #14]
 800096e:	e009      	b.n	8000984 <MFRC522_2_Anticoll+0x58>
		{
		 	serNumCheck ^= serNum[i];
 8000970:	7bbb      	ldrb	r3, [r7, #14]
 8000972:	687a      	ldr	r2, [r7, #4]
 8000974:	4413      	add	r3, r2
 8000976:	781a      	ldrb	r2, [r3, #0]
 8000978:	7b7b      	ldrb	r3, [r7, #13]
 800097a:	4053      	eors	r3, r2
 800097c:	737b      	strb	r3, [r7, #13]
		for (i=0; i<4; i++)
 800097e:	7bbb      	ldrb	r3, [r7, #14]
 8000980:	3301      	adds	r3, #1
 8000982:	73bb      	strb	r3, [r7, #14]
 8000984:	7bbb      	ldrb	r3, [r7, #14]
 8000986:	2b03      	cmp	r3, #3
 8000988:	d9f2      	bls.n	8000970 <MFRC522_2_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i])
 800098a:	7bbb      	ldrb	r3, [r7, #14]
 800098c:	687a      	ldr	r2, [r7, #4]
 800098e:	4413      	add	r3, r2
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	7b7a      	ldrb	r2, [r7, #13]
 8000994:	429a      	cmp	r2, r3
 8000996:	d001      	beq.n	800099c <MFRC522_2_Anticoll+0x70>
		{
			status = MI_ERR;
 8000998:	2302      	movs	r3, #2
 800099a:	73fb      	strb	r3, [r7, #15]
		}
    }

    return status;
 800099c:	7bfb      	ldrb	r3, [r7, #15]
}
 800099e:	4618      	mov	r0, r3
 80009a0:	3710      	adds	r7, #16
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}

080009a6 <CalulateCRC_2>:
 * Description: CRC calculation with MF522
 * Input parameters: pIndata - To read the CRC data, len - the data length, pOutData - CRC calculation results
 * Return value: None
 */
void CalulateCRC_2(uchar *pIndata, uchar len, uchar *pOutData)
{
 80009a6:	b590      	push	{r4, r7, lr}
 80009a8:	b087      	sub	sp, #28
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	60f8      	str	r0, [r7, #12]
 80009ae:	460b      	mov	r3, r1
 80009b0:	607a      	str	r2, [r7, #4]
 80009b2:	72fb      	strb	r3, [r7, #11]
    uchar i, n;

    ClearBitMask_2(DivIrqReg, 0x04);			//CRCIrq = 0
 80009b4:	2104      	movs	r1, #4
 80009b6:	2005      	movs	r0, #5
 80009b8:	f7ff fe61 	bl	800067e <ClearBitMask_2>
    SetBitMask_2(FIFOLevelReg, 0x80);			//Clear the FIFO pointer
 80009bc:	2180      	movs	r1, #128	@ 0x80
 80009be:	200a      	movs	r0, #10
 80009c0:	f7ff fe42 	bl	8000648 <SetBitMask_2>

    //Writing data to the FIFO
    for (i=0; i<len; i++)
 80009c4:	2300      	movs	r3, #0
 80009c6:	75fb      	strb	r3, [r7, #23]
 80009c8:	e00a      	b.n	80009e0 <CalulateCRC_2+0x3a>
    {
		Write_2_MFRC522(FIFODataReg, *(pIndata+i));
 80009ca:	7dfb      	ldrb	r3, [r7, #23]
 80009cc:	68fa      	ldr	r2, [r7, #12]
 80009ce:	4413      	add	r3, r2
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	4619      	mov	r1, r3
 80009d4:	2009      	movs	r0, #9
 80009d6:	f7ff fde9 	bl	80005ac <Write_2_MFRC522>
    for (i=0; i<len; i++)
 80009da:	7dfb      	ldrb	r3, [r7, #23]
 80009dc:	3301      	adds	r3, #1
 80009de:	75fb      	strb	r3, [r7, #23]
 80009e0:	7dfa      	ldrb	r2, [r7, #23]
 80009e2:	7afb      	ldrb	r3, [r7, #11]
 80009e4:	429a      	cmp	r2, r3
 80009e6:	d3f0      	bcc.n	80009ca <CalulateCRC_2+0x24>
	}
    Write_2_MFRC522(CommandReg, PCD_CALCCRC);
 80009e8:	2103      	movs	r1, #3
 80009ea:	2001      	movs	r0, #1
 80009ec:	f7ff fdde 	bl	80005ac <Write_2_MFRC522>

    //Wait CRC calculation is complete
    i = 0xFF;
 80009f0:	23ff      	movs	r3, #255	@ 0xff
 80009f2:	75fb      	strb	r3, [r7, #23]
    do
    {
        n = Read_2_MFRC522(DivIrqReg);
 80009f4:	2005      	movs	r0, #5
 80009f6:	f7ff fdff 	bl	80005f8 <Read_2_MFRC522>
 80009fa:	4603      	mov	r3, r0
 80009fc:	75bb      	strb	r3, [r7, #22]
        i--;
 80009fe:	7dfb      	ldrb	r3, [r7, #23]
 8000a00:	3b01      	subs	r3, #1
 8000a02:	75fb      	strb	r3, [r7, #23]
    }
    while ((i!=0) && !(n&0x04));			//CRCIrq = 1
 8000a04:	7dfb      	ldrb	r3, [r7, #23]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d004      	beq.n	8000a14 <CalulateCRC_2+0x6e>
 8000a0a:	7dbb      	ldrb	r3, [r7, #22]
 8000a0c:	f003 0304 	and.w	r3, r3, #4
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d0ef      	beq.n	80009f4 <CalulateCRC_2+0x4e>

    //Read CRC calculation result
    pOutData[0] = Read_2_MFRC522(CRCResultRegL);
 8000a14:	2022      	movs	r0, #34	@ 0x22
 8000a16:	f7ff fdef 	bl	80005f8 <Read_2_MFRC522>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	701a      	strb	r2, [r3, #0]
    pOutData[1] = Read_2_MFRC522(CRCResultRegH);
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	1c5c      	adds	r4, r3, #1
 8000a26:	2021      	movs	r0, #33	@ 0x21
 8000a28:	f7ff fde6 	bl	80005f8 <Read_2_MFRC522>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	7023      	strb	r3, [r4, #0]
}
 8000a30:	bf00      	nop
 8000a32:	371c      	adds	r7, #28
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd90      	pop	{r4, r7, pc}

08000a38 <MFRC522_2_SelectTag>:
 * Description: election card, read the card memory capacity
 * Input parameters: serNum - Incoming card serial number
 * Return value: the successful return of card capacity
 */
uchar MFRC522_2_SelectTag(uchar *serNum)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b08a      	sub	sp, #40	@ 0x28
 8000a3c:	af02      	add	r7, sp, #8
 8000a3e:	6078      	str	r0, [r7, #4]
	uint recvBits;
	uchar buffer[9];

	//ClearBitMask_2(Status2Reg, 0x08);			//MFCrypto1On=0

    buffer[0] = PICC_SElECTTAG;
 8000a40:	2393      	movs	r3, #147	@ 0x93
 8000a42:	733b      	strb	r3, [r7, #12]
    buffer[1] = 0x70;
 8000a44:	2370      	movs	r3, #112	@ 0x70
 8000a46:	737b      	strb	r3, [r7, #13]
    for (i=0; i<5; i++)
 8000a48:	2300      	movs	r3, #0
 8000a4a:	77fb      	strb	r3, [r7, #31]
 8000a4c:	e00c      	b.n	8000a68 <MFRC522_2_SelectTag+0x30>
    {
    	buffer[i+2] = *(serNum+i);
 8000a4e:	7ffb      	ldrb	r3, [r7, #31]
 8000a50:	687a      	ldr	r2, [r7, #4]
 8000a52:	441a      	add	r2, r3
 8000a54:	7ffb      	ldrb	r3, [r7, #31]
 8000a56:	3302      	adds	r3, #2
 8000a58:	7812      	ldrb	r2, [r2, #0]
 8000a5a:	3320      	adds	r3, #32
 8000a5c:	443b      	add	r3, r7
 8000a5e:	f803 2c14 	strb.w	r2, [r3, #-20]
    for (i=0; i<5; i++)
 8000a62:	7ffb      	ldrb	r3, [r7, #31]
 8000a64:	3301      	adds	r3, #1
 8000a66:	77fb      	strb	r3, [r7, #31]
 8000a68:	7ffb      	ldrb	r3, [r7, #31]
 8000a6a:	2b04      	cmp	r3, #4
 8000a6c:	d9ef      	bls.n	8000a4e <MFRC522_2_SelectTag+0x16>
    }
	CalulateCRC_2(buffer, 7, &buffer[7]);
 8000a6e:	f107 030c 	add.w	r3, r7, #12
 8000a72:	1dda      	adds	r2, r3, #7
 8000a74:	f107 030c 	add.w	r3, r7, #12
 8000a78:	2107      	movs	r1, #7
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f7ff ff93 	bl	80009a6 <CalulateCRC_2>
    status = MFRC522_2_ToCard(PCD_TRANSCEIVE, buffer, 9, buffer, &recvBits);
 8000a80:	f107 020c 	add.w	r2, r7, #12
 8000a84:	f107 010c 	add.w	r1, r7, #12
 8000a88:	f107 0318 	add.w	r3, r7, #24
 8000a8c:	9300      	str	r3, [sp, #0]
 8000a8e:	4613      	mov	r3, r2
 8000a90:	2209      	movs	r2, #9
 8000a92:	200c      	movs	r0, #12
 8000a94:	f7ff fe54 	bl	8000740 <MFRC522_2_ToCard>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	777b      	strb	r3, [r7, #29]

    if ((status == MI_OK) && (recvBits == 0x18))
 8000a9c:	7f7b      	ldrb	r3, [r7, #29]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d105      	bne.n	8000aae <MFRC522_2_SelectTag+0x76>
 8000aa2:	69bb      	ldr	r3, [r7, #24]
 8000aa4:	2b18      	cmp	r3, #24
 8000aa6:	d102      	bne.n	8000aae <MFRC522_2_SelectTag+0x76>
    {
		size = buffer[0];
 8000aa8:	7b3b      	ldrb	r3, [r7, #12]
 8000aaa:	77bb      	strb	r3, [r7, #30]
 8000aac:	e001      	b.n	8000ab2 <MFRC522_2_SelectTag+0x7a>
	}
    else
    {
		size = 0;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	77bb      	strb	r3, [r7, #30]
	}

    return size;
 8000ab2:	7fbb      	ldrb	r3, [r7, #30]
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	3720      	adds	r7, #32
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}

08000abc <MFRC522_2_Halt>:
 * Description: Command card into hibernation
 * Input: None
 * Return value: None
 */
void MFRC522_2_Halt(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af02      	add	r7, sp, #8
	uint unLen;
	uchar buff[4];

	buff[0] = PICC_HALT;
 8000ac2:	2350      	movs	r3, #80	@ 0x50
 8000ac4:	703b      	strb	r3, [r7, #0]
	buff[1] = 0;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	707b      	strb	r3, [r7, #1]
	CalulateCRC_2(buff, 2, &buff[2]);
 8000aca:	463b      	mov	r3, r7
 8000acc:	1c9a      	adds	r2, r3, #2
 8000ace:	463b      	mov	r3, r7
 8000ad0:	2102      	movs	r1, #2
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f7ff ff67 	bl	80009a6 <CalulateCRC_2>

	MFRC522_2_ToCard(PCD_TRANSCEIVE, buff, 4, buff,&unLen);
 8000ad8:	463a      	mov	r2, r7
 8000ada:	4639      	mov	r1, r7
 8000adc:	1d3b      	adds	r3, r7, #4
 8000ade:	9300      	str	r3, [sp, #0]
 8000ae0:	4613      	mov	r3, r2
 8000ae2:	2204      	movs	r2, #4
 8000ae4:	200c      	movs	r0, #12
 8000ae6:	f7ff fe2b 	bl	8000740 <MFRC522_2_ToCard>
}
 8000aea:	bf00      	nop
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}

08000af2 <MFRC522_2_StopCrypto1>:

void MFRC522_2_StopCrypto1(void)
{
 8000af2:	b580      	push	{r7, lr}
 8000af4:	af00      	add	r7, sp, #0
    Write_2_MFRC522(Status2Reg, 0x00);  // Clear MFCrypto1On bit (disable encryption)
 8000af6:	2100      	movs	r1, #0
 8000af8:	2008      	movs	r0, #8
 8000afa:	f7ff fd57 	bl	80005ac <Write_2_MFRC522>
    Write_2_MFRC522(CommandReg, PCD_IDLE);  // Ensure the MFRC522 is in IDLE mode
 8000afe:	2100      	movs	r1, #0
 8000b00:	2001      	movs	r0, #1
 8000b02:	f7ff fd53 	bl	80005ac <Write_2_MFRC522>
}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}
	...

08000b0c <RC522_1_SPI_Transfer>:
 * Description: A common function used by Write_1_MFRC522 and Read_1_MFRC522
 * Input Parameters: data - the value to be written
 * Returns: a byte of data read from the module
 */
uint8_t RC522_1_SPI_Transfer(uchar data)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b086      	sub	sp, #24
 8000b10:	af02      	add	r7, sp, #8
 8000b12:	4603      	mov	r3, r0
 8000b14:	71fb      	strb	r3, [r7, #7]
	uchar rx_data;
	HAL_SPI_TransmitReceive(HSPI_INSTANCE,&data,&rx_data,1,100);
 8000b16:	f107 020f 	add.w	r2, r7, #15
 8000b1a:	1df9      	adds	r1, r7, #7
 8000b1c:	2364      	movs	r3, #100	@ 0x64
 8000b1e:	9300      	str	r3, [sp, #0]
 8000b20:	2301      	movs	r3, #1
 8000b22:	4804      	ldr	r0, [pc, #16]	@ (8000b34 <RC522_1_SPI_Transfer+0x28>)
 8000b24:	f004 faa1 	bl	800506a <HAL_SPI_TransmitReceive>

	return rx_data;
 8000b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3710      	adds	r7, #16
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	20000148 	.word	0x20000148

08000b38 <Write_1_MFRC522>:
 * Function Description: To a certain MFRC522 register to write a byte of data
 * Input Parameters: addr - register address; val - the value to be written
 * Return value: None
 */
void Write_1_MFRC522(uchar addr, uchar val)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	460a      	mov	r2, r1
 8000b42:	71fb      	strb	r3, [r7, #7]
 8000b44:	4613      	mov	r3, r2
 8000b46:	71bb      	strb	r3, [r7, #6]
	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	2110      	movs	r1, #16
 8000b4c:	480c      	ldr	r0, [pc, #48]	@ (8000b80 <Write_1_MFRC522+0x48>)
 8000b4e:	f003 f899 	bl	8003c84 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and clear the MSb to indicate a write
	  // - bottom 8 bits are the data bits being sent for that address, we send them
	RC522_1_SPI_Transfer((addr<<1)&0x7E);
 8000b52:	79fb      	ldrb	r3, [r7, #7]
 8000b54:	005b      	lsls	r3, r3, #1
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f7ff ffd4 	bl	8000b0c <RC522_1_SPI_Transfer>
	RC522_1_SPI_Transfer(val);
 8000b64:	79bb      	ldrb	r3, [r7, #6]
 8000b66:	4618      	mov	r0, r3
 8000b68:	f7ff ffd0 	bl	8000b0c <RC522_1_SPI_Transfer>
	
	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	2110      	movs	r1, #16
 8000b70:	4803      	ldr	r0, [pc, #12]	@ (8000b80 <Write_1_MFRC522+0x48>)
 8000b72:	f003 f887 	bl	8003c84 <HAL_GPIO_WritePin>
}
 8000b76:	bf00      	nop
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40020000 	.word	0x40020000

08000b84 <Read_1_MFRC522>:
 * Description: From a certain MFRC522 read a byte of data register
 * Input Parameters: addr - register address
 * Returns: a byte of data read from the module
 */
uchar Read_1_MFRC522(uchar addr)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b084      	sub	sp, #16
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	71fb      	strb	r3, [r7, #7]
	uchar val;

	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	2110      	movs	r1, #16
 8000b92:	480f      	ldr	r0, [pc, #60]	@ (8000bd0 <Read_1_MFRC522+0x4c>)
 8000b94:	f003 f876 	bl	8003c84 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and set the MSb to indicate a read
	  // - bottom 8 bits are all 0s on a read per 8.1.2.1 Table 6
	RC522_1_SPI_Transfer(((addr<<1)&0x7E) | 0x80);
 8000b98:	79fb      	ldrb	r3, [r7, #7]
 8000b9a:	005b      	lsls	r3, r3, #1
 8000b9c:	b25b      	sxtb	r3, r3
 8000b9e:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8000ba2:	b25b      	sxtb	r3, r3
 8000ba4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000ba8:	b25b      	sxtb	r3, r3
 8000baa:	b2db      	uxtb	r3, r3
 8000bac:	4618      	mov	r0, r3
 8000bae:	f7ff ffad 	bl	8000b0c <RC522_1_SPI_Transfer>
	val = RC522_1_SPI_Transfer(0x00);
 8000bb2:	2000      	movs	r0, #0
 8000bb4:	f7ff ffaa 	bl	8000b0c <RC522_1_SPI_Transfer>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	73fb      	strb	r3, [r7, #15]
	
	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	2110      	movs	r1, #16
 8000bc0:	4803      	ldr	r0, [pc, #12]	@ (8000bd0 <Read_1_MFRC522+0x4c>)
 8000bc2:	f003 f85f 	bl	8003c84 <HAL_GPIO_WritePin>
	
	return val;	
 8000bc6:	7bfb      	ldrb	r3, [r7, #15]
	
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	3710      	adds	r7, #16
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	40020000 	.word	0x40020000

08000bd4 <SetBitMask_1>:
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask_1(uchar reg, uchar mask)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	4603      	mov	r3, r0
 8000bdc:	460a      	mov	r2, r1
 8000bde:	71fb      	strb	r3, [r7, #7]
 8000be0:	4613      	mov	r3, r2
 8000be2:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_1_MFRC522(reg);
 8000be4:	79fb      	ldrb	r3, [r7, #7]
 8000be6:	4618      	mov	r0, r3
 8000be8:	f7ff ffcc 	bl	8000b84 <Read_1_MFRC522>
 8000bec:	4603      	mov	r3, r0
 8000bee:	73fb      	strb	r3, [r7, #15]
    Write_1_MFRC522(reg, tmp | mask);  // set bit mask
 8000bf0:	7bfa      	ldrb	r2, [r7, #15]
 8000bf2:	79bb      	ldrb	r3, [r7, #6]
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	b2da      	uxtb	r2, r3
 8000bf8:	79fb      	ldrb	r3, [r7, #7]
 8000bfa:	4611      	mov	r1, r2
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f7ff ff9b 	bl	8000b38 <Write_1_MFRC522>
}
 8000c02:	bf00      	nop
 8000c04:	3710      	adds	r7, #16
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}

08000c0a <ClearBitMask_1>:
 * Description: clear RC522 register bit
 * Input parameters: reg - register address; mask - clear bit value
 * Return value: None
*/
void ClearBitMask_1(uchar reg, uchar mask)
{
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	b084      	sub	sp, #16
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	4603      	mov	r3, r0
 8000c12:	460a      	mov	r2, r1
 8000c14:	71fb      	strb	r3, [r7, #7]
 8000c16:	4613      	mov	r3, r2
 8000c18:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_1_MFRC522(reg);
 8000c1a:	79fb      	ldrb	r3, [r7, #7]
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f7ff ffb1 	bl	8000b84 <Read_1_MFRC522>
 8000c22:	4603      	mov	r3, r0
 8000c24:	73fb      	strb	r3, [r7, #15]
    Write_1_MFRC522(reg, tmp & (~mask));  // clear bit mask
 8000c26:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000c2a:	43db      	mvns	r3, r3
 8000c2c:	b25a      	sxtb	r2, r3
 8000c2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c32:	4013      	ands	r3, r2
 8000c34:	b25b      	sxtb	r3, r3
 8000c36:	b2da      	uxtb	r2, r3
 8000c38:	79fb      	ldrb	r3, [r7, #7]
 8000c3a:	4611      	mov	r1, r2
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f7ff ff7b 	bl	8000b38 <Write_1_MFRC522>
} 
 8000c42:	bf00      	nop
 8000c44:	3710      	adds	r7, #16
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}

08000c4a <AntennaOn_1>:
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn_1(void)
{
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	af00      	add	r7, sp, #0

	Read_1_MFRC522(TxControlReg);
 8000c4e:	2014      	movs	r0, #20
 8000c50:	f7ff ff98 	bl	8000b84 <Read_1_MFRC522>
	SetBitMask_1(TxControlReg, 0x03);
 8000c54:	2103      	movs	r1, #3
 8000c56:	2014      	movs	r0, #20
 8000c58:	f7ff ffbc 	bl	8000bd4 <SetBitMask_1>
}
 8000c5c:	bf00      	nop
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <MFRC522_1_Reset>:
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_1_Reset(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
    Write_1_MFRC522(CommandReg, PCD_RESETPHASE);
 8000c64:	210f      	movs	r1, #15
 8000c66:	2001      	movs	r0, #1
 8000c68:	f7ff ff66 	bl	8000b38 <Write_1_MFRC522>
}
 8000c6c:	bf00      	nop
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <MFRC522_1_Init>:
 * Description: Initialize RC522
 * Input: None
 * Return value: None
*/
void MFRC522_1_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8000c74:	2201      	movs	r2, #1
 8000c76:	2110      	movs	r1, #16
 8000c78:	4812      	ldr	r0, [pc, #72]	@ (8000cc4 <MFRC522_1_Init+0x54>)
 8000c7a:	f003 f803 	bl	8003c84 <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(MFRC522_CS_PORT,GPIO_PIN_3,GPIO_PIN_SET);
	HAL_GPIO_WritePin(MFRC522_RST_PORT,MFRC522_RST_PIN,GPIO_PIN_SET);
 8000c7e:	2201      	movs	r2, #1
 8000c80:	2110      	movs	r1, #16
 8000c82:	4811      	ldr	r0, [pc, #68]	@ (8000cc8 <MFRC522_1_Init+0x58>)
 8000c84:	f002 fffe 	bl	8003c84 <HAL_GPIO_WritePin>
	MFRC522_1_Reset();
 8000c88:	f7ff ffea 	bl	8000c60 <MFRC522_1_Reset>
	 	
	//Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
	Write_1_MFRC522(TModeReg, 0x8D);		//Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 8000c8c:	218d      	movs	r1, #141	@ 0x8d
 8000c8e:	202a      	movs	r0, #42	@ 0x2a
 8000c90:	f7ff ff52 	bl	8000b38 <Write_1_MFRC522>
	Write_1_MFRC522(TPrescalerReg, 0x3E);	//TModeReg[3..0] + TPrescalerReg
 8000c94:	213e      	movs	r1, #62	@ 0x3e
 8000c96:	202b      	movs	r0, #43	@ 0x2b
 8000c98:	f7ff ff4e 	bl	8000b38 <Write_1_MFRC522>
	Write_1_MFRC522(TReloadRegL, 30);
 8000c9c:	211e      	movs	r1, #30
 8000c9e:	202d      	movs	r0, #45	@ 0x2d
 8000ca0:	f7ff ff4a 	bl	8000b38 <Write_1_MFRC522>
	Write_1_MFRC522(TReloadRegH, 0);
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	202c      	movs	r0, #44	@ 0x2c
 8000ca8:	f7ff ff46 	bl	8000b38 <Write_1_MFRC522>
	
	Write_1_MFRC522(TxAutoReg, 0x40);		// force 100% ASK modulation
 8000cac:	2140      	movs	r1, #64	@ 0x40
 8000cae:	2015      	movs	r0, #21
 8000cb0:	f7ff ff42 	bl	8000b38 <Write_1_MFRC522>
	Write_1_MFRC522(ModeReg, 0x3D);		// CRC Initial value 0x6363
 8000cb4:	213d      	movs	r1, #61	@ 0x3d
 8000cb6:	2011      	movs	r0, #17
 8000cb8:	f7ff ff3e 	bl	8000b38 <Write_1_MFRC522>

	AntennaOn_1();
 8000cbc:	f7ff ffc5 	bl	8000c4a <AntennaOn_1>
}
 8000cc0:	bf00      	nop
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	40020000 	.word	0x40020000
 8000cc8:	40020800 	.word	0x40020800

08000ccc <MFRC522_1_ToCard>:
 *			 backData--Received the card returns data,
 *			 backLen--Return data bit length
 * Return value: the successful return MI_OK
 */
uchar MFRC522_1_ToCard(uchar command, uchar *sendData, uchar sendLen, uchar *backData, uint *backLen)
{
 8000ccc:	b590      	push	{r4, r7, lr}
 8000cce:	b089      	sub	sp, #36	@ 0x24
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	60b9      	str	r1, [r7, #8]
 8000cd4:	607b      	str	r3, [r7, #4]
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	73fb      	strb	r3, [r7, #15]
 8000cda:	4613      	mov	r3, r2
 8000cdc:	73bb      	strb	r3, [r7, #14]
    uchar status = MI_ERR;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	77fb      	strb	r3, [r7, #31]
    uchar irqEn = 0x00;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	77bb      	strb	r3, [r7, #30]
    uchar waitIRq = 0x00;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	777b      	strb	r3, [r7, #29]
    uchar lastBits;

    uchar n=0;
 8000cea:	2300      	movs	r3, #0
 8000cec:	773b      	strb	r3, [r7, #28]
    uint i=0;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	61bb      	str	r3, [r7, #24]
    uchar read3;
    uchar read5;



    switch (command)
 8000cf2:	7bfb      	ldrb	r3, [r7, #15]
 8000cf4:	2b0c      	cmp	r3, #12
 8000cf6:	d006      	beq.n	8000d06 <MFRC522_1_ToCard+0x3a>
 8000cf8:	2b0e      	cmp	r3, #14
 8000cfa:	d109      	bne.n	8000d10 <MFRC522_1_ToCard+0x44>
    {
        case PCD_AUTHENT:		// Certification cards close
		{
			irqEn = 0x12;
 8000cfc:	2312      	movs	r3, #18
 8000cfe:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x10;
 8000d00:	2310      	movs	r3, #16
 8000d02:	777b      	strb	r3, [r7, #29]
			break;
 8000d04:	e005      	b.n	8000d12 <MFRC522_1_ToCard+0x46>
		}
		case PCD_TRANSCEIVE:	// Transmit FIFO data
		{
			irqEn = 0x77;
 8000d06:	2377      	movs	r3, #119	@ 0x77
 8000d08:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x30;
 8000d0a:	2330      	movs	r3, #48	@ 0x30
 8000d0c:	777b      	strb	r3, [r7, #29]
			break;
 8000d0e:	e000      	b.n	8000d12 <MFRC522_1_ToCard+0x46>
		}
		default:
			break;
 8000d10:	bf00      	nop
    }
   
    Write_1_MFRC522(CommIEnReg, irqEn|0x80);	// Interrupt request
 8000d12:	7fbb      	ldrb	r3, [r7, #30]
 8000d14:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	2002      	movs	r0, #2
 8000d1e:	f7ff ff0b 	bl	8000b38 <Write_1_MFRC522>
    ClearBitMask_1(CommIrqReg, 0x80);			// Clear all interrupt request bit
 8000d22:	2180      	movs	r1, #128	@ 0x80
 8000d24:	2004      	movs	r0, #4
 8000d26:	f7ff ff70 	bl	8000c0a <ClearBitMask_1>

    ClearBitMask_1(FIFOLevelReg, 0x80);
 8000d2a:	2180      	movs	r1, #128	@ 0x80
 8000d2c:	200a      	movs	r0, #10
 8000d2e:	f7ff ff6c 	bl	8000c0a <ClearBitMask_1>
    SetBitMask_1(FIFOLevelReg, 0x80);			// FlushBuffer=1, FIFO Initialization
 8000d32:	2180      	movs	r1, #128	@ 0x80
 8000d34:	200a      	movs	r0, #10
 8000d36:	f7ff ff4d 	bl	8000bd4 <SetBitMask_1>
    read2 = Read_1_MFRC522(FIFOLevelReg);
 8000d3a:	200a      	movs	r0, #10
 8000d3c:	f7ff ff22 	bl	8000b84 <Read_1_MFRC522>
 8000d40:	4603      	mov	r3, r0
 8000d42:	75fb      	strb	r3, [r7, #23]

    Write_1_MFRC522(CommandReg, PCD_IDLE);	// NO action; Cancel the current command
 8000d44:	2100      	movs	r1, #0
 8000d46:	2001      	movs	r0, #1
 8000d48:	f7ff fef6 	bl	8000b38 <Write_1_MFRC522>

	// Writing data to the FIFO
    for (i=0; i<sendLen; i++)
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	61bb      	str	r3, [r7, #24]
 8000d50:	e00a      	b.n	8000d68 <MFRC522_1_ToCard+0x9c>
    {   
		Write_1_MFRC522(FIFODataReg, sendData[i]);
 8000d52:	68ba      	ldr	r2, [r7, #8]
 8000d54:	69bb      	ldr	r3, [r7, #24]
 8000d56:	4413      	add	r3, r2
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	2009      	movs	r0, #9
 8000d5e:	f7ff feeb 	bl	8000b38 <Write_1_MFRC522>
    for (i=0; i<sendLen; i++)
 8000d62:	69bb      	ldr	r3, [r7, #24]
 8000d64:	3301      	adds	r3, #1
 8000d66:	61bb      	str	r3, [r7, #24]
 8000d68:	7bbb      	ldrb	r3, [r7, #14]
 8000d6a:	69ba      	ldr	r2, [r7, #24]
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	d3f0      	bcc.n	8000d52 <MFRC522_1_ToCard+0x86>
	}

    // Execute the command
	Write_1_MFRC522(CommandReg, command);
 8000d70:	7bfb      	ldrb	r3, [r7, #15]
 8000d72:	4619      	mov	r1, r3
 8000d74:	2001      	movs	r0, #1
 8000d76:	f7ff fedf 	bl	8000b38 <Write_1_MFRC522>
    if (command == PCD_TRANSCEIVE)
 8000d7a:	7bfb      	ldrb	r3, [r7, #15]
 8000d7c:	2b0c      	cmp	r3, #12
 8000d7e:	d103      	bne.n	8000d88 <MFRC522_1_ToCard+0xbc>
    {    
		SetBitMask_1(BitFramingReg, 0x80);		// StartSend=1,transmission of data starts
 8000d80:	2180      	movs	r1, #128	@ 0x80
 8000d82:	200d      	movs	r0, #13
 8000d84:	f7ff ff26 	bl	8000bd4 <SetBitMask_1>
	}   
    
    // Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 8000d88:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000d8c:	61bb      	str	r3, [r7, #24]
    do 
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = Read_1_MFRC522(CommIrqReg);
 8000d8e:	2004      	movs	r0, #4
 8000d90:	f7ff fef8 	bl	8000b84 <Read_1_MFRC522>
 8000d94:	4603      	mov	r3, r0
 8000d96:	773b      	strb	r3, [r7, #28]
        i--;
 8000d98:	69bb      	ldr	r3, [r7, #24]
 8000d9a:	3b01      	subs	r3, #1
 8000d9c:	61bb      	str	r3, [r7, #24]
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8000d9e:	69bb      	ldr	r3, [r7, #24]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d00a      	beq.n	8000dba <MFRC522_1_ToCard+0xee>
 8000da4:	7f3b      	ldrb	r3, [r7, #28]
 8000da6:	f003 0301 	and.w	r3, r3, #1
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d105      	bne.n	8000dba <MFRC522_1_ToCard+0xee>
 8000dae:	7f3a      	ldrb	r2, [r7, #28]
 8000db0:	7f7b      	ldrb	r3, [r7, #29]
 8000db2:	4013      	ands	r3, r2
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d0e9      	beq.n	8000d8e <MFRC522_1_ToCard+0xc2>

    ClearBitMask_1(BitFramingReg, 0x80);			//StartSend=0
 8000dba:	2180      	movs	r1, #128	@ 0x80
 8000dbc:	200d      	movs	r0, #13
 8000dbe:	f7ff ff24 	bl	8000c0a <ClearBitMask_1>
	read5 =  (Read_1_MFRC522(ErrorReg) & 0x1B);
 8000dc2:	2006      	movs	r0, #6
 8000dc4:	f7ff fede 	bl	8000b84 <Read_1_MFRC522>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	f003 031b 	and.w	r3, r3, #27
 8000dce:	75bb      	strb	r3, [r7, #22]
	
    if (i != 0)
 8000dd0:	69bb      	ldr	r3, [r7, #24]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d052      	beq.n	8000e7c <MFRC522_1_ToCard+0x1b0>
    {    
        if(!(Read_1_MFRC522(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
 8000dd6:	2006      	movs	r0, #6
 8000dd8:	f7ff fed4 	bl	8000b84 <Read_1_MFRC522>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	f003 031b 	and.w	r3, r3, #27
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d148      	bne.n	8000e78 <MFRC522_1_ToCard+0x1ac>
        {
            status = MI_OK;
 8000de6:	2300      	movs	r3, #0
 8000de8:	77fb      	strb	r3, [r7, #31]
            if (n & irqEn & 0x01)
 8000dea:	7f3a      	ldrb	r2, [r7, #28]
 8000dec:	7fbb      	ldrb	r3, [r7, #30]
 8000dee:	4013      	ands	r3, r2
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	f003 0301 	and.w	r3, r3, #1
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MFRC522_1_ToCard+0x132>
            {   
				status = MI_NOTAGERR;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	77fb      	strb	r3, [r7, #31]
			}

            if (command == PCD_TRANSCEIVE)
 8000dfe:	7bfb      	ldrb	r3, [r7, #15]
 8000e00:	2b0c      	cmp	r3, #12
 8000e02:	d13b      	bne.n	8000e7c <MFRC522_1_ToCard+0x1b0>
            {
               	n = Read_1_MFRC522(FIFOLevelReg);
 8000e04:	200a      	movs	r0, #10
 8000e06:	f7ff febd 	bl	8000b84 <Read_1_MFRC522>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	773b      	strb	r3, [r7, #28]
              	lastBits = Read_1_MFRC522(ControlReg) & 0x07;
 8000e0e:	200c      	movs	r0, #12
 8000e10:	f7ff feb8 	bl	8000b84 <Read_1_MFRC522>
 8000e14:	4603      	mov	r3, r0
 8000e16:	f003 0307 	and.w	r3, r3, #7
 8000e1a:	757b      	strb	r3, [r7, #21]
                if (lastBits)
 8000e1c:	7d7b      	ldrb	r3, [r7, #21]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d008      	beq.n	8000e34 <MFRC522_1_ToCard+0x168>
                {   
					*backLen = (n-1)*8 + lastBits;   
 8000e22:	7f3b      	ldrb	r3, [r7, #28]
 8000e24:	3b01      	subs	r3, #1
 8000e26:	00da      	lsls	r2, r3, #3
 8000e28:	7d7b      	ldrb	r3, [r7, #21]
 8000e2a:	4413      	add	r3, r2
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e30:	601a      	str	r2, [r3, #0]
 8000e32:	e004      	b.n	8000e3e <MFRC522_1_ToCard+0x172>
				}
                else
                {   
					*backLen = n*8;   
 8000e34:	7f3b      	ldrb	r3, [r7, #28]
 8000e36:	00db      	lsls	r3, r3, #3
 8000e38:	461a      	mov	r2, r3
 8000e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e3c:	601a      	str	r2, [r3, #0]
				}

                if (n == 0)
 8000e3e:	7f3b      	ldrb	r3, [r7, #28]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d101      	bne.n	8000e48 <MFRC522_1_ToCard+0x17c>
                {   
					n = 1;    
 8000e44:	2301      	movs	r3, #1
 8000e46:	773b      	strb	r3, [r7, #28]
				}
                if (n > MAX_LEN)
 8000e48:	7f3b      	ldrb	r3, [r7, #28]
 8000e4a:	2b10      	cmp	r3, #16
 8000e4c:	d901      	bls.n	8000e52 <MFRC522_1_ToCard+0x186>
                {   
					n = MAX_LEN;   
 8000e4e:	2310      	movs	r3, #16
 8000e50:	773b      	strb	r3, [r7, #28]
				}
				
                // Reading the received data in FIFO
                for (i=0; i<n; i++)
 8000e52:	2300      	movs	r3, #0
 8000e54:	61bb      	str	r3, [r7, #24]
 8000e56:	e00a      	b.n	8000e6e <MFRC522_1_ToCard+0x1a2>
                {   
					backData[i] = Read_1_MFRC522(FIFODataReg);
 8000e58:	687a      	ldr	r2, [r7, #4]
 8000e5a:	69bb      	ldr	r3, [r7, #24]
 8000e5c:	18d4      	adds	r4, r2, r3
 8000e5e:	2009      	movs	r0, #9
 8000e60:	f7ff fe90 	bl	8000b84 <Read_1_MFRC522>
 8000e64:	4603      	mov	r3, r0
 8000e66:	7023      	strb	r3, [r4, #0]
                for (i=0; i<n; i++)
 8000e68:	69bb      	ldr	r3, [r7, #24]
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	61bb      	str	r3, [r7, #24]
 8000e6e:	7f3b      	ldrb	r3, [r7, #28]
 8000e70:	69ba      	ldr	r2, [r7, #24]
 8000e72:	429a      	cmp	r2, r3
 8000e74:	d3f0      	bcc.n	8000e58 <MFRC522_1_ToCard+0x18c>
 8000e76:	e001      	b.n	8000e7c <MFRC522_1_ToCard+0x1b0>
				}
            }
        }
        else
        {   
			status = MI_ERR;  
 8000e78:	2302      	movs	r3, #2
 8000e7a:	77fb      	strb	r3, [r7, #31]
    }
	
    //SetBitMask_1(ControlReg,0x80);           //timer stops
    //Write_1_MFRC522(CommandReg, PCD_IDLE);

    return status;
 8000e7c:	7ffb      	ldrb	r3, [r7, #31]
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3724      	adds	r7, #36	@ 0x24
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd90      	pop	{r4, r7, pc}

08000e86 <MFRC522_1_Request>:
 *    0x0800 = Mifare_Pro(X)
 *    0x4403 = Mifare_DESFire
 * Return value: the successful return MI_OK
 */
uchar MFRC522_1_Request(uchar reqMode, uchar *TagType)
{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b086      	sub	sp, #24
 8000e8a:	af02      	add	r7, sp, #8
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	6039      	str	r1, [r7, #0]
 8000e90:	71fb      	strb	r3, [r7, #7]
	uchar status;  
	uint backBits;			 // The received data bits

	Write_1_MFRC522(BitFramingReg, 0x07);		//TxLastBists = BitFramingReg[2..0]
 8000e92:	2107      	movs	r1, #7
 8000e94:	200d      	movs	r0, #13
 8000e96:	f7ff fe4f 	bl	8000b38 <Write_1_MFRC522>
	
	TagType[0] = reqMode;
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	79fa      	ldrb	r2, [r7, #7]
 8000e9e:	701a      	strb	r2, [r3, #0]
	status = MFRC522_1_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8000ea0:	f107 0308 	add.w	r3, r7, #8
 8000ea4:	9300      	str	r3, [sp, #0]
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	6839      	ldr	r1, [r7, #0]
 8000eac:	200c      	movs	r0, #12
 8000eae:	f7ff ff0d 	bl	8000ccc <MFRC522_1_ToCard>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	73fb      	strb	r3, [r7, #15]

	if ((status != MI_OK) || (backBits != 0x10))
 8000eb6:	7bfb      	ldrb	r3, [r7, #15]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d102      	bne.n	8000ec2 <MFRC522_1_Request+0x3c>
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	2b10      	cmp	r3, #16
 8000ec0:	d001      	beq.n	8000ec6 <MFRC522_1_Request+0x40>
	{    
		status = MI_ERR;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	73fb      	strb	r3, [r7, #15]
	}
   
	return status;
 8000ec6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	3710      	adds	r7, #16
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <MFRC522_1_Anticoll>:
 * Description: Anti-collision detection, reading selected card serial number card
 * Input parameters: serNum - returns 4 bytes card serial number, the first 5 bytes for the checksum byte
 * Return value: the successful return MI_OK
 */
uchar MFRC522_1_Anticoll(uchar *serNum)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b086      	sub	sp, #24
 8000ed4:	af02      	add	r7, sp, #8
 8000ed6:	6078      	str	r0, [r7, #4]
    uchar status;
    uchar i;
	uchar serNumCheck=0;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	737b      	strb	r3, [r7, #13]
    uint unLen;
    
	Write_1_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 8000edc:	2100      	movs	r1, #0
 8000ede:	200d      	movs	r0, #13
 8000ee0:	f7ff fe2a 	bl	8000b38 <Write_1_MFRC522>
 
    serNum[0] = PICC_ANTICOLL;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2293      	movs	r2, #147	@ 0x93
 8000ee8:	701a      	strb	r2, [r3, #0]
    serNum[1] = 0x20;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	3301      	adds	r3, #1
 8000eee:	2220      	movs	r2, #32
 8000ef0:	701a      	strb	r2, [r3, #0]
    status = MFRC522_1_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8000ef2:	f107 0308 	add.w	r3, r7, #8
 8000ef6:	9300      	str	r3, [sp, #0]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2202      	movs	r2, #2
 8000efc:	6879      	ldr	r1, [r7, #4]
 8000efe:	200c      	movs	r0, #12
 8000f00:	f7ff fee4 	bl	8000ccc <MFRC522_1_ToCard>
 8000f04:	4603      	mov	r3, r0
 8000f06:	73fb      	strb	r3, [r7, #15]

    if (status == MI_OK)
 8000f08:	7bfb      	ldrb	r3, [r7, #15]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d118      	bne.n	8000f40 <MFRC522_1_Anticoll+0x70>
	{
    	 //Check card serial number
		for (i=0; i<4; i++)
 8000f0e:	2300      	movs	r3, #0
 8000f10:	73bb      	strb	r3, [r7, #14]
 8000f12:	e009      	b.n	8000f28 <MFRC522_1_Anticoll+0x58>
		{   
		 	serNumCheck ^= serNum[i];
 8000f14:	7bbb      	ldrb	r3, [r7, #14]
 8000f16:	687a      	ldr	r2, [r7, #4]
 8000f18:	4413      	add	r3, r2
 8000f1a:	781a      	ldrb	r2, [r3, #0]
 8000f1c:	7b7b      	ldrb	r3, [r7, #13]
 8000f1e:	4053      	eors	r3, r2
 8000f20:	737b      	strb	r3, [r7, #13]
		for (i=0; i<4; i++)
 8000f22:	7bbb      	ldrb	r3, [r7, #14]
 8000f24:	3301      	adds	r3, #1
 8000f26:	73bb      	strb	r3, [r7, #14]
 8000f28:	7bbb      	ldrb	r3, [r7, #14]
 8000f2a:	2b03      	cmp	r3, #3
 8000f2c:	d9f2      	bls.n	8000f14 <MFRC522_1_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i])
 8000f2e:	7bbb      	ldrb	r3, [r7, #14]
 8000f30:	687a      	ldr	r2, [r7, #4]
 8000f32:	4413      	add	r3, r2
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	7b7a      	ldrb	r2, [r7, #13]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	d001      	beq.n	8000f40 <MFRC522_1_Anticoll+0x70>
		{   
			status = MI_ERR;    
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	73fb      	strb	r3, [r7, #15]
		}
    }

    return status;
 8000f40:	7bfb      	ldrb	r3, [r7, #15]
} 
 8000f42:	4618      	mov	r0, r3
 8000f44:	3710      	adds	r7, #16
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <CalulateCRC_1>:
 * Description: CRC calculation with MF522
 * Input parameters: pIndata - To read the CRC data, len - the data length, pOutData - CRC calculation results
 * Return value: None
 */
void CalulateCRC_1(uchar *pIndata, uchar len, uchar *pOutData)
{
 8000f4a:	b590      	push	{r4, r7, lr}
 8000f4c:	b087      	sub	sp, #28
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	60f8      	str	r0, [r7, #12]
 8000f52:	460b      	mov	r3, r1
 8000f54:	607a      	str	r2, [r7, #4]
 8000f56:	72fb      	strb	r3, [r7, #11]
    uchar i, n;

    ClearBitMask_1(DivIrqReg, 0x04);			//CRCIrq = 0
 8000f58:	2104      	movs	r1, #4
 8000f5a:	2005      	movs	r0, #5
 8000f5c:	f7ff fe55 	bl	8000c0a <ClearBitMask_1>
    SetBitMask_1(FIFOLevelReg, 0x80);			//Clear the FIFO pointer
 8000f60:	2180      	movs	r1, #128	@ 0x80
 8000f62:	200a      	movs	r0, #10
 8000f64:	f7ff fe36 	bl	8000bd4 <SetBitMask_1>

    //Writing data to the FIFO
    for (i=0; i<len; i++)
 8000f68:	2300      	movs	r3, #0
 8000f6a:	75fb      	strb	r3, [r7, #23]
 8000f6c:	e00a      	b.n	8000f84 <CalulateCRC_1+0x3a>
    {   
		Write_1_MFRC522(FIFODataReg, *(pIndata+i));
 8000f6e:	7dfb      	ldrb	r3, [r7, #23]
 8000f70:	68fa      	ldr	r2, [r7, #12]
 8000f72:	4413      	add	r3, r2
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	4619      	mov	r1, r3
 8000f78:	2009      	movs	r0, #9
 8000f7a:	f7ff fddd 	bl	8000b38 <Write_1_MFRC522>
    for (i=0; i<len; i++)
 8000f7e:	7dfb      	ldrb	r3, [r7, #23]
 8000f80:	3301      	adds	r3, #1
 8000f82:	75fb      	strb	r3, [r7, #23]
 8000f84:	7dfa      	ldrb	r2, [r7, #23]
 8000f86:	7afb      	ldrb	r3, [r7, #11]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	d3f0      	bcc.n	8000f6e <CalulateCRC_1+0x24>
	}
    Write_1_MFRC522(CommandReg, PCD_CALCCRC);
 8000f8c:	2103      	movs	r1, #3
 8000f8e:	2001      	movs	r0, #1
 8000f90:	f7ff fdd2 	bl	8000b38 <Write_1_MFRC522>

    //Wait CRC calculation is complete
    i = 0xFF;
 8000f94:	23ff      	movs	r3, #255	@ 0xff
 8000f96:	75fb      	strb	r3, [r7, #23]
    do 
    {
        n = Read_1_MFRC522(DivIrqReg);
 8000f98:	2005      	movs	r0, #5
 8000f9a:	f7ff fdf3 	bl	8000b84 <Read_1_MFRC522>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	75bb      	strb	r3, [r7, #22]
        i--;
 8000fa2:	7dfb      	ldrb	r3, [r7, #23]
 8000fa4:	3b01      	subs	r3, #1
 8000fa6:	75fb      	strb	r3, [r7, #23]
    }
    while ((i!=0) && !(n&0x04));			//CRCIrq = 1
 8000fa8:	7dfb      	ldrb	r3, [r7, #23]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d004      	beq.n	8000fb8 <CalulateCRC_1+0x6e>
 8000fae:	7dbb      	ldrb	r3, [r7, #22]
 8000fb0:	f003 0304 	and.w	r3, r3, #4
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d0ef      	beq.n	8000f98 <CalulateCRC_1+0x4e>

    //Read CRC calculation result
    pOutData[0] = Read_1_MFRC522(CRCResultRegL);
 8000fb8:	2022      	movs	r0, #34	@ 0x22
 8000fba:	f7ff fde3 	bl	8000b84 <Read_1_MFRC522>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	701a      	strb	r2, [r3, #0]
    pOutData[1] = Read_1_MFRC522(CRCResultRegH);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	1c5c      	adds	r4, r3, #1
 8000fca:	2021      	movs	r0, #33	@ 0x21
 8000fcc:	f7ff fdda 	bl	8000b84 <Read_1_MFRC522>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	7023      	strb	r3, [r4, #0]
}
 8000fd4:	bf00      	nop
 8000fd6:	371c      	adds	r7, #28
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd90      	pop	{r4, r7, pc}

08000fdc <MFRC522_1_SelectTag>:
 * Description: election card, read the card memory capacity
 * Input parameters: serNum - Incoming card serial number
 * Return value: the successful return of card capacity
 */
uchar MFRC522_1_SelectTag(uchar *serNum)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b08a      	sub	sp, #40	@ 0x28
 8000fe0:	af02      	add	r7, sp, #8
 8000fe2:	6078      	str	r0, [r7, #4]
	uint recvBits;
	uchar buffer[9]; 

	//ClearBitMask_1(Status2Reg, 0x08);			//MFCrypto1On=0

    buffer[0] = PICC_SElECTTAG;
 8000fe4:	2393      	movs	r3, #147	@ 0x93
 8000fe6:	733b      	strb	r3, [r7, #12]
    buffer[1] = 0x70;
 8000fe8:	2370      	movs	r3, #112	@ 0x70
 8000fea:	737b      	strb	r3, [r7, #13]
    for (i=0; i<5; i++)
 8000fec:	2300      	movs	r3, #0
 8000fee:	77fb      	strb	r3, [r7, #31]
 8000ff0:	e00c      	b.n	800100c <MFRC522_1_SelectTag+0x30>
    {
    	buffer[i+2] = *(serNum+i);
 8000ff2:	7ffb      	ldrb	r3, [r7, #31]
 8000ff4:	687a      	ldr	r2, [r7, #4]
 8000ff6:	441a      	add	r2, r3
 8000ff8:	7ffb      	ldrb	r3, [r7, #31]
 8000ffa:	3302      	adds	r3, #2
 8000ffc:	7812      	ldrb	r2, [r2, #0]
 8000ffe:	3320      	adds	r3, #32
 8001000:	443b      	add	r3, r7
 8001002:	f803 2c14 	strb.w	r2, [r3, #-20]
    for (i=0; i<5; i++)
 8001006:	7ffb      	ldrb	r3, [r7, #31]
 8001008:	3301      	adds	r3, #1
 800100a:	77fb      	strb	r3, [r7, #31]
 800100c:	7ffb      	ldrb	r3, [r7, #31]
 800100e:	2b04      	cmp	r3, #4
 8001010:	d9ef      	bls.n	8000ff2 <MFRC522_1_SelectTag+0x16>
    }
	CalulateCRC_1(buffer, 7, &buffer[7]);
 8001012:	f107 030c 	add.w	r3, r7, #12
 8001016:	1dda      	adds	r2, r3, #7
 8001018:	f107 030c 	add.w	r3, r7, #12
 800101c:	2107      	movs	r1, #7
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff ff93 	bl	8000f4a <CalulateCRC_1>
    status = MFRC522_1_ToCard(PCD_TRANSCEIVE, buffer, 9, buffer, &recvBits);
 8001024:	f107 020c 	add.w	r2, r7, #12
 8001028:	f107 010c 	add.w	r1, r7, #12
 800102c:	f107 0318 	add.w	r3, r7, #24
 8001030:	9300      	str	r3, [sp, #0]
 8001032:	4613      	mov	r3, r2
 8001034:	2209      	movs	r2, #9
 8001036:	200c      	movs	r0, #12
 8001038:	f7ff fe48 	bl	8000ccc <MFRC522_1_ToCard>
 800103c:	4603      	mov	r3, r0
 800103e:	777b      	strb	r3, [r7, #29]
    
    if ((status == MI_OK) && (recvBits == 0x18))
 8001040:	7f7b      	ldrb	r3, [r7, #29]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d105      	bne.n	8001052 <MFRC522_1_SelectTag+0x76>
 8001046:	69bb      	ldr	r3, [r7, #24]
 8001048:	2b18      	cmp	r3, #24
 800104a:	d102      	bne.n	8001052 <MFRC522_1_SelectTag+0x76>
    {   
		size = buffer[0]; 
 800104c:	7b3b      	ldrb	r3, [r7, #12]
 800104e:	77bb      	strb	r3, [r7, #30]
 8001050:	e001      	b.n	8001056 <MFRC522_1_SelectTag+0x7a>
	}
    else
    {   
		size = 0;    
 8001052:	2300      	movs	r3, #0
 8001054:	77bb      	strb	r3, [r7, #30]
	}

    return size;
 8001056:	7fbb      	ldrb	r3, [r7, #30]
}
 8001058:	4618      	mov	r0, r3
 800105a:	3720      	adds	r7, #32
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}

08001060 <MFRC522_1_Halt>:
 * Description: Command card into hibernation
 * Input: None
 * Return value: None
 */
void MFRC522_1_Halt(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af02      	add	r7, sp, #8
	uint unLen;
	uchar buff[4]; 

	buff[0] = PICC_HALT;
 8001066:	2350      	movs	r3, #80	@ 0x50
 8001068:	703b      	strb	r3, [r7, #0]
	buff[1] = 0;
 800106a:	2300      	movs	r3, #0
 800106c:	707b      	strb	r3, [r7, #1]
	CalulateCRC_1(buff, 2, &buff[2]);
 800106e:	463b      	mov	r3, r7
 8001070:	1c9a      	adds	r2, r3, #2
 8001072:	463b      	mov	r3, r7
 8001074:	2102      	movs	r1, #2
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff ff67 	bl	8000f4a <CalulateCRC_1>
 
	MFRC522_1_ToCard(PCD_TRANSCEIVE, buff, 4, buff,&unLen);
 800107c:	463a      	mov	r2, r7
 800107e:	4639      	mov	r1, r7
 8001080:	1d3b      	adds	r3, r7, #4
 8001082:	9300      	str	r3, [sp, #0]
 8001084:	4613      	mov	r3, r2
 8001086:	2204      	movs	r2, #4
 8001088:	200c      	movs	r0, #12
 800108a:	f7ff fe1f 	bl	8000ccc <MFRC522_1_ToCard>
}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <MFRC522_1_StopCrypto1>:

void MFRC522_1_StopCrypto1(void)
{
 8001096:	b580      	push	{r7, lr}
 8001098:	af00      	add	r7, sp, #0
    Write_1_MFRC522(Status2Reg, 0x00);  // Clear MFCrypto1On bit (disable encryption)
 800109a:	2100      	movs	r1, #0
 800109c:	2008      	movs	r0, #8
 800109e:	f7ff fd4b 	bl	8000b38 <Write_1_MFRC522>
    Write_1_MFRC522(CommandReg, PCD_IDLE);  // Ensure the MFRC522 is in IDLE mode
 80010a2:	2100      	movs	r1, #0
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff fd47 	bl	8000b38 <Write_1_MFRC522>
}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}
	...

080010b0 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 80010ba:	4a38      	ldr	r2, [pc, #224]	@ (800119c <HD44780_Init+0xec>)
 80010bc:	79fb      	ldrb	r3, [r7, #7]
 80010be:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 80010c0:	4b37      	ldr	r3, [pc, #220]	@ (80011a0 <HD44780_Init+0xf0>)
 80010c2:	2208      	movs	r2, #8
 80010c4:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80010c6:	4b37      	ldr	r3, [pc, #220]	@ (80011a4 <HD44780_Init+0xf4>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 80010cc:	4b33      	ldr	r3, [pc, #204]	@ (800119c <HD44780_Init+0xec>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d907      	bls.n	80010e4 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 80010d4:	4b33      	ldr	r3, [pc, #204]	@ (80011a4 <HD44780_Init+0xf4>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	f043 0308 	orr.w	r3, r3, #8
 80010dc:	b2da      	uxtb	r2, r3
 80010de:	4b31      	ldr	r3, [pc, #196]	@ (80011a4 <HD44780_Init+0xf4>)
 80010e0:	701a      	strb	r2, [r3, #0]
 80010e2:	e006      	b.n	80010f2 <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 80010e4:	4b2f      	ldr	r3, [pc, #188]	@ (80011a4 <HD44780_Init+0xf4>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	f043 0304 	orr.w	r3, r3, #4
 80010ec:	b2da      	uxtb	r2, r3
 80010ee:	4b2d      	ldr	r3, [pc, #180]	@ (80011a4 <HD44780_Init+0xf4>)
 80010f0:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 80010f2:	f000 f985 	bl	8001400 <DelayInit>
  HAL_Delay(50);
 80010f6:	2032      	movs	r0, #50	@ 0x32
 80010f8:	f002 fb06 	bl	8003708 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 80010fc:	4b28      	ldr	r3, [pc, #160]	@ (80011a0 <HD44780_Init+0xf0>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	4618      	mov	r0, r3
 8001102:	f000 f943 	bl	800138c <ExpanderWrite>
  HAL_Delay(1000);
 8001106:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800110a:	f002 fafd 	bl	8003708 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 800110e:	2030      	movs	r0, #48	@ 0x30
 8001110:	f000 f92b 	bl	800136a <Write4Bits>
  DelayUS(4500);
 8001114:	f241 1094 	movw	r0, #4500	@ 0x1194
 8001118:	f000 f99c 	bl	8001454 <DelayUS>

  Write4Bits(0x03 << 4);
 800111c:	2030      	movs	r0, #48	@ 0x30
 800111e:	f000 f924 	bl	800136a <Write4Bits>
  DelayUS(4500);
 8001122:	f241 1094 	movw	r0, #4500	@ 0x1194
 8001126:	f000 f995 	bl	8001454 <DelayUS>

  Write4Bits(0x03 << 4);
 800112a:	2030      	movs	r0, #48	@ 0x30
 800112c:	f000 f91d 	bl	800136a <Write4Bits>
  DelayUS(4500);
 8001130:	f241 1094 	movw	r0, #4500	@ 0x1194
 8001134:	f000 f98e 	bl	8001454 <DelayUS>

  Write4Bits(0x02 << 4);
 8001138:	2020      	movs	r0, #32
 800113a:	f000 f916 	bl	800136a <Write4Bits>
  DelayUS(100);
 800113e:	2064      	movs	r0, #100	@ 0x64
 8001140:	f000 f988 	bl	8001454 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8001144:	4b17      	ldr	r3, [pc, #92]	@ (80011a4 <HD44780_Init+0xf4>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	f043 0320 	orr.w	r3, r3, #32
 800114c:	b2db      	uxtb	r3, r3
 800114e:	4618      	mov	r0, r3
 8001150:	f000 f8ce 	bl	80012f0 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8001154:	4b14      	ldr	r3, [pc, #80]	@ (80011a8 <HD44780_Init+0xf8>)
 8001156:	2204      	movs	r2, #4
 8001158:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 800115a:	f000 f875 	bl	8001248 <HD44780_Display>
  HD44780_Clear();
 800115e:	f000 f82b 	bl	80011b8 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8001162:	4b12      	ldr	r3, [pc, #72]	@ (80011ac <HD44780_Init+0xfc>)
 8001164:	2202      	movs	r2, #2
 8001166:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8001168:	4b10      	ldr	r3, [pc, #64]	@ (80011ac <HD44780_Init+0xfc>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	f043 0304 	orr.w	r3, r3, #4
 8001170:	b2db      	uxtb	r3, r3
 8001172:	4618      	mov	r0, r3
 8001174:	f000 f8bc 	bl	80012f0 <SendCommand>
  DelayUS(4500);
 8001178:	f241 1094 	movw	r0, #4500	@ 0x1194
 800117c:	f000 f96a 	bl	8001454 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8001180:	490b      	ldr	r1, [pc, #44]	@ (80011b0 <HD44780_Init+0x100>)
 8001182:	2000      	movs	r0, #0
 8001184:	f000 f876 	bl	8001274 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8001188:	490a      	ldr	r1, [pc, #40]	@ (80011b4 <HD44780_Init+0x104>)
 800118a:	2001      	movs	r0, #1
 800118c:	f000 f872 	bl	8001274 <HD44780_CreateSpecialChar>

  HD44780_Home();
 8001190:	f000 f81d 	bl	80011ce <HD44780_Home>
}
 8001194:	bf00      	nop
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	200000ef 	.word	0x200000ef
 80011a0:	200000f0 	.word	0x200000f0
 80011a4:	200000ec 	.word	0x200000ec
 80011a8:	200000ed 	.word	0x200000ed
 80011ac:	200000ee 	.word	0x200000ee
 80011b0:	20000000 	.word	0x20000000
 80011b4:	20000008 	.word	0x20000008

080011b8 <HD44780_Clear>:

void HD44780_Clear()
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 80011bc:	2001      	movs	r0, #1
 80011be:	f000 f897 	bl	80012f0 <SendCommand>
  DelayUS(2000);
 80011c2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80011c6:	f000 f945 	bl	8001454 <DelayUS>
}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}

080011ce <HD44780_Home>:

void HD44780_Home()
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 80011d2:	2002      	movs	r0, #2
 80011d4:	f000 f88c 	bl	80012f0 <SendCommand>
  DelayUS(2000);
 80011d8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80011dc:	f000 f93a 	bl	8001454 <DelayUS>
}
 80011e0:	bf00      	nop
 80011e2:	bd80      	pop	{r7, pc}

080011e4 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 80011e4:	b590      	push	{r4, r7, lr}
 80011e6:	b087      	sub	sp, #28
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	460a      	mov	r2, r1
 80011ee:	71fb      	strb	r3, [r7, #7]
 80011f0:	4613      	mov	r3, r2
 80011f2:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 80011f4:	4b12      	ldr	r3, [pc, #72]	@ (8001240 <HD44780_SetCursor+0x5c>)
 80011f6:	f107 0408 	add.w	r4, r7, #8
 80011fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8001200:	4b10      	ldr	r3, [pc, #64]	@ (8001244 <HD44780_SetCursor+0x60>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	79ba      	ldrb	r2, [r7, #6]
 8001206:	429a      	cmp	r2, r3
 8001208:	d303      	bcc.n	8001212 <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 800120a:	4b0e      	ldr	r3, [pc, #56]	@ (8001244 <HD44780_SetCursor+0x60>)
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	3b01      	subs	r3, #1
 8001210:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8001212:	79bb      	ldrb	r3, [r7, #6]
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	3318      	adds	r3, #24
 8001218:	443b      	add	r3, r7
 800121a:	f853 3c10 	ldr.w	r3, [r3, #-16]
 800121e:	b2da      	uxtb	r2, r3
 8001220:	79fb      	ldrb	r3, [r7, #7]
 8001222:	4413      	add	r3, r2
 8001224:	b2db      	uxtb	r3, r3
 8001226:	b25b      	sxtb	r3, r3
 8001228:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800122c:	b25b      	sxtb	r3, r3
 800122e:	b2db      	uxtb	r3, r3
 8001230:	4618      	mov	r0, r3
 8001232:	f000 f85d 	bl	80012f0 <SendCommand>
}
 8001236:	bf00      	nop
 8001238:	371c      	adds	r7, #28
 800123a:	46bd      	mov	sp, r7
 800123c:	bd90      	pop	{r4, r7, pc}
 800123e:	bf00      	nop
 8001240:	08007f38 	.word	0x08007f38
 8001244:	200000ef 	.word	0x200000ef

08001248 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 800124c:	4b08      	ldr	r3, [pc, #32]	@ (8001270 <HD44780_Display+0x28>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	f043 0304 	orr.w	r3, r3, #4
 8001254:	b2da      	uxtb	r2, r3
 8001256:	4b06      	ldr	r3, [pc, #24]	@ (8001270 <HD44780_Display+0x28>)
 8001258:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 800125a:	4b05      	ldr	r3, [pc, #20]	@ (8001270 <HD44780_Display+0x28>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	f043 0308 	orr.w	r3, r3, #8
 8001262:	b2db      	uxtb	r3, r3
 8001264:	4618      	mov	r0, r3
 8001266:	f000 f843 	bl	80012f0 <SendCommand>
}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	200000ed 	.word	0x200000ed

08001274 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	4603      	mov	r3, r0
 800127c:	6039      	str	r1, [r7, #0]
 800127e:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8001280:	79fb      	ldrb	r3, [r7, #7]
 8001282:	f003 0307 	and.w	r3, r3, #7
 8001286:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8001288:	79fb      	ldrb	r3, [r7, #7]
 800128a:	00db      	lsls	r3, r3, #3
 800128c:	b25b      	sxtb	r3, r3
 800128e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001292:	b25b      	sxtb	r3, r3
 8001294:	b2db      	uxtb	r3, r3
 8001296:	4618      	mov	r0, r3
 8001298:	f000 f82a 	bl	80012f0 <SendCommand>
  for (int i=0; i<8; i++)
 800129c:	2300      	movs	r3, #0
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	e009      	b.n	80012b6 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	683a      	ldr	r2, [r7, #0]
 80012a6:	4413      	add	r3, r2
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f000 f82e 	bl	800130c <SendChar>
  for (int i=0; i<8; i++)
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	3301      	adds	r3, #1
 80012b4:	60fb      	str	r3, [r7, #12]
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	2b07      	cmp	r3, #7
 80012ba:	ddf2      	ble.n	80012a2 <HD44780_CreateSpecialChar+0x2e>
  }
}
 80012bc:	bf00      	nop
 80012be:	bf00      	nop
 80012c0:	3710      	adds	r7, #16
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b082      	sub	sp, #8
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 80012ce:	e006      	b.n	80012de <HD44780_PrintStr+0x18>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	1c5a      	adds	r2, r3, #1
 80012d4:	607a      	str	r2, [r7, #4]
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	4618      	mov	r0, r3
 80012da:	f000 f817 	bl	800130c <SendChar>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d1f4      	bne.n	80012d0 <HD44780_PrintStr+0xa>
}
 80012e6:	bf00      	nop
 80012e8:	bf00      	nop
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 80012fa:	79fb      	ldrb	r3, [r7, #7]
 80012fc:	2100      	movs	r1, #0
 80012fe:	4618      	mov	r0, r3
 8001300:	f000 f812 	bl	8001328 <Send>
}
 8001304:	bf00      	nop
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}

0800130c <SendChar>:

static void SendChar(uint8_t ch)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8001316:	79fb      	ldrb	r3, [r7, #7]
 8001318:	2101      	movs	r1, #1
 800131a:	4618      	mov	r0, r3
 800131c:	f000 f804 	bl	8001328 <Send>
}
 8001320:	bf00      	nop
 8001322:	3708      	adds	r7, #8
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}

08001328 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	460a      	mov	r2, r1
 8001332:	71fb      	strb	r3, [r7, #7]
 8001334:	4613      	mov	r3, r2
 8001336:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8001338:	79fb      	ldrb	r3, [r7, #7]
 800133a:	f023 030f 	bic.w	r3, r3, #15
 800133e:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8001340:	79fb      	ldrb	r3, [r7, #7]
 8001342:	011b      	lsls	r3, r3, #4
 8001344:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8001346:	7bfa      	ldrb	r2, [r7, #15]
 8001348:	79bb      	ldrb	r3, [r7, #6]
 800134a:	4313      	orrs	r3, r2
 800134c:	b2db      	uxtb	r3, r3
 800134e:	4618      	mov	r0, r3
 8001350:	f000 f80b 	bl	800136a <Write4Bits>
  Write4Bits((lownib)|mode);
 8001354:	7bba      	ldrb	r2, [r7, #14]
 8001356:	79bb      	ldrb	r3, [r7, #6]
 8001358:	4313      	orrs	r3, r2
 800135a:	b2db      	uxtb	r3, r3
 800135c:	4618      	mov	r0, r3
 800135e:	f000 f804 	bl	800136a <Write4Bits>
}
 8001362:	bf00      	nop
 8001364:	3710      	adds	r7, #16
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 800136a:	b580      	push	{r7, lr}
 800136c:	b082      	sub	sp, #8
 800136e:	af00      	add	r7, sp, #0
 8001370:	4603      	mov	r3, r0
 8001372:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8001374:	79fb      	ldrb	r3, [r7, #7]
 8001376:	4618      	mov	r0, r3
 8001378:	f000 f808 	bl	800138c <ExpanderWrite>
  PulseEnable(value);
 800137c:	79fb      	ldrb	r3, [r7, #7]
 800137e:	4618      	mov	r0, r3
 8001380:	f000 f820 	bl	80013c4 <PulseEnable>
}
 8001384:	bf00      	nop
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}

0800138c <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b086      	sub	sp, #24
 8001390:	af02      	add	r7, sp, #8
 8001392:	4603      	mov	r3, r0
 8001394:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8001396:	4b09      	ldr	r3, [pc, #36]	@ (80013bc <ExpanderWrite+0x30>)
 8001398:	781a      	ldrb	r2, [r3, #0]
 800139a:	79fb      	ldrb	r3, [r7, #7]
 800139c:	4313      	orrs	r3, r2
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c2, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 80013a2:	f107 020f 	add.w	r2, r7, #15
 80013a6:	230a      	movs	r3, #10
 80013a8:	9300      	str	r3, [sp, #0]
 80013aa:	2301      	movs	r3, #1
 80013ac:	214e      	movs	r1, #78	@ 0x4e
 80013ae:	4804      	ldr	r0, [pc, #16]	@ (80013c0 <ExpanderWrite+0x34>)
 80013b0:	f002 fde0 	bl	8003f74 <HAL_I2C_Master_Transmit>
}
 80013b4:	bf00      	nop
 80013b6:	3710      	adds	r7, #16
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	200000f0 	.word	0x200000f0
 80013c0:	200000f4 	.word	0x200000f4

080013c4 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	4603      	mov	r3, r0
 80013cc:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 80013ce:	79fb      	ldrb	r3, [r7, #7]
 80013d0:	f043 0304 	orr.w	r3, r3, #4
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff ffd8 	bl	800138c <ExpanderWrite>
  DelayUS(20);
 80013dc:	2014      	movs	r0, #20
 80013de:	f000 f839 	bl	8001454 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 80013e2:	79fb      	ldrb	r3, [r7, #7]
 80013e4:	f023 0304 	bic.w	r3, r3, #4
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff ffce 	bl	800138c <ExpanderWrite>
  DelayUS(20);
 80013f0:	2014      	movs	r0, #20
 80013f2:	f000 f82f 	bl	8001454 <DelayUS>
}
 80013f6:	bf00      	nop
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
	...

08001400 <DelayInit>:

static void DelayInit(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8001404:	4b11      	ldr	r3, [pc, #68]	@ (800144c <DelayInit+0x4c>)
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	4a10      	ldr	r2, [pc, #64]	@ (800144c <DelayInit+0x4c>)
 800140a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800140e:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8001410:	4b0e      	ldr	r3, [pc, #56]	@ (800144c <DelayInit+0x4c>)
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	4a0d      	ldr	r2, [pc, #52]	@ (800144c <DelayInit+0x4c>)
 8001416:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800141a:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 800141c:	4b0c      	ldr	r3, [pc, #48]	@ (8001450 <DelayInit+0x50>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a0b      	ldr	r2, [pc, #44]	@ (8001450 <DelayInit+0x50>)
 8001422:	f023 0301 	bic.w	r3, r3, #1
 8001426:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001428:	4b09      	ldr	r3, [pc, #36]	@ (8001450 <DelayInit+0x50>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a08      	ldr	r2, [pc, #32]	@ (8001450 <DelayInit+0x50>)
 800142e:	f043 0301 	orr.w	r3, r3, #1
 8001432:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8001434:	4b06      	ldr	r3, [pc, #24]	@ (8001450 <DelayInit+0x50>)
 8001436:	2200      	movs	r2, #0
 8001438:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 800143a:	bf00      	nop
  __ASM volatile ("NOP");
 800143c:	bf00      	nop
  __ASM volatile ("NOP");
 800143e:	bf00      	nop
}
 8001440:	bf00      	nop
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	e000edf0 	.word	0xe000edf0
 8001450:	e0001000 	.word	0xe0001000

08001454 <DelayUS>:

static void DelayUS(uint32_t us) {
 8001454:	b480      	push	{r7}
 8001456:	b087      	sub	sp, #28
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 800145c:	4b0e      	ldr	r3, [pc, #56]	@ (8001498 <DelayUS+0x44>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a0e      	ldr	r2, [pc, #56]	@ (800149c <DelayUS+0x48>)
 8001462:	fba2 2303 	umull	r2, r3, r2, r3
 8001466:	0c9a      	lsrs	r2, r3, #18
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	fb02 f303 	mul.w	r3, r2, r3
 800146e:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8001470:	4b0b      	ldr	r3, [pc, #44]	@ (80014a0 <DelayUS+0x4c>)
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8001476:	4b0a      	ldr	r3, [pc, #40]	@ (80014a0 <DelayUS+0x4c>)
 8001478:	685a      	ldr	r2, [r3, #4]
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	697a      	ldr	r2, [r7, #20]
 8001484:	429a      	cmp	r2, r3
 8001486:	d8f6      	bhi.n	8001476 <DelayUS+0x22>
}
 8001488:	bf00      	nop
 800148a:	bf00      	nop
 800148c:	371c      	adds	r7, #28
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	20000068 	.word	0x20000068
 800149c:	431bde83 	.word	0x431bde83
 80014a0:	e0001000 	.word	0xe0001000

080014a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b08e      	sub	sp, #56	@ 0x38
 80014a8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014aa:	f002 f8bb 	bl	8003624 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014ae:	f000 fcd7 	bl	8001e60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014b2:	f000 fe63 	bl	800217c <MX_GPIO_Init>
  MX_SPI1_Init();
 80014b6:	f000 fd6b 	bl	8001f90 <MX_SPI1_Init>
  MX_TIM2_Init();
 80014ba:	f000 fd9f 	bl	8001ffc <MX_TIM2_Init>
  MX_I2C2_Init();
 80014be:	f000 fd39 	bl	8001f34 <MX_I2C2_Init>
  MX_USART2_UART_Init();
 80014c2:	f000 fe31 	bl	8002128 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */


  MFRC522_1_Init();
 80014c6:	f7ff fbd3 	bl	8000c70 <MFRC522_1_Init>
  MFRC522_2_Init();
 80014ca:	f7ff f90b 	bl	80006e4 <MFRC522_2_Init>

  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);
 80014ce:	2100      	movs	r1, #0
 80014d0:	488f      	ldr	r0, [pc, #572]	@ (8001710 <main+0x26c>)
 80014d2:	f004 f8f7 	bl	80056c4 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_2);
 80014d6:	2104      	movs	r1, #4
 80014d8:	488d      	ldr	r0, [pc, #564]	@ (8001710 <main+0x26c>)
 80014da:	f004 f8f3 	bl	80056c4 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_3);
 80014de:	2108      	movs	r1, #8
 80014e0:	488b      	ldr	r0, [pc, #556]	@ (8001710 <main+0x26c>)
 80014e2:	f004 f8ef 	bl	80056c4 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_4);
 80014e6:	210c      	movs	r1, #12
 80014e8:	4889      	ldr	r0, [pc, #548]	@ (8001710 <main+0x26c>)
 80014ea:	f004 f8eb 	bl	80056c4 <HAL_TIM_PWM_Start_IT>

  HD44780_Init(2);
 80014ee:	2002      	movs	r0, #2
 80014f0:	f7ff fdde 	bl	80010b0 <HD44780_Init>
  HD44780_Clear();
 80014f4:	f7ff fe60 	bl	80011b8 <HD44780_Clear>
  HD44780_SetCursor(0,0);
 80014f8:	2100      	movs	r1, #0
 80014fa:	2000      	movs	r0, #0
 80014fc:	f7ff fe72 	bl	80011e4 <HD44780_SetCursor>
  HD44780_PrintStr("HELLO");
 8001500:	4884      	ldr	r0, [pc, #528]	@ (8001714 <main+0x270>)
 8001502:	f7ff fee0 	bl	80012c6 <HD44780_PrintStr>
  HD44780_SetCursor(6,0);
 8001506:	2100      	movs	r1, #0
 8001508:	2006      	movs	r0, #6
 800150a:	f7ff fe6b 	bl	80011e4 <HD44780_SetCursor>
  HD44780_PrintStr("WORLD");
 800150e:	4882      	ldr	r0, [pc, #520]	@ (8001718 <main+0x274>)
 8001510:	f7ff fed9 	bl	80012c6 <HD44780_PrintStr>
  HAL_Delay(2000);
 8001514:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001518:	f002 f8f6 	bl	8003708 <HAL_Delay>
  HD44780_Clear();
 800151c:	f7ff fe4c 	bl	80011b8 <HD44780_Clear>
  HD44780_SetCursor(0,0);
 8001520:	2100      	movs	r1, #0
 8001522:	2000      	movs	r0, #0
 8001524:	f7ff fe5e 	bl	80011e4 <HD44780_SetCursor>
  HD44780_PrintStr("Welcome to ");
 8001528:	487c      	ldr	r0, [pc, #496]	@ (800171c <main+0x278>)
 800152a:	f7ff fecc 	bl	80012c6 <HD44780_PrintStr>
  HD44780_SetCursor(0,1);
 800152e:	2101      	movs	r1, #1
 8001530:	2000      	movs	r0, #0
 8001532:	f7ff fe57 	bl	80011e4 <HD44780_SetCursor>
  HD44780_PrintStr("Smart IOTmailbox");
 8001536:	487a      	ldr	r0, [pc, #488]	@ (8001720 <main+0x27c>)
 8001538:	f7ff fec5 	bl	80012c6 <HD44780_PrintStr>
  HAL_Delay(5000);
 800153c:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001540:	f002 f8e2 	bl	8003708 <HAL_Delay>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		 char key = scanKeys();
 8001544:	f000 fefa 	bl	800233c <scanKeys>
 8001548:	4603      	mov	r3, r0
 800154a:	71fb      	strb	r3, [r7, #7]
		 if(key)
 800154c:	79fb      	ldrb	r3, [r7, #7]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d003      	beq.n	800155a <main+0xb6>
		 {
			 HandleInput(key);
 8001552:	79fb      	ldrb	r3, [r7, #7]
 8001554:	4618      	mov	r0, r3
 8001556:	f001 fa8f 	bl	8002a78 <HandleInput>
		 }


	  //Scan from reader 1 for post mails
	  	statusRDR1 = readtagsFromRDR1();
 800155a:	f000 ffad 	bl	80024b8 <readtagsFromRDR1>
 800155e:	4603      	mov	r3, r0
 8001560:	71bb      	strb	r3, [r7, #6]
	  	//IF valid read then enter
	  	if(! statusRDR1)
 8001562:	79bb      	ldrb	r3, [r7, #6]
 8001564:	2b00      	cmp	r3, #0
 8001566:	f040 8253 	bne.w	8001a10 <main+0x56c>
	  	{
	  		userValidmail = checkValidUser(sNum, user1, user2, user3, user4, user5, 5);
 800156a:	2305      	movs	r3, #5
 800156c:	9302      	str	r3, [sp, #8]
 800156e:	4b6d      	ldr	r3, [pc, #436]	@ (8001724 <main+0x280>)
 8001570:	9301      	str	r3, [sp, #4]
 8001572:	4b6d      	ldr	r3, [pc, #436]	@ (8001728 <main+0x284>)
 8001574:	9300      	str	r3, [sp, #0]
 8001576:	4b6d      	ldr	r3, [pc, #436]	@ (800172c <main+0x288>)
 8001578:	4a6d      	ldr	r2, [pc, #436]	@ (8001730 <main+0x28c>)
 800157a:	496e      	ldr	r1, [pc, #440]	@ (8001734 <main+0x290>)
 800157c:	486e      	ldr	r0, [pc, #440]	@ (8001738 <main+0x294>)
 800157e:	f001 f857 	bl	8002630 <checkValidUser>
 8001582:	4603      	mov	r3, r0
 8001584:	717b      	strb	r3, [r7, #5]
	  		if(userValidmail)
 8001586:	797b      	ldrb	r3, [r7, #5]
 8001588:	2b00      	cmp	r3, #0
 800158a:	f000 8235 	beq.w	80019f8 <main+0x554>
	  		{
	  			//user 1 is assigned two mails
				compareFlag =  compareIntArrays(sNum, user1, 5);
 800158e:	2205      	movs	r2, #5
 8001590:	4968      	ldr	r1, [pc, #416]	@ (8001734 <main+0x290>)
 8001592:	4869      	ldr	r0, [pc, #420]	@ (8001738 <main+0x294>)
 8001594:	f001 f80c 	bl	80025b0 <compareIntArrays>
 8001598:	4603      	mov	r3, r0
 800159a:	713b      	strb	r3, [r7, #4]
				compareFlag2 =  compareIntArrays(sNum, user4, 5);
 800159c:	2205      	movs	r2, #5
 800159e:	4962      	ldr	r1, [pc, #392]	@ (8001728 <main+0x284>)
 80015a0:	4865      	ldr	r0, [pc, #404]	@ (8001738 <main+0x294>)
 80015a2:	f001 f805 	bl	80025b0 <compareIntArrays>
 80015a6:	4603      	mov	r3, r0
 80015a8:	70fb      	strb	r3, [r7, #3]
				//check how many mails user 1 has
				if(compareFlag || compareFlag2 )
 80015aa:	793b      	ldrb	r3, [r7, #4]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d103      	bne.n	80015b8 <main+0x114>
 80015b0:	78fb      	ldrb	r3, [r7, #3]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	f000 8111 	beq.w	80017da <main+0x336>
				{
					user1Info.mailCount++;
 80015b8:	4b60      	ldr	r3, [pc, #384]	@ (800173c <main+0x298>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	3301      	adds	r3, #1
 80015be:	b2da      	uxtb	r2, r3
 80015c0:	4b5e      	ldr	r3, [pc, #376]	@ (800173c <main+0x298>)
 80015c2:	701a      	strb	r2, [r3, #0]
					if(user1Info.mailFlag != TRUE)
 80015c4:	4b5d      	ldr	r3, [pc, #372]	@ (800173c <main+0x298>)
 80015c6:	789b      	ldrb	r3, [r3, #2]
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d002      	beq.n	80015d2 <main+0x12e>
					{
						user1Info.mailFlag = TRUE;
 80015cc:	4b5b      	ldr	r3, [pc, #364]	@ (800173c <main+0x298>)
 80015ce:	2201      	movs	r2, #1
 80015d0:	709a      	strb	r2, [r3, #2]
					}

					//If has one mail
					if(user1Info.mailCount == 1 )
 80015d2:	4b5a      	ldr	r3, [pc, #360]	@ (800173c <main+0x298>)
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d163      	bne.n	80016a2 <main+0x1fe>
					{
						 //sorting flap
						__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 1100);
 80015da:	4b4d      	ldr	r3, [pc, #308]	@ (8001710 <main+0x26c>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f240 424c 	movw	r2, #1100	@ 0x44c
 80015e2:	639a      	str	r2, [r3, #56]	@ 0x38
						HAL_Delay(2000);
 80015e4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80015e8:	f002 f88e 	bl	8003708 <HAL_Delay>
						//top flap
						__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 500);
 80015ec:	4b48      	ldr	r3, [pc, #288]	@ (8001710 <main+0x26c>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80015f4:	635a      	str	r2, [r3, #52]	@ 0x34
						HAL_Delay(1000);
 80015f6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80015fa:	f002 f885 	bl	8003708 <HAL_Delay>

						//re-allign flap to initial position
						__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1500);
 80015fe:	4b44      	ldr	r3, [pc, #272]	@ (8001710 <main+0x26c>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001606:	635a      	str	r2, [r3, #52]	@ 0x34
						HAL_Delay(1000);
 8001608:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800160c:	f002 f87c 	bl	8003708 <HAL_Delay>
						__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 1500);
 8001610:	4b3f      	ldr	r3, [pc, #252]	@ (8001710 <main+0x26c>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001618:	639a      	str	r2, [r3, #56]	@ 0x38

						newNotificationlcd("User 1 got", "a new mail", 2000);
 800161a:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800161e:	4948      	ldr	r1, [pc, #288]	@ (8001740 <main+0x29c>)
 8001620:	4848      	ldr	r0, [pc, #288]	@ (8001744 <main+0x2a0>)
 8001622:	f001 f871 	bl	8002708 <newNotificationlcd>
						generate_password(genPassword1);
 8001626:	4848      	ldr	r0, [pc, #288]	@ (8001748 <main+0x2a4>)
 8001628:	f001 fd3a 	bl	80030a0 <generate_password>
						newNotificationlcd(genPassword1, " ", 1000);
 800162c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001630:	4946      	ldr	r1, [pc, #280]	@ (800174c <main+0x2a8>)
 8001632:	4845      	ldr	r0, [pc, #276]	@ (8001748 <main+0x2a4>)
 8001634:	f001 f868 	bl	8002708 <newNotificationlcd>

						for(int i=0; i<30;i++)
 8001638:	2300      	movs	r3, #0
 800163a:	627b      	str	r3, [r7, #36]	@ 0x24
 800163c:	e009      	b.n	8001652 <main+0x1ae>
						{
							HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 800163e:	2140      	movs	r1, #64	@ 0x40
 8001640:	4843      	ldr	r0, [pc, #268]	@ (8001750 <main+0x2ac>)
 8001642:	f002 fb38 	bl	8003cb6 <HAL_GPIO_TogglePin>
							HAL_Delay(100); // 10ms delay
 8001646:	2064      	movs	r0, #100	@ 0x64
 8001648:	f002 f85e 	bl	8003708 <HAL_Delay>
						for(int i=0; i<30;i++)
 800164c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800164e:	3301      	adds	r3, #1
 8001650:	627b      	str	r3, [r7, #36]	@ 0x24
 8001652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001654:	2b1d      	cmp	r3, #29
 8001656:	ddf2      	ble.n	800163e <main+0x19a>
						}
						HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8001658:	2201      	movs	r2, #1
 800165a:	2140      	movs	r1, #64	@ 0x40
 800165c:	483c      	ldr	r0, [pc, #240]	@ (8001750 <main+0x2ac>)
 800165e:	f002 fb11 	bl	8003c84 <HAL_GPIO_WritePin>


						sprintf(buf1,"USER1\n\r");
 8001662:	493c      	ldr	r1, [pc, #240]	@ (8001754 <main+0x2b0>)
 8001664:	483c      	ldr	r0, [pc, #240]	@ (8001758 <main+0x2b4>)
 8001666:	f005 fb9f 	bl	8006da8 <siprintf>
						HAL_UART_Transmit(&huart2,buf1,sizeof(buf1), HAL_MAX_DELAY);
 800166a:	f04f 33ff 	mov.w	r3, #4294967295
 800166e:	2208      	movs	r2, #8
 8001670:	4939      	ldr	r1, [pc, #228]	@ (8001758 <main+0x2b4>)
 8001672:	483a      	ldr	r0, [pc, #232]	@ (800175c <main+0x2b8>)
 8001674:	f004 feae 	bl	80063d4 <HAL_UART_Transmit>
						clearArrayEle(buf1 ,8);
 8001678:	2108      	movs	r1, #8
 800167a:	4837      	ldr	r0, [pc, #220]	@ (8001758 <main+0x2b4>)
 800167c:	f000 ffbc 	bl	80025f8 <clearArrayEle>

						//save the notification locally and send it to the ESP32
						sprintf(buf,"User 1 has got a new mail. Your one time password is %s\n",genPassword1);
 8001680:	4a31      	ldr	r2, [pc, #196]	@ (8001748 <main+0x2a4>)
 8001682:	4937      	ldr	r1, [pc, #220]	@ (8001760 <main+0x2bc>)
 8001684:	4837      	ldr	r0, [pc, #220]	@ (8001764 <main+0x2c0>)
 8001686:	f005 fb8f 	bl	8006da8 <siprintf>
						HAL_UART_Transmit(&huart2,buf,sizeof(buf), HAL_MAX_DELAY);
 800168a:	f04f 33ff 	mov.w	r3, #4294967295
 800168e:	2246      	movs	r2, #70	@ 0x46
 8001690:	4934      	ldr	r1, [pc, #208]	@ (8001764 <main+0x2c0>)
 8001692:	4832      	ldr	r0, [pc, #200]	@ (800175c <main+0x2b8>)
 8001694:	f004 fe9e 	bl	80063d4 <HAL_UART_Transmit>
						clearArrayEle(buf ,70);
 8001698:	2146      	movs	r1, #70	@ 0x46
 800169a:	4832      	ldr	r0, [pc, #200]	@ (8001764 <main+0x2c0>)
 800169c:	f000 ffac 	bl	80025f8 <clearArrayEle>
 80016a0:	e095      	b.n	80017ce <main+0x32a>

					}

					//if has more than one mail
					else if(user1Info.mailCount > 1 )
 80016a2:	4b26      	ldr	r3, [pc, #152]	@ (800173c <main+0x298>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	f240 8091 	bls.w	80017ce <main+0x32a>
					{
						__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 1100);
 80016ac:	4b18      	ldr	r3, [pc, #96]	@ (8001710 <main+0x26c>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f240 424c 	movw	r2, #1100	@ 0x44c
 80016b4:	639a      	str	r2, [r3, #56]	@ 0x38
						HAL_Delay(2000);
 80016b6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80016ba:	f002 f825 	bl	8003708 <HAL_Delay>
						//top flap
						__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 500);
 80016be:	4b14      	ldr	r3, [pc, #80]	@ (8001710 <main+0x26c>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80016c6:	635a      	str	r2, [r3, #52]	@ 0x34
						HAL_Delay(1000);
 80016c8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80016cc:	f002 f81c 	bl	8003708 <HAL_Delay>

						//re-allign flap to initial position
						__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1500);
 80016d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001710 <main+0x26c>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80016d8:	635a      	str	r2, [r3, #52]	@ 0x34
						HAL_Delay(1000);
 80016da:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80016de:	f002 f813 	bl	8003708 <HAL_Delay>
						__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 1500);
 80016e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001710 <main+0x26c>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80016ea:	639a      	str	r2, [r3, #56]	@ 0x38
						newNotificationlcd("User 1 got", "2 new mail", 2000);
 80016ec:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80016f0:	491d      	ldr	r1, [pc, #116]	@ (8001768 <main+0x2c4>)
 80016f2:	4814      	ldr	r0, [pc, #80]	@ (8001744 <main+0x2a0>)
 80016f4:	f001 f808 	bl	8002708 <newNotificationlcd>
						generate_password(genPassword1);
 80016f8:	4813      	ldr	r0, [pc, #76]	@ (8001748 <main+0x2a4>)
 80016fa:	f001 fcd1 	bl	80030a0 <generate_password>
						newNotificationlcd(genPassword1, " ", 1000);
 80016fe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001702:	4912      	ldr	r1, [pc, #72]	@ (800174c <main+0x2a8>)
 8001704:	4810      	ldr	r0, [pc, #64]	@ (8001748 <main+0x2a4>)
 8001706:	f000 ffff 	bl	8002708 <newNotificationlcd>

						for(int i=0; i<30;i++)
 800170a:	2300      	movs	r3, #0
 800170c:	623b      	str	r3, [r7, #32]
 800170e:	e037      	b.n	8001780 <main+0x2dc>
 8001710:	200001a0 	.word	0x200001a0
 8001714:	08007f48 	.word	0x08007f48
 8001718:	08007f50 	.word	0x08007f50
 800171c:	08007f58 	.word	0x08007f58
 8001720:	08007f64 	.word	0x08007f64
 8001724:	20000030 	.word	0x20000030
 8001728:	20000028 	.word	0x20000028
 800172c:	20000020 	.word	0x20000020
 8001730:	20000018 	.word	0x20000018
 8001734:	20000010 	.word	0x20000010
 8001738:	20000240 	.word	0x20000240
 800173c:	20000248 	.word	0x20000248
 8001740:	08007f78 	.word	0x08007f78
 8001744:	08007f84 	.word	0x08007f84
 8001748:	20000038 	.word	0x20000038
 800174c:	08007f90 	.word	0x08007f90
 8001750:	40020800 	.word	0x40020800
 8001754:	08007f94 	.word	0x08007f94
 8001758:	200002a8 	.word	0x200002a8
 800175c:	200001e8 	.word	0x200001e8
 8001760:	08007f9c 	.word	0x08007f9c
 8001764:	20000260 	.word	0x20000260
 8001768:	08007fd8 	.word	0x08007fd8
						{
							HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 800176c:	2140      	movs	r1, #64	@ 0x40
 800176e:	488b      	ldr	r0, [pc, #556]	@ (800199c <main+0x4f8>)
 8001770:	f002 faa1 	bl	8003cb6 <HAL_GPIO_TogglePin>
							HAL_Delay(100); // 10ms delay
 8001774:	2064      	movs	r0, #100	@ 0x64
 8001776:	f001 ffc7 	bl	8003708 <HAL_Delay>
						for(int i=0; i<30;i++)
 800177a:	6a3b      	ldr	r3, [r7, #32]
 800177c:	3301      	adds	r3, #1
 800177e:	623b      	str	r3, [r7, #32]
 8001780:	6a3b      	ldr	r3, [r7, #32]
 8001782:	2b1d      	cmp	r3, #29
 8001784:	ddf2      	ble.n	800176c <main+0x2c8>
						}
						HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8001786:	2201      	movs	r2, #1
 8001788:	2140      	movs	r1, #64	@ 0x40
 800178a:	4884      	ldr	r0, [pc, #528]	@ (800199c <main+0x4f8>)
 800178c:	f002 fa7a 	bl	8003c84 <HAL_GPIO_WritePin>

						sprintf(buf1,"USER1\n\r");
 8001790:	4983      	ldr	r1, [pc, #524]	@ (80019a0 <main+0x4fc>)
 8001792:	4884      	ldr	r0, [pc, #528]	@ (80019a4 <main+0x500>)
 8001794:	f005 fb08 	bl	8006da8 <siprintf>
						HAL_UART_Transmit(&huart2,buf1,sizeof(buf1), HAL_MAX_DELAY);
 8001798:	f04f 33ff 	mov.w	r3, #4294967295
 800179c:	2208      	movs	r2, #8
 800179e:	4981      	ldr	r1, [pc, #516]	@ (80019a4 <main+0x500>)
 80017a0:	4881      	ldr	r0, [pc, #516]	@ (80019a8 <main+0x504>)
 80017a2:	f004 fe17 	bl	80063d4 <HAL_UART_Transmit>
						clearArrayEle(buf1 ,8);
 80017a6:	2108      	movs	r1, #8
 80017a8:	487e      	ldr	r0, [pc, #504]	@ (80019a4 <main+0x500>)
 80017aa:	f000 ff25 	bl	80025f8 <clearArrayEle>


						//save the notification locally and send it to the ESP32
						sprintf(buf,"User 1 has got 2 new mails. Your one time password is %s\n",genPassword1);
 80017ae:	4a7f      	ldr	r2, [pc, #508]	@ (80019ac <main+0x508>)
 80017b0:	497f      	ldr	r1, [pc, #508]	@ (80019b0 <main+0x50c>)
 80017b2:	4880      	ldr	r0, [pc, #512]	@ (80019b4 <main+0x510>)
 80017b4:	f005 faf8 	bl	8006da8 <siprintf>
						HAL_UART_Transmit(&huart2,buf,sizeof(buf), HAL_MAX_DELAY);
 80017b8:	f04f 33ff 	mov.w	r3, #4294967295
 80017bc:	2246      	movs	r2, #70	@ 0x46
 80017be:	497d      	ldr	r1, [pc, #500]	@ (80019b4 <main+0x510>)
 80017c0:	4879      	ldr	r0, [pc, #484]	@ (80019a8 <main+0x504>)
 80017c2:	f004 fe07 	bl	80063d4 <HAL_UART_Transmit>
						clearArrayEle(buf ,70);
 80017c6:	2146      	movs	r1, #70	@ 0x46
 80017c8:	487a      	ldr	r0, [pc, #488]	@ (80019b4 <main+0x510>)
 80017ca:	f000 ff15 	bl	80025f8 <clearArrayEle>
					}
					clearArrayEle(sNum ,5);
 80017ce:	2105      	movs	r1, #5
 80017d0:	4879      	ldr	r0, [pc, #484]	@ (80019b8 <main+0x514>)
 80017d2:	f000 ff11 	bl	80025f8 <clearArrayEle>
					welcomeMsglcd();
 80017d6:	f000 ff7f 	bl	80026d8 <welcomeMsglcd>


				}

				//if user 2 has mail
				compareFlag =  compareIntArrays(sNum, user2, 5);
 80017da:	2205      	movs	r2, #5
 80017dc:	4977      	ldr	r1, [pc, #476]	@ (80019bc <main+0x518>)
 80017de:	4876      	ldr	r0, [pc, #472]	@ (80019b8 <main+0x514>)
 80017e0:	f000 fee6 	bl	80025b0 <compareIntArrays>
 80017e4:	4603      	mov	r3, r0
 80017e6:	713b      	strb	r3, [r7, #4]
				if(compareFlag)
 80017e8:	793b      	ldrb	r3, [r7, #4]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d06f      	beq.n	80018ce <main+0x42a>
				{
					if(user2Info.mailFlag != TRUE)
 80017ee:	4b74      	ldr	r3, [pc, #464]	@ (80019c0 <main+0x51c>)
 80017f0:	789b      	ldrb	r3, [r3, #2]
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d002      	beq.n	80017fc <main+0x358>
					{
						user2Info.mailFlag = TRUE;
 80017f6:	4b72      	ldr	r3, [pc, #456]	@ (80019c0 <main+0x51c>)
 80017f8:	2201      	movs	r2, #1
 80017fa:	709a      	strb	r2, [r3, #2]
					}

					__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 800);
 80017fc:	4b71      	ldr	r3, [pc, #452]	@ (80019c4 <main+0x520>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001804:	63da      	str	r2, [r3, #60]	@ 0x3c
					HAL_Delay(2000);
 8001806:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800180a:	f001 ff7d 	bl	8003708 <HAL_Delay>
					//top flap
					__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 500);
 800180e:	4b6d      	ldr	r3, [pc, #436]	@ (80019c4 <main+0x520>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001816:	635a      	str	r2, [r3, #52]	@ 0x34
					HAL_Delay(1000);
 8001818:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800181c:	f001 ff74 	bl	8003708 <HAL_Delay>

					//re-allign flap to initial position
					__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1500);
 8001820:	4b68      	ldr	r3, [pc, #416]	@ (80019c4 <main+0x520>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001828:	635a      	str	r2, [r3, #52]	@ 0x34
					HAL_Delay(1000);
 800182a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800182e:	f001 ff6b 	bl	8003708 <HAL_Delay>
					__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 1500);
 8001832:	4b64      	ldr	r3, [pc, #400]	@ (80019c4 <main+0x520>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800183a:	63da      	str	r2, [r3, #60]	@ 0x3c

					newNotificationlcd("User 2 got", "a new mail", 2000);
 800183c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001840:	4961      	ldr	r1, [pc, #388]	@ (80019c8 <main+0x524>)
 8001842:	4862      	ldr	r0, [pc, #392]	@ (80019cc <main+0x528>)
 8001844:	f000 ff60 	bl	8002708 <newNotificationlcd>
					generate_password(genPassword2);
 8001848:	4861      	ldr	r0, [pc, #388]	@ (80019d0 <main+0x52c>)
 800184a:	f001 fc29 	bl	80030a0 <generate_password>
					newNotificationlcd(genPassword2, " ", 1000);
 800184e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001852:	4960      	ldr	r1, [pc, #384]	@ (80019d4 <main+0x530>)
 8001854:	485e      	ldr	r0, [pc, #376]	@ (80019d0 <main+0x52c>)
 8001856:	f000 ff57 	bl	8002708 <newNotificationlcd>

					for(int i=0; i<30;i++)
 800185a:	2300      	movs	r3, #0
 800185c:	61fb      	str	r3, [r7, #28]
 800185e:	e009      	b.n	8001874 <main+0x3d0>
					{
						HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 8001860:	2180      	movs	r1, #128	@ 0x80
 8001862:	484e      	ldr	r0, [pc, #312]	@ (800199c <main+0x4f8>)
 8001864:	f002 fa27 	bl	8003cb6 <HAL_GPIO_TogglePin>
						HAL_Delay(100); // 10ms delay
 8001868:	2064      	movs	r0, #100	@ 0x64
 800186a:	f001 ff4d 	bl	8003708 <HAL_Delay>
					for(int i=0; i<30;i++)
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	3301      	adds	r3, #1
 8001872:	61fb      	str	r3, [r7, #28]
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	2b1d      	cmp	r3, #29
 8001878:	ddf2      	ble.n	8001860 <main+0x3bc>
					}
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 800187a:	2201      	movs	r2, #1
 800187c:	2180      	movs	r1, #128	@ 0x80
 800187e:	4847      	ldr	r0, [pc, #284]	@ (800199c <main+0x4f8>)
 8001880:	f002 fa00 	bl	8003c84 <HAL_GPIO_WritePin>

					//test code
					sprintf(buf1,"USER2\n\r");
 8001884:	4954      	ldr	r1, [pc, #336]	@ (80019d8 <main+0x534>)
 8001886:	4847      	ldr	r0, [pc, #284]	@ (80019a4 <main+0x500>)
 8001888:	f005 fa8e 	bl	8006da8 <siprintf>
					HAL_UART_Transmit(&huart2,buf1,sizeof(buf1), HAL_MAX_DELAY);
 800188c:	f04f 33ff 	mov.w	r3, #4294967295
 8001890:	2208      	movs	r2, #8
 8001892:	4944      	ldr	r1, [pc, #272]	@ (80019a4 <main+0x500>)
 8001894:	4844      	ldr	r0, [pc, #272]	@ (80019a8 <main+0x504>)
 8001896:	f004 fd9d 	bl	80063d4 <HAL_UART_Transmit>
					clearArrayEle(buf1 ,8);
 800189a:	2108      	movs	r1, #8
 800189c:	4841      	ldr	r0, [pc, #260]	@ (80019a4 <main+0x500>)
 800189e:	f000 feab 	bl	80025f8 <clearArrayEle>

					//save the notification locally and send it to the ESP32
					sprintf(buf,"User 2 has got a new mail. Your one time password is %s\n\r",genPassword2);
 80018a2:	4a4b      	ldr	r2, [pc, #300]	@ (80019d0 <main+0x52c>)
 80018a4:	494d      	ldr	r1, [pc, #308]	@ (80019dc <main+0x538>)
 80018a6:	4843      	ldr	r0, [pc, #268]	@ (80019b4 <main+0x510>)
 80018a8:	f005 fa7e 	bl	8006da8 <siprintf>
					HAL_UART_Transmit(&huart2,buf,sizeof(buf), HAL_MAX_DELAY);
 80018ac:	f04f 33ff 	mov.w	r3, #4294967295
 80018b0:	2246      	movs	r2, #70	@ 0x46
 80018b2:	4940      	ldr	r1, [pc, #256]	@ (80019b4 <main+0x510>)
 80018b4:	483c      	ldr	r0, [pc, #240]	@ (80019a8 <main+0x504>)
 80018b6:	f004 fd8d 	bl	80063d4 <HAL_UART_Transmit>
					clearArrayEle(buf ,70);
 80018ba:	2146      	movs	r1, #70	@ 0x46
 80018bc:	483d      	ldr	r0, [pc, #244]	@ (80019b4 <main+0x510>)
 80018be:	f000 fe9b 	bl	80025f8 <clearArrayEle>

					clearArrayEle(sNum ,5);
 80018c2:	2105      	movs	r1, #5
 80018c4:	483c      	ldr	r0, [pc, #240]	@ (80019b8 <main+0x514>)
 80018c6:	f000 fe97 	bl	80025f8 <clearArrayEle>
					welcomeMsglcd();
 80018ca:	f000 ff05 	bl	80026d8 <welcomeMsglcd>
				}

				//if user 3 has mail
				compareFlag =  compareIntArrays(sNum, user3, 5);
 80018ce:	2205      	movs	r2, #5
 80018d0:	4943      	ldr	r1, [pc, #268]	@ (80019e0 <main+0x53c>)
 80018d2:	4839      	ldr	r0, [pc, #228]	@ (80019b8 <main+0x514>)
 80018d4:	f000 fe6c 	bl	80025b0 <compareIntArrays>
 80018d8:	4603      	mov	r3, r0
 80018da:	713b      	strb	r3, [r7, #4]
				if(compareFlag)
 80018dc:	793b      	ldrb	r3, [r7, #4]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	f000 8090 	beq.w	8001a04 <main+0x560>
				{
					if(user3Info.mailFlag != TRUE)
 80018e4:	4b3f      	ldr	r3, [pc, #252]	@ (80019e4 <main+0x540>)
 80018e6:	789b      	ldrb	r3, [r3, #2]
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d002      	beq.n	80018f2 <main+0x44e>
					{
						user3Info.mailFlag = TRUE;
 80018ec:	4b3d      	ldr	r3, [pc, #244]	@ (80019e4 <main+0x540>)
 80018ee:	2201      	movs	r2, #1
 80018f0:	709a      	strb	r2, [r3, #2]
					}

					__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 500);
 80018f2:	4b34      	ldr	r3, [pc, #208]	@ (80019c4 <main+0x520>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80018fa:	635a      	str	r2, [r3, #52]	@ 0x34
					HAL_Delay(3000);
 80018fc:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001900:	f001 ff02 	bl	8003708 <HAL_Delay>
					//re-allign flap to initial position
					__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1500);
 8001904:	4b2f      	ldr	r3, [pc, #188]	@ (80019c4 <main+0x520>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800190c:	635a      	str	r2, [r3, #52]	@ 0x34

					newNotificationlcd("User 3 got", "a new mail", 2000);
 800190e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001912:	492d      	ldr	r1, [pc, #180]	@ (80019c8 <main+0x524>)
 8001914:	4834      	ldr	r0, [pc, #208]	@ (80019e8 <main+0x544>)
 8001916:	f000 fef7 	bl	8002708 <newNotificationlcd>
					generate_password(genPassword3);
 800191a:	4834      	ldr	r0, [pc, #208]	@ (80019ec <main+0x548>)
 800191c:	f001 fbc0 	bl	80030a0 <generate_password>
					newNotificationlcd(genPassword3, " ", 1000);
 8001920:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001924:	492b      	ldr	r1, [pc, #172]	@ (80019d4 <main+0x530>)
 8001926:	4831      	ldr	r0, [pc, #196]	@ (80019ec <main+0x548>)
 8001928:	f000 feee 	bl	8002708 <newNotificationlcd>

					for(int i=0; i<30;i++)
 800192c:	2300      	movs	r3, #0
 800192e:	61bb      	str	r3, [r7, #24]
 8001930:	e00a      	b.n	8001948 <main+0x4a4>
					{
						HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
 8001932:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001936:	4819      	ldr	r0, [pc, #100]	@ (800199c <main+0x4f8>)
 8001938:	f002 f9bd 	bl	8003cb6 <HAL_GPIO_TogglePin>
						HAL_Delay(100); // 10ms delay
 800193c:	2064      	movs	r0, #100	@ 0x64
 800193e:	f001 fee3 	bl	8003708 <HAL_Delay>
					for(int i=0; i<30;i++)
 8001942:	69bb      	ldr	r3, [r7, #24]
 8001944:	3301      	adds	r3, #1
 8001946:	61bb      	str	r3, [r7, #24]
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	2b1d      	cmp	r3, #29
 800194c:	ddf1      	ble.n	8001932 <main+0x48e>
					}
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800194e:	2201      	movs	r2, #1
 8001950:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001954:	4811      	ldr	r0, [pc, #68]	@ (800199c <main+0x4f8>)
 8001956:	f002 f995 	bl	8003c84 <HAL_GPIO_WritePin>

					//test code
					sprintf(buf,"USER3\n");
 800195a:	4925      	ldr	r1, [pc, #148]	@ (80019f0 <main+0x54c>)
 800195c:	4815      	ldr	r0, [pc, #84]	@ (80019b4 <main+0x510>)
 800195e:	f005 fa23 	bl	8006da8 <siprintf>
					HAL_UART_Transmit(&huart2,buf,sizeof(buf), HAL_MAX_DELAY);
 8001962:	f04f 33ff 	mov.w	r3, #4294967295
 8001966:	2246      	movs	r2, #70	@ 0x46
 8001968:	4912      	ldr	r1, [pc, #72]	@ (80019b4 <main+0x510>)
 800196a:	480f      	ldr	r0, [pc, #60]	@ (80019a8 <main+0x504>)
 800196c:	f004 fd32 	bl	80063d4 <HAL_UART_Transmit>
					HAL_Delay(200);
 8001970:	20c8      	movs	r0, #200	@ 0xc8
 8001972:	f001 fec9 	bl	8003708 <HAL_Delay>

					//save the notification locally and send it to the ESP32
					sprintf(buf,"User 3 has got a new mail. Your one time password is %s\n",genPassword3);
 8001976:	4a1d      	ldr	r2, [pc, #116]	@ (80019ec <main+0x548>)
 8001978:	491e      	ldr	r1, [pc, #120]	@ (80019f4 <main+0x550>)
 800197a:	480e      	ldr	r0, [pc, #56]	@ (80019b4 <main+0x510>)
 800197c:	f005 fa14 	bl	8006da8 <siprintf>
					HAL_UART_Transmit(&huart2,buf,sizeof(buf), HAL_MAX_DELAY);
 8001980:	f04f 33ff 	mov.w	r3, #4294967295
 8001984:	2246      	movs	r2, #70	@ 0x46
 8001986:	490b      	ldr	r1, [pc, #44]	@ (80019b4 <main+0x510>)
 8001988:	4807      	ldr	r0, [pc, #28]	@ (80019a8 <main+0x504>)
 800198a:	f004 fd23 	bl	80063d4 <HAL_UART_Transmit>

					clearArrayEle(sNum ,5);
 800198e:	2105      	movs	r1, #5
 8001990:	4809      	ldr	r0, [pc, #36]	@ (80019b8 <main+0x514>)
 8001992:	f000 fe31 	bl	80025f8 <clearArrayEle>
					welcomeMsglcd();
 8001996:	f000 fe9f 	bl	80026d8 <welcomeMsglcd>
 800199a:	e033      	b.n	8001a04 <main+0x560>
 800199c:	40020800 	.word	0x40020800
 80019a0:	08007f94 	.word	0x08007f94
 80019a4:	200002a8 	.word	0x200002a8
 80019a8:	200001e8 	.word	0x200001e8
 80019ac:	20000038 	.word	0x20000038
 80019b0:	08007fe4 	.word	0x08007fe4
 80019b4:	20000260 	.word	0x20000260
 80019b8:	20000240 	.word	0x20000240
 80019bc:	20000018 	.word	0x20000018
 80019c0:	2000024c 	.word	0x2000024c
 80019c4:	200001a0 	.word	0x200001a0
 80019c8:	08007f78 	.word	0x08007f78
 80019cc:	08008020 	.word	0x08008020
 80019d0:	20000040 	.word	0x20000040
 80019d4:	08007f90 	.word	0x08007f90
 80019d8:	0800802c 	.word	0x0800802c
 80019dc:	08008034 	.word	0x08008034
 80019e0:	20000020 	.word	0x20000020
 80019e4:	20000250 	.word	0x20000250
 80019e8:	08008070 	.word	0x08008070
 80019ec:	20000048 	.word	0x20000048
 80019f0:	0800807c 	.word	0x0800807c
 80019f4:	08008084 	.word	0x08008084
	  		}//end of valid user

			//if not a valid user display message
	  		else
	  		{
	  			newNotificationlcd("Not a valid user", " ", 2000);
 80019f8:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80019fc:	4974      	ldr	r1, [pc, #464]	@ (8001bd0 <main+0x72c>)
 80019fe:	4875      	ldr	r0, [pc, #468]	@ (8001bd4 <main+0x730>)
 8001a00:	f000 fe82 	bl	8002708 <newNotificationlcd>
	  		}
	  		clearArrayEle(sNum ,5);
 8001a04:	2105      	movs	r1, #5
 8001a06:	4874      	ldr	r0, [pc, #464]	@ (8001bd8 <main+0x734>)
 8001a08:	f000 fdf6 	bl	80025f8 <clearArrayEle>
	  		welcomeMsglcd();
 8001a0c:	f000 fe64 	bl	80026d8 <welcomeMsglcd>
	  	}//end of first read

	  	//Scan from reader 2 for packages
	  	statusRDR2 = readtagsFromRDR2();
 8001a10:	f000 fd90 	bl	8002534 <readtagsFromRDR2>
 8001a14:	4603      	mov	r3, r0
 8001a16:	70bb      	strb	r3, [r7, #2]

	  	//if a valid read
	  	if(! statusRDR2)
 8001a18:	78bb      	ldrb	r3, [r7, #2]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	f47f ad92 	bne.w	8001544 <main+0xa0>
	  	{
	  		userValidpack = checkValidUser(sNum, user1, user2, user3, user4, user5, 5);
 8001a20:	2305      	movs	r3, #5
 8001a22:	9302      	str	r3, [sp, #8]
 8001a24:	4b6d      	ldr	r3, [pc, #436]	@ (8001bdc <main+0x738>)
 8001a26:	9301      	str	r3, [sp, #4]
 8001a28:	4b6d      	ldr	r3, [pc, #436]	@ (8001be0 <main+0x73c>)
 8001a2a:	9300      	str	r3, [sp, #0]
 8001a2c:	4b6d      	ldr	r3, [pc, #436]	@ (8001be4 <main+0x740>)
 8001a2e:	4a6e      	ldr	r2, [pc, #440]	@ (8001be8 <main+0x744>)
 8001a30:	496e      	ldr	r1, [pc, #440]	@ (8001bec <main+0x748>)
 8001a32:	4869      	ldr	r0, [pc, #420]	@ (8001bd8 <main+0x734>)
 8001a34:	f000 fdfc 	bl	8002630 <checkValidUser>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	707b      	strb	r3, [r7, #1]
	  		if(userValidpack)
 8001a3c:	787b      	ldrb	r3, [r7, #1]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	f000 81d3 	beq.w	8001dea <main+0x946>
	  		{
	  			//Operate compartment only for 1 user. Should not operate if other User has package
				compareFlag =  compareIntArrays(sNum, user1, 5);
 8001a44:	2205      	movs	r2, #5
 8001a46:	4969      	ldr	r1, [pc, #420]	@ (8001bec <main+0x748>)
 8001a48:	4863      	ldr	r0, [pc, #396]	@ (8001bd8 <main+0x734>)
 8001a4a:	f000 fdb1 	bl	80025b0 <compareIntArrays>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	713b      	strb	r3, [r7, #4]
				compareFlag2 =  compareIntArrays(sNum, user5, 5);
 8001a52:	2205      	movs	r2, #5
 8001a54:	4961      	ldr	r1, [pc, #388]	@ (8001bdc <main+0x738>)
 8001a56:	4860      	ldr	r0, [pc, #384]	@ (8001bd8 <main+0x734>)
 8001a58:	f000 fdaa 	bl	80025b0 <compareIntArrays>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	70fb      	strb	r3, [r7, #3]
				if((compareFlag || compareFlag2) && !(user1Info.parcelFlag) && !(user2Info.parcelFlag) && !(user3Info.parcelFlag))
 8001a60:	793b      	ldrb	r3, [r7, #4]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d102      	bne.n	8001a6c <main+0x5c8>
 8001a66:	78fb      	ldrb	r3, [r7, #3]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d06b      	beq.n	8001b44 <main+0x6a0>
 8001a6c:	4b60      	ldr	r3, [pc, #384]	@ (8001bf0 <main+0x74c>)
 8001a6e:	78db      	ldrb	r3, [r3, #3]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d167      	bne.n	8001b44 <main+0x6a0>
 8001a74:	4b5f      	ldr	r3, [pc, #380]	@ (8001bf4 <main+0x750>)
 8001a76:	78db      	ldrb	r3, [r3, #3]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d163      	bne.n	8001b44 <main+0x6a0>
 8001a7c:	4b5e      	ldr	r3, [pc, #376]	@ (8001bf8 <main+0x754>)
 8001a7e:	78db      	ldrb	r3, [r3, #3]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d15f      	bne.n	8001b44 <main+0x6a0>
				{
					if(user1Info.parcelFlag != TRUE)
 8001a84:	4b5a      	ldr	r3, [pc, #360]	@ (8001bf0 <main+0x74c>)
 8001a86:	78db      	ldrb	r3, [r3, #3]
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d002      	beq.n	8001a92 <main+0x5ee>
					{
						user1Info.parcelFlag = TRUE;
 8001a8c:	4b58      	ldr	r3, [pc, #352]	@ (8001bf0 <main+0x74c>)
 8001a8e:	2201      	movs	r2, #1
 8001a90:	70da      	strb	r2, [r3, #3]
					}
					__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 1500);
 8001a92:	4b5a      	ldr	r3, [pc, #360]	@ (8001bfc <main+0x758>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001a9a:	641a      	str	r2, [r3, #64]	@ 0x40
					setLCDHMIscreen("Put the package","in the box below");
 8001a9c:	4958      	ldr	r1, [pc, #352]	@ (8001c00 <main+0x75c>)
 8001a9e:	4859      	ldr	r0, [pc, #356]	@ (8001c04 <main+0x760>)
 8001aa0:	f000 fe51 	bl	8002746 <setLCDHMIscreen>
					//allow delay to place the package and close after delay
					HAL_Delay(10000);
 8001aa4:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001aa8:	f001 fe2e 	bl	8003708 <HAL_Delay>
					__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 500);
 8001aac:	4b53      	ldr	r3, [pc, #332]	@ (8001bfc <main+0x758>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001ab4:	641a      	str	r2, [r3, #64]	@ 0x40

					newNotificationlcd("User 1 got", "a new package", 2000);
 8001ab6:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001aba:	4953      	ldr	r1, [pc, #332]	@ (8001c08 <main+0x764>)
 8001abc:	4853      	ldr	r0, [pc, #332]	@ (8001c0c <main+0x768>)
 8001abe:	f000 fe23 	bl	8002708 <newNotificationlcd>
					//generate new password and display
					generate_password(genPassword4);
 8001ac2:	4853      	ldr	r0, [pc, #332]	@ (8001c10 <main+0x76c>)
 8001ac4:	f001 faec 	bl	80030a0 <generate_password>
					newNotificationlcd(genPassword4, " ", 3000);
 8001ac8:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001acc:	4940      	ldr	r1, [pc, #256]	@ (8001bd0 <main+0x72c>)
 8001ace:	4850      	ldr	r0, [pc, #320]	@ (8001c10 <main+0x76c>)
 8001ad0:	f000 fe1a 	bl	8002708 <newNotificationlcd>

					for(int i=0; i<30;i++)
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	617b      	str	r3, [r7, #20]
 8001ad8:	e00a      	b.n	8001af0 <main+0x64c>
					{
						HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9);
 8001ada:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001ade:	484d      	ldr	r0, [pc, #308]	@ (8001c14 <main+0x770>)
 8001ae0:	f002 f8e9 	bl	8003cb6 <HAL_GPIO_TogglePin>
						HAL_Delay(100); // 10ms delay
 8001ae4:	2064      	movs	r0, #100	@ 0x64
 8001ae6:	f001 fe0f 	bl	8003708 <HAL_Delay>
					for(int i=0; i<30;i++)
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	3301      	adds	r3, #1
 8001aee:	617b      	str	r3, [r7, #20]
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	2b1d      	cmp	r3, #29
 8001af4:	ddf1      	ble.n	8001ada <main+0x636>
					}
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8001af6:	2201      	movs	r2, #1
 8001af8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001afc:	4845      	ldr	r0, [pc, #276]	@ (8001c14 <main+0x770>)
 8001afe:	f002 f8c1 	bl	8003c84 <HAL_GPIO_WritePin>

					//test code
					sprintf(buf1,"USER1\n\r");
 8001b02:	4945      	ldr	r1, [pc, #276]	@ (8001c18 <main+0x774>)
 8001b04:	4845      	ldr	r0, [pc, #276]	@ (8001c1c <main+0x778>)
 8001b06:	f005 f94f 	bl	8006da8 <siprintf>
					HAL_UART_Transmit(&huart2,buf1,sizeof(buf1), HAL_MAX_DELAY);
 8001b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b0e:	2208      	movs	r2, #8
 8001b10:	4942      	ldr	r1, [pc, #264]	@ (8001c1c <main+0x778>)
 8001b12:	4843      	ldr	r0, [pc, #268]	@ (8001c20 <main+0x77c>)
 8001b14:	f004 fc5e 	bl	80063d4 <HAL_UART_Transmit>
					clearArrayEle(buf1 ,8);
 8001b18:	2108      	movs	r1, #8
 8001b1a:	4840      	ldr	r0, [pc, #256]	@ (8001c1c <main+0x778>)
 8001b1c:	f000 fd6c 	bl	80025f8 <clearArrayEle>
					//save the notification locally and send it to the ESP32
					sprintf(buf,"User 1 has got a new package. Your one time password is %s\n",genPassword4);
 8001b20:	4a3b      	ldr	r2, [pc, #236]	@ (8001c10 <main+0x76c>)
 8001b22:	4940      	ldr	r1, [pc, #256]	@ (8001c24 <main+0x780>)
 8001b24:	4840      	ldr	r0, [pc, #256]	@ (8001c28 <main+0x784>)
 8001b26:	f005 f93f 	bl	8006da8 <siprintf>
					HAL_UART_Transmit(&huart2,buf,sizeof(buf), HAL_MAX_DELAY);
 8001b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b2e:	2246      	movs	r2, #70	@ 0x46
 8001b30:	493d      	ldr	r1, [pc, #244]	@ (8001c28 <main+0x784>)
 8001b32:	483b      	ldr	r0, [pc, #236]	@ (8001c20 <main+0x77c>)
 8001b34:	f004 fc4e 	bl	80063d4 <HAL_UART_Transmit>

					clearArrayEle(sNum ,5);
 8001b38:	2105      	movs	r1, #5
 8001b3a:	4827      	ldr	r0, [pc, #156]	@ (8001bd8 <main+0x734>)
 8001b3c:	f000 fd5c 	bl	80025f8 <clearArrayEle>


					welcomeMsglcd();
 8001b40:	f000 fdca 	bl	80026d8 <welcomeMsglcd>
				}

				//Operate compartment only for 1 user. Should not operate if other User has package
				compareFlag =  compareIntArrays(sNum, user2, 5);
 8001b44:	2205      	movs	r2, #5
 8001b46:	4928      	ldr	r1, [pc, #160]	@ (8001be8 <main+0x744>)
 8001b48:	4823      	ldr	r0, [pc, #140]	@ (8001bd8 <main+0x734>)
 8001b4a:	f000 fd31 	bl	80025b0 <compareIntArrays>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	713b      	strb	r3, [r7, #4]
				if(compareFlag && !(user1Info.parcelFlag) && !(user2Info.parcelFlag) && !(user3Info.parcelFlag))
 8001b52:	793b      	ldrb	r3, [r7, #4]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	f000 80a2 	beq.w	8001c9e <main+0x7fa>
 8001b5a:	4b25      	ldr	r3, [pc, #148]	@ (8001bf0 <main+0x74c>)
 8001b5c:	78db      	ldrb	r3, [r3, #3]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	f040 809d 	bne.w	8001c9e <main+0x7fa>
 8001b64:	4b23      	ldr	r3, [pc, #140]	@ (8001bf4 <main+0x750>)
 8001b66:	78db      	ldrb	r3, [r3, #3]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	f040 8098 	bne.w	8001c9e <main+0x7fa>
 8001b6e:	4b22      	ldr	r3, [pc, #136]	@ (8001bf8 <main+0x754>)
 8001b70:	78db      	ldrb	r3, [r3, #3]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	f040 8093 	bne.w	8001c9e <main+0x7fa>
				{
					//__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 2500);
					if(user2Info.parcelFlag != TRUE)
 8001b78:	4b1e      	ldr	r3, [pc, #120]	@ (8001bf4 <main+0x750>)
 8001b7a:	78db      	ldrb	r3, [r3, #3]
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d002      	beq.n	8001b86 <main+0x6e2>
					{
						user2Info.parcelFlag = TRUE;
 8001b80:	4b1c      	ldr	r3, [pc, #112]	@ (8001bf4 <main+0x750>)
 8001b82:	2201      	movs	r2, #1
 8001b84:	70da      	strb	r2, [r3, #3]
					}

					__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 1500);
 8001b86:	4b1d      	ldr	r3, [pc, #116]	@ (8001bfc <main+0x758>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001b8e:	641a      	str	r2, [r3, #64]	@ 0x40
					setLCDHMIscreen("Put the package","in the box below");
 8001b90:	491b      	ldr	r1, [pc, #108]	@ (8001c00 <main+0x75c>)
 8001b92:	481c      	ldr	r0, [pc, #112]	@ (8001c04 <main+0x760>)
 8001b94:	f000 fdd7 	bl	8002746 <setLCDHMIscreen>
					//allow delay to place the package and close after delay
					HAL_Delay(10000);
 8001b98:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001b9c:	f001 fdb4 	bl	8003708 <HAL_Delay>
					__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 500);
 8001ba0:	4b16      	ldr	r3, [pc, #88]	@ (8001bfc <main+0x758>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001ba8:	641a      	str	r2, [r3, #64]	@ 0x40

					newNotificationlcd("User 2 got", "a new package", 2000);
 8001baa:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001bae:	4916      	ldr	r1, [pc, #88]	@ (8001c08 <main+0x764>)
 8001bb0:	481e      	ldr	r0, [pc, #120]	@ (8001c2c <main+0x788>)
 8001bb2:	f000 fda9 	bl	8002708 <newNotificationlcd>
					//generate new password and display
					generate_password(genPassword5);
 8001bb6:	481e      	ldr	r0, [pc, #120]	@ (8001c30 <main+0x78c>)
 8001bb8:	f001 fa72 	bl	80030a0 <generate_password>
					newNotificationlcd(genPassword5, " ", 3000);
 8001bbc:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001bc0:	4903      	ldr	r1, [pc, #12]	@ (8001bd0 <main+0x72c>)
 8001bc2:	481b      	ldr	r0, [pc, #108]	@ (8001c30 <main+0x78c>)
 8001bc4:	f000 fda0 	bl	8002708 <newNotificationlcd>

					for(int i=0; i<30;i++)
 8001bc8:	2300      	movs	r3, #0
 8001bca:	613b      	str	r3, [r7, #16]
 8001bcc:	e03d      	b.n	8001c4a <main+0x7a6>
 8001bce:	bf00      	nop
 8001bd0:	08007f90 	.word	0x08007f90
 8001bd4:	080080c0 	.word	0x080080c0
 8001bd8:	20000240 	.word	0x20000240
 8001bdc:	20000030 	.word	0x20000030
 8001be0:	20000028 	.word	0x20000028
 8001be4:	20000020 	.word	0x20000020
 8001be8:	20000018 	.word	0x20000018
 8001bec:	20000010 	.word	0x20000010
 8001bf0:	20000248 	.word	0x20000248
 8001bf4:	2000024c 	.word	0x2000024c
 8001bf8:	20000250 	.word	0x20000250
 8001bfc:	200001a0 	.word	0x200001a0
 8001c00:	080080d4 	.word	0x080080d4
 8001c04:	080080e8 	.word	0x080080e8
 8001c08:	080080f8 	.word	0x080080f8
 8001c0c:	08007f84 	.word	0x08007f84
 8001c10:	20000050 	.word	0x20000050
 8001c14:	40020800 	.word	0x40020800
 8001c18:	08007f94 	.word	0x08007f94
 8001c1c:	200002a8 	.word	0x200002a8
 8001c20:	200001e8 	.word	0x200001e8
 8001c24:	08008108 	.word	0x08008108
 8001c28:	20000260 	.word	0x20000260
 8001c2c:	08008020 	.word	0x08008020
 8001c30:	20000058 	.word	0x20000058
					{
						HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9);
 8001c34:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001c38:	4873      	ldr	r0, [pc, #460]	@ (8001e08 <main+0x964>)
 8001c3a:	f002 f83c 	bl	8003cb6 <HAL_GPIO_TogglePin>
						HAL_Delay(100); // 10ms delay
 8001c3e:	2064      	movs	r0, #100	@ 0x64
 8001c40:	f001 fd62 	bl	8003708 <HAL_Delay>
					for(int i=0; i<30;i++)
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	3301      	adds	r3, #1
 8001c48:	613b      	str	r3, [r7, #16]
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	2b1d      	cmp	r3, #29
 8001c4e:	ddf1      	ble.n	8001c34 <main+0x790>
					}
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8001c50:	2201      	movs	r2, #1
 8001c52:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001c56:	486c      	ldr	r0, [pc, #432]	@ (8001e08 <main+0x964>)
 8001c58:	f002 f814 	bl	8003c84 <HAL_GPIO_WritePin>

					//test code
					sprintf(buf1,"USER2\n\r");
 8001c5c:	496b      	ldr	r1, [pc, #428]	@ (8001e0c <main+0x968>)
 8001c5e:	486c      	ldr	r0, [pc, #432]	@ (8001e10 <main+0x96c>)
 8001c60:	f005 f8a2 	bl	8006da8 <siprintf>
					HAL_UART_Transmit(&huart2,buf1,sizeof(buf1), HAL_MAX_DELAY);
 8001c64:	f04f 33ff 	mov.w	r3, #4294967295
 8001c68:	2208      	movs	r2, #8
 8001c6a:	4969      	ldr	r1, [pc, #420]	@ (8001e10 <main+0x96c>)
 8001c6c:	4869      	ldr	r0, [pc, #420]	@ (8001e14 <main+0x970>)
 8001c6e:	f004 fbb1 	bl	80063d4 <HAL_UART_Transmit>
					clearArrayEle(buf1 ,8);
 8001c72:	2108      	movs	r1, #8
 8001c74:	4866      	ldr	r0, [pc, #408]	@ (8001e10 <main+0x96c>)
 8001c76:	f000 fcbf 	bl	80025f8 <clearArrayEle>
					//save the notification locally and send it to the ESP32
					sprintf(buf,"User 2 has got a new package. Your one time password is %s\n",genPassword5);
 8001c7a:	4a67      	ldr	r2, [pc, #412]	@ (8001e18 <main+0x974>)
 8001c7c:	4967      	ldr	r1, [pc, #412]	@ (8001e1c <main+0x978>)
 8001c7e:	4868      	ldr	r0, [pc, #416]	@ (8001e20 <main+0x97c>)
 8001c80:	f005 f892 	bl	8006da8 <siprintf>
					HAL_UART_Transmit(&huart2,buf,sizeof(buf), HAL_MAX_DELAY);
 8001c84:	f04f 33ff 	mov.w	r3, #4294967295
 8001c88:	2246      	movs	r2, #70	@ 0x46
 8001c8a:	4965      	ldr	r1, [pc, #404]	@ (8001e20 <main+0x97c>)
 8001c8c:	4861      	ldr	r0, [pc, #388]	@ (8001e14 <main+0x970>)
 8001c8e:	f004 fba1 	bl	80063d4 <HAL_UART_Transmit>

					clearArrayEle(sNum ,5);
 8001c92:	2105      	movs	r1, #5
 8001c94:	4863      	ldr	r0, [pc, #396]	@ (8001e24 <main+0x980>)
 8001c96:	f000 fcaf 	bl	80025f8 <clearArrayEle>
					//allow delay to place the package and close after delay
					//__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 500);
					welcomeMsglcd();
 8001c9a:	f000 fd1d 	bl	80026d8 <welcomeMsglcd>
				}

				//Operate compartment only for 1 user. Should not operate if other User has package
				compareFlag =  compareIntArrays(sNum, user3, 5);
 8001c9e:	2205      	movs	r2, #5
 8001ca0:	4961      	ldr	r1, [pc, #388]	@ (8001e28 <main+0x984>)
 8001ca2:	4860      	ldr	r0, [pc, #384]	@ (8001e24 <main+0x980>)
 8001ca4:	f000 fc84 	bl	80025b0 <compareIntArrays>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	713b      	strb	r3, [r7, #4]
				if(compareFlag && !(user1Info.parcelFlag) && !(user2Info.parcelFlag) && !(user3Info.parcelFlag))
 8001cac:	793b      	ldrb	r3, [r7, #4]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d06b      	beq.n	8001d8a <main+0x8e6>
 8001cb2:	4b5e      	ldr	r3, [pc, #376]	@ (8001e2c <main+0x988>)
 8001cb4:	78db      	ldrb	r3, [r3, #3]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d167      	bne.n	8001d8a <main+0x8e6>
 8001cba:	4b5d      	ldr	r3, [pc, #372]	@ (8001e30 <main+0x98c>)
 8001cbc:	78db      	ldrb	r3, [r3, #3]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d163      	bne.n	8001d8a <main+0x8e6>
 8001cc2:	4b5c      	ldr	r3, [pc, #368]	@ (8001e34 <main+0x990>)
 8001cc4:	78db      	ldrb	r3, [r3, #3]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d15f      	bne.n	8001d8a <main+0x8e6>
				{
					//__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 2500);
					if(user3Info.parcelFlag != TRUE)
 8001cca:	4b5a      	ldr	r3, [pc, #360]	@ (8001e34 <main+0x990>)
 8001ccc:	78db      	ldrb	r3, [r3, #3]
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d002      	beq.n	8001cd8 <main+0x834>
					{
						user3Info.parcelFlag = TRUE;
 8001cd2:	4b58      	ldr	r3, [pc, #352]	@ (8001e34 <main+0x990>)
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	70da      	strb	r2, [r3, #3]
					}

					__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 1500);
 8001cd8:	4b57      	ldr	r3, [pc, #348]	@ (8001e38 <main+0x994>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001ce0:	641a      	str	r2, [r3, #64]	@ 0x40
					setLCDHMIscreen("Put the package","in the box below");
 8001ce2:	4956      	ldr	r1, [pc, #344]	@ (8001e3c <main+0x998>)
 8001ce4:	4856      	ldr	r0, [pc, #344]	@ (8001e40 <main+0x99c>)
 8001ce6:	f000 fd2e 	bl	8002746 <setLCDHMIscreen>
					//allow delay to place the package and close after delay
					HAL_Delay(10000);
 8001cea:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001cee:	f001 fd0b 	bl	8003708 <HAL_Delay>
					__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 500);
 8001cf2:	4b51      	ldr	r3, [pc, #324]	@ (8001e38 <main+0x994>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001cfa:	641a      	str	r2, [r3, #64]	@ 0x40

					newNotificationlcd("User 3 got", "a new mail", 2000);
 8001cfc:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001d00:	4950      	ldr	r1, [pc, #320]	@ (8001e44 <main+0x9a0>)
 8001d02:	4851      	ldr	r0, [pc, #324]	@ (8001e48 <main+0x9a4>)
 8001d04:	f000 fd00 	bl	8002708 <newNotificationlcd>
					//generate new password and display
					generate_password(genPassword6);
 8001d08:	4850      	ldr	r0, [pc, #320]	@ (8001e4c <main+0x9a8>)
 8001d0a:	f001 f9c9 	bl	80030a0 <generate_password>
					newNotificationlcd(genPassword6, " ", 3000);
 8001d0e:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001d12:	494f      	ldr	r1, [pc, #316]	@ (8001e50 <main+0x9ac>)
 8001d14:	484d      	ldr	r0, [pc, #308]	@ (8001e4c <main+0x9a8>)
 8001d16:	f000 fcf7 	bl	8002708 <newNotificationlcd>

					for(int i=0; i<30;i++)
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60fb      	str	r3, [r7, #12]
 8001d1e:	e00a      	b.n	8001d36 <main+0x892>
					{
						HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9);
 8001d20:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001d24:	4838      	ldr	r0, [pc, #224]	@ (8001e08 <main+0x964>)
 8001d26:	f001 ffc6 	bl	8003cb6 <HAL_GPIO_TogglePin>
						HAL_Delay(100); // 10ms delay
 8001d2a:	2064      	movs	r0, #100	@ 0x64
 8001d2c:	f001 fcec 	bl	8003708 <HAL_Delay>
					for(int i=0; i<30;i++)
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	3301      	adds	r3, #1
 8001d34:	60fb      	str	r3, [r7, #12]
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2b1d      	cmp	r3, #29
 8001d3a:	ddf1      	ble.n	8001d20 <main+0x87c>
					}
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001d42:	4831      	ldr	r0, [pc, #196]	@ (8001e08 <main+0x964>)
 8001d44:	f001 ff9e 	bl	8003c84 <HAL_GPIO_WritePin>

					//test code
					sprintf(buf1,"USER3\n\r");
 8001d48:	4942      	ldr	r1, [pc, #264]	@ (8001e54 <main+0x9b0>)
 8001d4a:	4831      	ldr	r0, [pc, #196]	@ (8001e10 <main+0x96c>)
 8001d4c:	f005 f82c 	bl	8006da8 <siprintf>
					HAL_UART_Transmit(&huart2,buf1,sizeof(buf1), HAL_MAX_DELAY);
 8001d50:	f04f 33ff 	mov.w	r3, #4294967295
 8001d54:	2208      	movs	r2, #8
 8001d56:	492e      	ldr	r1, [pc, #184]	@ (8001e10 <main+0x96c>)
 8001d58:	482e      	ldr	r0, [pc, #184]	@ (8001e14 <main+0x970>)
 8001d5a:	f004 fb3b 	bl	80063d4 <HAL_UART_Transmit>
					clearArrayEle(buf1 ,8);
 8001d5e:	2108      	movs	r1, #8
 8001d60:	482b      	ldr	r0, [pc, #172]	@ (8001e10 <main+0x96c>)
 8001d62:	f000 fc49 	bl	80025f8 <clearArrayEle>
					//save the notification locally and send it to the ESP32
					sprintf(buf,"User 2 has got a new package. Your one time password is %s\n",genPassword6);
 8001d66:	4a39      	ldr	r2, [pc, #228]	@ (8001e4c <main+0x9a8>)
 8001d68:	492c      	ldr	r1, [pc, #176]	@ (8001e1c <main+0x978>)
 8001d6a:	482d      	ldr	r0, [pc, #180]	@ (8001e20 <main+0x97c>)
 8001d6c:	f005 f81c 	bl	8006da8 <siprintf>
					HAL_UART_Transmit(&huart2,buf,sizeof(buf), HAL_MAX_DELAY);
 8001d70:	f04f 33ff 	mov.w	r3, #4294967295
 8001d74:	2246      	movs	r2, #70	@ 0x46
 8001d76:	492a      	ldr	r1, [pc, #168]	@ (8001e20 <main+0x97c>)
 8001d78:	4826      	ldr	r0, [pc, #152]	@ (8001e14 <main+0x970>)
 8001d7a:	f004 fb2b 	bl	80063d4 <HAL_UART_Transmit>

					clearArrayEle(sNum ,5);
 8001d7e:	2105      	movs	r1, #5
 8001d80:	4828      	ldr	r0, [pc, #160]	@ (8001e24 <main+0x980>)
 8001d82:	f000 fc39 	bl	80025f8 <clearArrayEle>
					//allow delay to place the package and close after delay
					//__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 500);
					welcomeMsglcd();
 8001d86:	f000 fca7 	bl	80026d8 <welcomeMsglcd>
				}

				//If not a valid read display message
				if(user1Info.parcelFlag || user2Info.parcelFlag || user1Info.parcelFlag)
 8001d8a:	4b28      	ldr	r3, [pc, #160]	@ (8001e2c <main+0x988>)
 8001d8c:	78db      	ldrb	r3, [r3, #3]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d107      	bne.n	8001da2 <main+0x8fe>
 8001d92:	4b27      	ldr	r3, [pc, #156]	@ (8001e30 <main+0x98c>)
 8001d94:	78db      	ldrb	r3, [r3, #3]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d103      	bne.n	8001da2 <main+0x8fe>
 8001d9a:	4b24      	ldr	r3, [pc, #144]	@ (8001e2c <main+0x988>)
 8001d9c:	78db      	ldrb	r3, [r3, #3]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d01c      	beq.n	8001ddc <main+0x938>
				{
					newNotificationlcd("Already Occupied", " ", 2000);
 8001da2:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001da6:	492a      	ldr	r1, [pc, #168]	@ (8001e50 <main+0x9ac>)
 8001da8:	482b      	ldr	r0, [pc, #172]	@ (8001e58 <main+0x9b4>)
 8001daa:	f000 fcad 	bl	8002708 <newNotificationlcd>
					for(int i=0; i<30;i++)
 8001dae:	2300      	movs	r3, #0
 8001db0:	60bb      	str	r3, [r7, #8]
 8001db2:	e00a      	b.n	8001dca <main+0x926>
					{
						HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9);
 8001db4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001db8:	4813      	ldr	r0, [pc, #76]	@ (8001e08 <main+0x964>)
 8001dba:	f001 ff7c 	bl	8003cb6 <HAL_GPIO_TogglePin>
						HAL_Delay(100); // 10ms delay
 8001dbe:	2064      	movs	r0, #100	@ 0x64
 8001dc0:	f001 fca2 	bl	8003708 <HAL_Delay>
					for(int i=0; i<30;i++)
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	60bb      	str	r3, [r7, #8]
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	2b1d      	cmp	r3, #29
 8001dce:	ddf1      	ble.n	8001db4 <main+0x910>
					}
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001dd6:	480c      	ldr	r0, [pc, #48]	@ (8001e08 <main+0x964>)
 8001dd8:	f001 ff54 	bl	8003c84 <HAL_GPIO_WritePin>
				}
				clearArrayEle(sNum ,5);
 8001ddc:	2105      	movs	r1, #5
 8001dde:	4811      	ldr	r0, [pc, #68]	@ (8001e24 <main+0x980>)
 8001de0:	f000 fc0a 	bl	80025f8 <clearArrayEle>
				welcomeMsglcd();
 8001de4:	f000 fc78 	bl	80026d8 <welcomeMsglcd>
 8001de8:	e005      	b.n	8001df6 <main+0x952>
	  		}//end of valid user

	  		else
	  		{
	  			newNotificationlcd("Not a valid user", " ", 2000);
 8001dea:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001dee:	4918      	ldr	r1, [pc, #96]	@ (8001e50 <main+0x9ac>)
 8001df0:	481a      	ldr	r0, [pc, #104]	@ (8001e5c <main+0x9b8>)
 8001df2:	f000 fc89 	bl	8002708 <newNotificationlcd>
	  		}
	  		clearArrayEle(sNum ,5);
 8001df6:	2105      	movs	r1, #5
 8001df8:	480a      	ldr	r0, [pc, #40]	@ (8001e24 <main+0x980>)
 8001dfa:	f000 fbfd 	bl	80025f8 <clearArrayEle>
	  		welcomeMsglcd();
 8001dfe:	f000 fc6b 	bl	80026d8 <welcomeMsglcd>
  {
 8001e02:	f7ff bb9f 	b.w	8001544 <main+0xa0>
 8001e06:	bf00      	nop
 8001e08:	40020800 	.word	0x40020800
 8001e0c:	0800802c 	.word	0x0800802c
 8001e10:	200002a8 	.word	0x200002a8
 8001e14:	200001e8 	.word	0x200001e8
 8001e18:	20000058 	.word	0x20000058
 8001e1c:	08008144 	.word	0x08008144
 8001e20:	20000260 	.word	0x20000260
 8001e24:	20000240 	.word	0x20000240
 8001e28:	20000020 	.word	0x20000020
 8001e2c:	20000248 	.word	0x20000248
 8001e30:	2000024c 	.word	0x2000024c
 8001e34:	20000250 	.word	0x20000250
 8001e38:	200001a0 	.word	0x200001a0
 8001e3c:	080080d4 	.word	0x080080d4
 8001e40:	080080e8 	.word	0x080080e8
 8001e44:	08007f78 	.word	0x08007f78
 8001e48:	08008070 	.word	0x08008070
 8001e4c:	20000060 	.word	0x20000060
 8001e50:	08007f90 	.word	0x08007f90
 8001e54:	08008180 	.word	0x08008180
 8001e58:	08008188 	.word	0x08008188
 8001e5c:	080080c0 	.word	0x080080c0

08001e60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b094      	sub	sp, #80	@ 0x50
 8001e64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e66:	f107 0320 	add.w	r3, r7, #32
 8001e6a:	2230      	movs	r2, #48	@ 0x30
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f004 fffd 	bl	8006e6e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e74:	f107 030c 	add.w	r3, r7, #12
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	605a      	str	r2, [r3, #4]
 8001e7e:	609a      	str	r2, [r3, #8]
 8001e80:	60da      	str	r2, [r3, #12]
 8001e82:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e84:	2300      	movs	r3, #0
 8001e86:	60bb      	str	r3, [r7, #8]
 8001e88:	4b28      	ldr	r3, [pc, #160]	@ (8001f2c <SystemClock_Config+0xcc>)
 8001e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e8c:	4a27      	ldr	r2, [pc, #156]	@ (8001f2c <SystemClock_Config+0xcc>)
 8001e8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e92:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e94:	4b25      	ldr	r3, [pc, #148]	@ (8001f2c <SystemClock_Config+0xcc>)
 8001e96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e9c:	60bb      	str	r3, [r7, #8]
 8001e9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	607b      	str	r3, [r7, #4]
 8001ea4:	4b22      	ldr	r3, [pc, #136]	@ (8001f30 <SystemClock_Config+0xd0>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a21      	ldr	r2, [pc, #132]	@ (8001f30 <SystemClock_Config+0xd0>)
 8001eaa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001eae:	6013      	str	r3, [r2, #0]
 8001eb0:	4b1f      	ldr	r3, [pc, #124]	@ (8001f30 <SystemClock_Config+0xd0>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001eb8:	607b      	str	r3, [r7, #4]
 8001eba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ec4:	2310      	movs	r3, #16
 8001ec6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ec8:	2302      	movs	r3, #2
 8001eca:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001ed0:	2308      	movs	r3, #8
 8001ed2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001ed4:	2348      	movs	r3, #72	@ 0x48
 8001ed6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ed8:	2302      	movs	r3, #2
 8001eda:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001edc:	2307      	movs	r3, #7
 8001ede:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ee0:	f107 0320 	add.w	r3, r7, #32
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f002 fb9f 	bl	8004628 <HAL_RCC_OscConfig>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001ef0:	f001 f908 	bl	8003104 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ef4:	230f      	movs	r3, #15
 8001ef6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ef8:	2302      	movs	r3, #2
 8001efa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001efc:	2300      	movs	r3, #0
 8001efe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f04:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001f06:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f0a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001f0c:	f107 030c 	add.w	r3, r7, #12
 8001f10:	2102      	movs	r1, #2
 8001f12:	4618      	mov	r0, r3
 8001f14:	f002 fe00 	bl	8004b18 <HAL_RCC_ClockConfig>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001f1e:	f001 f8f1 	bl	8003104 <Error_Handler>
  }
}
 8001f22:	bf00      	nop
 8001f24:	3750      	adds	r7, #80	@ 0x50
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	40023800 	.word	0x40023800
 8001f30:	40007000 	.word	0x40007000

08001f34 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001f38:	4b12      	ldr	r3, [pc, #72]	@ (8001f84 <MX_I2C2_Init+0x50>)
 8001f3a:	4a13      	ldr	r2, [pc, #76]	@ (8001f88 <MX_I2C2_Init+0x54>)
 8001f3c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001f3e:	4b11      	ldr	r3, [pc, #68]	@ (8001f84 <MX_I2C2_Init+0x50>)
 8001f40:	4a12      	ldr	r2, [pc, #72]	@ (8001f8c <MX_I2C2_Init+0x58>)
 8001f42:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f44:	4b0f      	ldr	r3, [pc, #60]	@ (8001f84 <MX_I2C2_Init+0x50>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001f4a:	4b0e      	ldr	r3, [pc, #56]	@ (8001f84 <MX_I2C2_Init+0x50>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f50:	4b0c      	ldr	r3, [pc, #48]	@ (8001f84 <MX_I2C2_Init+0x50>)
 8001f52:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001f56:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f58:	4b0a      	ldr	r3, [pc, #40]	@ (8001f84 <MX_I2C2_Init+0x50>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001f5e:	4b09      	ldr	r3, [pc, #36]	@ (8001f84 <MX_I2C2_Init+0x50>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f64:	4b07      	ldr	r3, [pc, #28]	@ (8001f84 <MX_I2C2_Init+0x50>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f6a:	4b06      	ldr	r3, [pc, #24]	@ (8001f84 <MX_I2C2_Init+0x50>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001f70:	4804      	ldr	r0, [pc, #16]	@ (8001f84 <MX_I2C2_Init+0x50>)
 8001f72:	f001 febb 	bl	8003cec <HAL_I2C_Init>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001f7c:	f001 f8c2 	bl	8003104 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001f80:	bf00      	nop
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	200000f4 	.word	0x200000f4
 8001f88:	40005800 	.word	0x40005800
 8001f8c:	000186a0 	.word	0x000186a0

08001f90 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001f94:	4b17      	ldr	r3, [pc, #92]	@ (8001ff4 <MX_SPI1_Init+0x64>)
 8001f96:	4a18      	ldr	r2, [pc, #96]	@ (8001ff8 <MX_SPI1_Init+0x68>)
 8001f98:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f9a:	4b16      	ldr	r3, [pc, #88]	@ (8001ff4 <MX_SPI1_Init+0x64>)
 8001f9c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001fa0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001fa2:	4b14      	ldr	r3, [pc, #80]	@ (8001ff4 <MX_SPI1_Init+0x64>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001fa8:	4b12      	ldr	r3, [pc, #72]	@ (8001ff4 <MX_SPI1_Init+0x64>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fae:	4b11      	ldr	r3, [pc, #68]	@ (8001ff4 <MX_SPI1_Init+0x64>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001fb4:	4b0f      	ldr	r3, [pc, #60]	@ (8001ff4 <MX_SPI1_Init+0x64>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001fba:	4b0e      	ldr	r3, [pc, #56]	@ (8001ff4 <MX_SPI1_Init+0x64>)
 8001fbc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001fc0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001fc2:	4b0c      	ldr	r3, [pc, #48]	@ (8001ff4 <MX_SPI1_Init+0x64>)
 8001fc4:	2218      	movs	r2, #24
 8001fc6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fc8:	4b0a      	ldr	r3, [pc, #40]	@ (8001ff4 <MX_SPI1_Init+0x64>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fce:	4b09      	ldr	r3, [pc, #36]	@ (8001ff4 <MX_SPI1_Init+0x64>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fd4:	4b07      	ldr	r3, [pc, #28]	@ (8001ff4 <MX_SPI1_Init+0x64>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001fda:	4b06      	ldr	r3, [pc, #24]	@ (8001ff4 <MX_SPI1_Init+0x64>)
 8001fdc:	220a      	movs	r2, #10
 8001fde:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001fe0:	4804      	ldr	r0, [pc, #16]	@ (8001ff4 <MX_SPI1_Init+0x64>)
 8001fe2:	f002 ffb9 	bl	8004f58 <HAL_SPI_Init>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001fec:	f001 f88a 	bl	8003104 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001ff0:	bf00      	nop
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	20000148 	.word	0x20000148
 8001ff8:	40013000 	.word	0x40013000

08001ffc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b08e      	sub	sp, #56	@ 0x38
 8002000:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002002:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002006:	2200      	movs	r2, #0
 8002008:	601a      	str	r2, [r3, #0]
 800200a:	605a      	str	r2, [r3, #4]
 800200c:	609a      	str	r2, [r3, #8]
 800200e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002010:	f107 0320 	add.w	r3, r7, #32
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]
 8002018:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800201a:	1d3b      	adds	r3, r7, #4
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]
 8002020:	605a      	str	r2, [r3, #4]
 8002022:	609a      	str	r2, [r3, #8]
 8002024:	60da      	str	r2, [r3, #12]
 8002026:	611a      	str	r2, [r3, #16]
 8002028:	615a      	str	r2, [r3, #20]
 800202a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800202c:	4b3d      	ldr	r3, [pc, #244]	@ (8002124 <MX_TIM2_Init+0x128>)
 800202e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002032:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8002034:	4b3b      	ldr	r3, [pc, #236]	@ (8002124 <MX_TIM2_Init+0x128>)
 8002036:	2247      	movs	r2, #71	@ 0x47
 8002038:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800203a:	4b3a      	ldr	r3, [pc, #232]	@ (8002124 <MX_TIM2_Init+0x128>)
 800203c:	2200      	movs	r2, #0
 800203e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 8002040:	4b38      	ldr	r3, [pc, #224]	@ (8002124 <MX_TIM2_Init+0x128>)
 8002042:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8002046:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002048:	4b36      	ldr	r3, [pc, #216]	@ (8002124 <MX_TIM2_Init+0x128>)
 800204a:	2200      	movs	r2, #0
 800204c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800204e:	4b35      	ldr	r3, [pc, #212]	@ (8002124 <MX_TIM2_Init+0x128>)
 8002050:	2200      	movs	r2, #0
 8002052:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002054:	4833      	ldr	r0, [pc, #204]	@ (8002124 <MX_TIM2_Init+0x128>)
 8002056:	f003 fa8d 	bl	8005574 <HAL_TIM_Base_Init>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002060:	f001 f850 	bl	8003104 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002064:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002068:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800206a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800206e:	4619      	mov	r1, r3
 8002070:	482c      	ldr	r0, [pc, #176]	@ (8002124 <MX_TIM2_Init+0x128>)
 8002072:	f003 fcff 	bl	8005a74 <HAL_TIM_ConfigClockSource>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800207c:	f001 f842 	bl	8003104 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002080:	4828      	ldr	r0, [pc, #160]	@ (8002124 <MX_TIM2_Init+0x128>)
 8002082:	f003 fac6 	bl	8005612 <HAL_TIM_PWM_Init>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800208c:	f001 f83a 	bl	8003104 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002090:	2300      	movs	r3, #0
 8002092:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002094:	2300      	movs	r3, #0
 8002096:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002098:	f107 0320 	add.w	r3, r7, #32
 800209c:	4619      	mov	r1, r3
 800209e:	4821      	ldr	r0, [pc, #132]	@ (8002124 <MX_TIM2_Init+0x128>)
 80020a0:	f004 f8cc 	bl	800623c <HAL_TIMEx_MasterConfigSynchronization>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80020aa:	f001 f82b 	bl	8003104 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020ae:	2360      	movs	r3, #96	@ 0x60
 80020b0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80020b2:	2300      	movs	r3, #0
 80020b4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020b6:	2300      	movs	r3, #0
 80020b8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020ba:	2300      	movs	r3, #0
 80020bc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020be:	1d3b      	adds	r3, r7, #4
 80020c0:	2200      	movs	r2, #0
 80020c2:	4619      	mov	r1, r3
 80020c4:	4817      	ldr	r0, [pc, #92]	@ (8002124 <MX_TIM2_Init+0x128>)
 80020c6:	f003 fc13 	bl	80058f0 <HAL_TIM_PWM_ConfigChannel>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80020d0:	f001 f818 	bl	8003104 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80020d4:	1d3b      	adds	r3, r7, #4
 80020d6:	2204      	movs	r2, #4
 80020d8:	4619      	mov	r1, r3
 80020da:	4812      	ldr	r0, [pc, #72]	@ (8002124 <MX_TIM2_Init+0x128>)
 80020dc:	f003 fc08 	bl	80058f0 <HAL_TIM_PWM_ConfigChannel>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80020e6:	f001 f80d 	bl	8003104 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80020ea:	1d3b      	adds	r3, r7, #4
 80020ec:	2208      	movs	r2, #8
 80020ee:	4619      	mov	r1, r3
 80020f0:	480c      	ldr	r0, [pc, #48]	@ (8002124 <MX_TIM2_Init+0x128>)
 80020f2:	f003 fbfd 	bl	80058f0 <HAL_TIM_PWM_ConfigChannel>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d001      	beq.n	8002100 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 80020fc:	f001 f802 	bl	8003104 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002100:	1d3b      	adds	r3, r7, #4
 8002102:	220c      	movs	r2, #12
 8002104:	4619      	mov	r1, r3
 8002106:	4807      	ldr	r0, [pc, #28]	@ (8002124 <MX_TIM2_Init+0x128>)
 8002108:	f003 fbf2 	bl	80058f0 <HAL_TIM_PWM_ConfigChannel>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 8002112:	f000 fff7 	bl	8003104 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002116:	4803      	ldr	r0, [pc, #12]	@ (8002124 <MX_TIM2_Init+0x128>)
 8002118:	f001 f8d2 	bl	80032c0 <HAL_TIM_MspPostInit>

}
 800211c:	bf00      	nop
 800211e:	3738      	adds	r7, #56	@ 0x38
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	200001a0 	.word	0x200001a0

08002128 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800212c:	4b11      	ldr	r3, [pc, #68]	@ (8002174 <MX_USART2_UART_Init+0x4c>)
 800212e:	4a12      	ldr	r2, [pc, #72]	@ (8002178 <MX_USART2_UART_Init+0x50>)
 8002130:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002132:	4b10      	ldr	r3, [pc, #64]	@ (8002174 <MX_USART2_UART_Init+0x4c>)
 8002134:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002138:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800213a:	4b0e      	ldr	r3, [pc, #56]	@ (8002174 <MX_USART2_UART_Init+0x4c>)
 800213c:	2200      	movs	r2, #0
 800213e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002140:	4b0c      	ldr	r3, [pc, #48]	@ (8002174 <MX_USART2_UART_Init+0x4c>)
 8002142:	2200      	movs	r2, #0
 8002144:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002146:	4b0b      	ldr	r3, [pc, #44]	@ (8002174 <MX_USART2_UART_Init+0x4c>)
 8002148:	2200      	movs	r2, #0
 800214a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800214c:	4b09      	ldr	r3, [pc, #36]	@ (8002174 <MX_USART2_UART_Init+0x4c>)
 800214e:	220c      	movs	r2, #12
 8002150:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002152:	4b08      	ldr	r3, [pc, #32]	@ (8002174 <MX_USART2_UART_Init+0x4c>)
 8002154:	2200      	movs	r2, #0
 8002156:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002158:	4b06      	ldr	r3, [pc, #24]	@ (8002174 <MX_USART2_UART_Init+0x4c>)
 800215a:	2200      	movs	r2, #0
 800215c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800215e:	4805      	ldr	r0, [pc, #20]	@ (8002174 <MX_USART2_UART_Init+0x4c>)
 8002160:	f004 f8e8 	bl	8006334 <HAL_UART_Init>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800216a:	f000 ffcb 	bl	8003104 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800216e:	bf00      	nop
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	200001e8 	.word	0x200001e8
 8002178:	40004400 	.word	0x40004400

0800217c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b08c      	sub	sp, #48	@ 0x30
 8002180:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002182:	f107 031c 	add.w	r3, r7, #28
 8002186:	2200      	movs	r2, #0
 8002188:	601a      	str	r2, [r3, #0]
 800218a:	605a      	str	r2, [r3, #4]
 800218c:	609a      	str	r2, [r3, #8]
 800218e:	60da      	str	r2, [r3, #12]
 8002190:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002192:	2300      	movs	r3, #0
 8002194:	61bb      	str	r3, [r7, #24]
 8002196:	4b63      	ldr	r3, [pc, #396]	@ (8002324 <MX_GPIO_Init+0x1a8>)
 8002198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800219a:	4a62      	ldr	r2, [pc, #392]	@ (8002324 <MX_GPIO_Init+0x1a8>)
 800219c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80021a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80021a2:	4b60      	ldr	r3, [pc, #384]	@ (8002324 <MX_GPIO_Init+0x1a8>)
 80021a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021aa:	61bb      	str	r3, [r7, #24]
 80021ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ae:	2300      	movs	r3, #0
 80021b0:	617b      	str	r3, [r7, #20]
 80021b2:	4b5c      	ldr	r3, [pc, #368]	@ (8002324 <MX_GPIO_Init+0x1a8>)
 80021b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021b6:	4a5b      	ldr	r2, [pc, #364]	@ (8002324 <MX_GPIO_Init+0x1a8>)
 80021b8:	f043 0301 	orr.w	r3, r3, #1
 80021bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80021be:	4b59      	ldr	r3, [pc, #356]	@ (8002324 <MX_GPIO_Init+0x1a8>)
 80021c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	617b      	str	r3, [r7, #20]
 80021c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021ca:	2300      	movs	r3, #0
 80021cc:	613b      	str	r3, [r7, #16]
 80021ce:	4b55      	ldr	r3, [pc, #340]	@ (8002324 <MX_GPIO_Init+0x1a8>)
 80021d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d2:	4a54      	ldr	r2, [pc, #336]	@ (8002324 <MX_GPIO_Init+0x1a8>)
 80021d4:	f043 0304 	orr.w	r3, r3, #4
 80021d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80021da:	4b52      	ldr	r3, [pc, #328]	@ (8002324 <MX_GPIO_Init+0x1a8>)
 80021dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021de:	f003 0304 	and.w	r3, r3, #4
 80021e2:	613b      	str	r3, [r7, #16]
 80021e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021e6:	2300      	movs	r3, #0
 80021e8:	60fb      	str	r3, [r7, #12]
 80021ea:	4b4e      	ldr	r3, [pc, #312]	@ (8002324 <MX_GPIO_Init+0x1a8>)
 80021ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ee:	4a4d      	ldr	r2, [pc, #308]	@ (8002324 <MX_GPIO_Init+0x1a8>)
 80021f0:	f043 0302 	orr.w	r3, r3, #2
 80021f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80021f6:	4b4b      	ldr	r3, [pc, #300]	@ (8002324 <MX_GPIO_Init+0x1a8>)
 80021f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021fa:	f003 0302 	and.w	r3, r3, #2
 80021fe:	60fb      	str	r3, [r7, #12]
 8002200:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002202:	2300      	movs	r3, #0
 8002204:	60bb      	str	r3, [r7, #8]
 8002206:	4b47      	ldr	r3, [pc, #284]	@ (8002324 <MX_GPIO_Init+0x1a8>)
 8002208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800220a:	4a46      	ldr	r2, [pc, #280]	@ (8002324 <MX_GPIO_Init+0x1a8>)
 800220c:	f043 0310 	orr.w	r3, r3, #16
 8002210:	6313      	str	r3, [r2, #48]	@ 0x30
 8002212:	4b44      	ldr	r3, [pc, #272]	@ (8002324 <MX_GPIO_Init+0x1a8>)
 8002214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002216:	f003 0310 	and.w	r3, r3, #16
 800221a:	60bb      	str	r3, [r7, #8]
 800221c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800221e:	2300      	movs	r3, #0
 8002220:	607b      	str	r3, [r7, #4]
 8002222:	4b40      	ldr	r3, [pc, #256]	@ (8002324 <MX_GPIO_Init+0x1a8>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002226:	4a3f      	ldr	r2, [pc, #252]	@ (8002324 <MX_GPIO_Init+0x1a8>)
 8002228:	f043 0308 	orr.w	r3, r3, #8
 800222c:	6313      	str	r3, [r2, #48]	@ 0x30
 800222e:	4b3d      	ldr	r3, [pc, #244]	@ (8002324 <MX_GPIO_Init+0x1a8>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002232:	f003 0308 	and.w	r3, r3, #8
 8002236:	607b      	str	r3, [r7, #4]
 8002238:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800223a:	2200      	movs	r2, #0
 800223c:	2110      	movs	r1, #16
 800223e:	483a      	ldr	r0, [pc, #232]	@ (8002328 <MX_GPIO_Init+0x1ac>)
 8002240:	f001 fd20 	bl	8003c84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8002244:	2200      	movs	r2, #0
 8002246:	f44f 717c 	mov.w	r1, #1008	@ 0x3f0
 800224a:	4838      	ldr	r0, [pc, #224]	@ (800232c <MX_GPIO_Init+0x1b0>)
 800224c:	f001 fd1a 	bl	8003c84 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, R1_pin_Pin|R2_pin_Pin|R3_pin_Pin|R4_pin_Pin, GPIO_PIN_RESET);
 8002250:	2200      	movs	r2, #0
 8002252:	210f      	movs	r1, #15
 8002254:	4836      	ldr	r0, [pc, #216]	@ (8002330 <MX_GPIO_Init+0x1b4>)
 8002256:	f001 fd15 	bl	8003c84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 800225a:	2200      	movs	r2, #0
 800225c:	2180      	movs	r1, #128	@ 0x80
 800225e:	4835      	ldr	r0, [pc, #212]	@ (8002334 <MX_GPIO_Init+0x1b8>)
 8002260:	f001 fd10 	bl	8003c84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8002264:	2200      	movs	r2, #0
 8002266:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800226a:	4833      	ldr	r0, [pc, #204]	@ (8002338 <MX_GPIO_Init+0x1bc>)
 800226c:	f001 fd0a 	bl	8003c84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002270:	2310      	movs	r3, #16
 8002272:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002274:	2301      	movs	r3, #1
 8002276:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002278:	2300      	movs	r3, #0
 800227a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800227c:	2300      	movs	r3, #0
 800227e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002280:	f107 031c 	add.w	r3, r7, #28
 8002284:	4619      	mov	r1, r3
 8002286:	4828      	ldr	r0, [pc, #160]	@ (8002328 <MX_GPIO_Init+0x1ac>)
 8002288:	f001 fb48 	bl	800391c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 PC6 PC7
                           PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 800228c:	f44f 737c 	mov.w	r3, #1008	@ 0x3f0
 8002290:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002292:	2301      	movs	r3, #1
 8002294:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002296:	2300      	movs	r3, #0
 8002298:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800229a:	2300      	movs	r3, #0
 800229c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800229e:	f107 031c 	add.w	r3, r7, #28
 80022a2:	4619      	mov	r1, r3
 80022a4:	4821      	ldr	r0, [pc, #132]	@ (800232c <MX_GPIO_Init+0x1b0>)
 80022a6:	f001 fb39 	bl	800391c <HAL_GPIO_Init>

  /*Configure GPIO pins : R1_pin_Pin R2_pin_Pin R3_pin_Pin R4_pin_Pin */
  GPIO_InitStruct.Pin = R1_pin_Pin|R2_pin_Pin|R3_pin_Pin|R4_pin_Pin;
 80022aa:	230f      	movs	r3, #15
 80022ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022ae:	2301      	movs	r3, #1
 80022b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b2:	2300      	movs	r3, #0
 80022b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b6:	2300      	movs	r3, #0
 80022b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022ba:	f107 031c 	add.w	r3, r7, #28
 80022be:	4619      	mov	r1, r3
 80022c0:	481b      	ldr	r0, [pc, #108]	@ (8002330 <MX_GPIO_Init+0x1b4>)
 80022c2:	f001 fb2b 	bl	800391c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80022c6:	2380      	movs	r3, #128	@ 0x80
 80022c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022ca:	2301      	movs	r3, #1
 80022cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ce:	2300      	movs	r3, #0
 80022d0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d2:	2300      	movs	r3, #0
 80022d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022d6:	f107 031c 	add.w	r3, r7, #28
 80022da:	4619      	mov	r1, r3
 80022dc:	4815      	ldr	r0, [pc, #84]	@ (8002334 <MX_GPIO_Init+0x1b8>)
 80022de:	f001 fb1d 	bl	800391c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80022e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80022e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022e8:	2301      	movs	r3, #1
 80022ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ec:	2300      	movs	r3, #0
 80022ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f0:	2300      	movs	r3, #0
 80022f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022f4:	f107 031c 	add.w	r3, r7, #28
 80022f8:	4619      	mov	r1, r3
 80022fa:	480f      	ldr	r0, [pc, #60]	@ (8002338 <MX_GPIO_Init+0x1bc>)
 80022fc:	f001 fb0e 	bl	800391c <HAL_GPIO_Init>

  /*Configure GPIO pins : C1_pin_Pin C2_pin_Pin C4_pin_Pin C3_pin_Pin */
  GPIO_InitStruct.Pin = C1_pin_Pin|C2_pin_Pin|C4_pin_Pin|C3_pin_Pin;
 8002300:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 8002304:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002306:	2300      	movs	r3, #0
 8002308:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800230a:	2302      	movs	r3, #2
 800230c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800230e:	f107 031c 	add.w	r3, r7, #28
 8002312:	4619      	mov	r1, r3
 8002314:	4806      	ldr	r0, [pc, #24]	@ (8002330 <MX_GPIO_Init+0x1b4>)
 8002316:	f001 fb01 	bl	800391c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800231a:	bf00      	nop
 800231c:	3730      	adds	r7, #48	@ 0x30
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	40023800 	.word	0x40023800
 8002328:	40020000 	.word	0x40020000
 800232c:	40020800 	.word	0x40020800
 8002330:	40020400 	.word	0x40020400
 8002334:	40021000 	.word	0x40021000
 8002338:	40020c00 	.word	0x40020c00

0800233c <scanKeys>:



//FUnction to scan keys from keypad
char scanKeys(void)
{
 800233c:	b590      	push	{r4, r7, lr}
 800233e:	b095      	sub	sp, #84	@ 0x54
 8002340:	af00      	add	r7, sp, #0
    // Set all rows LOW initially
    HAL_GPIO_WritePin(R1_pin_GPIO_Port, R1_pin_Pin | R2_pin_Pin | R3_pin_Pin | R4_pin_Pin, GPIO_PIN_RESET);
 8002342:	2200      	movs	r2, #0
 8002344:	210f      	movs	r1, #15
 8002346:	4857      	ldr	r0, [pc, #348]	@ (80024a4 <scanKeys+0x168>)
 8002348:	f001 fc9c 	bl	8003c84 <HAL_GPIO_WritePin>
    HAL_Delay(1);  // Small delay for stability
 800234c:	2001      	movs	r0, #1
 800234e:	f001 f9db 	bl	8003708 <HAL_Delay>

    char keypad[4][4] = {
 8002352:	4b55      	ldr	r3, [pc, #340]	@ (80024a8 <scanKeys+0x16c>)
 8002354:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 8002358:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800235a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        {'1', '2', '3', 'A'},
        {'4', '5', '6', 'B'},
        {'7', '8', '9', 'C'},
        {'*', '0', '#', 'D'}
    };
    char lastKey = 0;  // Stores the last key pressed, initialized to no key
 800235e:	2300      	movs	r3, #0
 8002360:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
    char currentKey = 0;  // Stores the currently detected key
 8002364:	2300      	movs	r3, #0
 8002366:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    char noKey = 0;  // No key pressed condition
 800236a:	2300      	movs	r3, #0
 800236c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42


    GPIO_TypeDef* row_ports[4] = {R1_pin_GPIO_Port, R2_pin_GPIO_Port, R3_pin_GPIO_Port, R4_pin_GPIO_Port};
 8002370:	4b4e      	ldr	r3, [pc, #312]	@ (80024ac <scanKeys+0x170>)
 8002372:	f107 0420 	add.w	r4, r7, #32
 8002376:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002378:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    uint16_t row_pins[4] = {R1_pin_Pin, R2_pin_Pin, R3_pin_Pin, R4_pin_Pin};
 800237c:	4a4c      	ldr	r2, [pc, #304]	@ (80024b0 <scanKeys+0x174>)
 800237e:	f107 0318 	add.w	r3, r7, #24
 8002382:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002386:	e883 0003 	stmia.w	r3, {r0, r1}

    GPIO_TypeDef* col_ports[4] = {C1_pin_GPIO_Port, C2_pin_GPIO_Port, C3_pin_GPIO_Port, C4_pin_GPIO_Port};
 800238a:	4b48      	ldr	r3, [pc, #288]	@ (80024ac <scanKeys+0x170>)
 800238c:	f107 0408 	add.w	r4, r7, #8
 8002390:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002392:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    uint16_t col_pins[4] = {C1_pin_Pin, C2_pin_Pin, C3_pin_Pin, C4_pin_Pin};
 8002396:	4a47      	ldr	r2, [pc, #284]	@ (80024b4 <scanKeys+0x178>)
 8002398:	463b      	mov	r3, r7
 800239a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800239e:	e883 0003 	stmia.w	r3, {r0, r1}

    // Read the keypad in rows
    for (int row = 0; row < 4; row++)
 80023a2:	2300      	movs	r3, #0
 80023a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80023a6:	e068      	b.n	800247a <scanKeys+0x13e>
    {
        // Set all rows low, then one row high at a time
        // Reset all rows to low
        HAL_GPIO_WritePin(row_ports[row], row_pins[row], GPIO_PIN_RESET);
 80023a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	3350      	adds	r3, #80	@ 0x50
 80023ae:	443b      	add	r3, r7
 80023b0:	f853 0c30 	ldr.w	r0, [r3, #-48]
 80023b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80023b6:	005b      	lsls	r3, r3, #1
 80023b8:	3350      	adds	r3, #80	@ 0x50
 80023ba:	443b      	add	r3, r7
 80023bc:	f833 3c38 	ldrh.w	r3, [r3, #-56]
 80023c0:	2200      	movs	r2, #0
 80023c2:	4619      	mov	r1, r3
 80023c4:	f001 fc5e 	bl	8003c84 <HAL_GPIO_WritePin>
        // Set one row high
        HAL_GPIO_WritePin(row_ports[row], row_pins[row], GPIO_PIN_SET);
 80023c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	3350      	adds	r3, #80	@ 0x50
 80023ce:	443b      	add	r3, r7
 80023d0:	f853 0c30 	ldr.w	r0, [r3, #-48]
 80023d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80023d6:	005b      	lsls	r3, r3, #1
 80023d8:	3350      	adds	r3, #80	@ 0x50
 80023da:	443b      	add	r3, r7
 80023dc:	f833 3c38 	ldrh.w	r3, [r3, #-56]
 80023e0:	2201      	movs	r2, #1
 80023e2:	4619      	mov	r1, r3
 80023e4:	f001 fc4e 	bl	8003c84 <HAL_GPIO_WritePin>
        HAL_Delay(1);  // Short delay to stabilize
 80023e8:	2001      	movs	r0, #1
 80023ea:	f001 f98d 	bl	8003708 <HAL_Delay>

        // Check each column for key press
        for (int col = 0; col < 4; col++)
 80023ee:	2300      	movs	r3, #0
 80023f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80023f2:	e02c      	b.n	800244e <scanKeys+0x112>
        {
            if (HAL_GPIO_ReadPin(col_ports[col], col_pins[col]) == GPIO_PIN_SET)
 80023f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	3350      	adds	r3, #80	@ 0x50
 80023fa:	443b      	add	r3, r7
 80023fc:	f853 2c48 	ldr.w	r2, [r3, #-72]
 8002400:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002402:	005b      	lsls	r3, r3, #1
 8002404:	3350      	adds	r3, #80	@ 0x50
 8002406:	443b      	add	r3, r7
 8002408:	f833 3c50 	ldrh.w	r3, [r3, #-80]
 800240c:	4619      	mov	r1, r3
 800240e:	4610      	mov	r0, r2
 8002410:	f001 fc20 	bl	8003c54 <HAL_GPIO_ReadPin>
 8002414:	4603      	mov	r3, r0
 8002416:	2b01      	cmp	r3, #1
 8002418:	d116      	bne.n	8002448 <scanKeys+0x10c>
            {
                currentKey = keypad[row][col];  // Store the current key
 800241a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	3350      	adds	r3, #80	@ 0x50
 8002420:	19da      	adds	r2, r3, r7
 8002422:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002424:	4413      	add	r3, r2
 8002426:	3b20      	subs	r3, #32
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

                // Register the key press only if it is not already registered
                if (currentKey != lastKey)
 800242e:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8002432:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8002436:	429a      	cmp	r2, r3
 8002438:	d006      	beq.n	8002448 <scanKeys+0x10c>
                {
                    lastKey = currentKey;  // Update lastKey to current key
 800243a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800243e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
                    return currentKey;  // Immediately return the key that is pressed
 8002442:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002446:	e028      	b.n	800249a <scanKeys+0x15e>
        for (int col = 0; col < 4; col++)
 8002448:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800244a:	3301      	adds	r3, #1
 800244c:	647b      	str	r3, [r7, #68]	@ 0x44
 800244e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002450:	2b03      	cmp	r3, #3
 8002452:	ddcf      	ble.n	80023f4 <scanKeys+0xb8>
                }
            }
        }
        HAL_GPIO_WritePin(row_ports[row], row_pins[row], GPIO_PIN_RESET);
 8002454:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	3350      	adds	r3, #80	@ 0x50
 800245a:	443b      	add	r3, r7
 800245c:	f853 0c30 	ldr.w	r0, [r3, #-48]
 8002460:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002462:	005b      	lsls	r3, r3, #1
 8002464:	3350      	adds	r3, #80	@ 0x50
 8002466:	443b      	add	r3, r7
 8002468:	f833 3c38 	ldrh.w	r3, [r3, #-56]
 800246c:	2200      	movs	r2, #0
 800246e:	4619      	mov	r1, r3
 8002470:	f001 fc08 	bl	8003c84 <HAL_GPIO_WritePin>
    for (int row = 0; row < 4; row++)
 8002474:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002476:	3301      	adds	r3, #1
 8002478:	64bb      	str	r3, [r7, #72]	@ 0x48
 800247a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800247c:	2b03      	cmp	r3, #3
 800247e:	dd93      	ble.n	80023a8 <scanKeys+0x6c>
    }
    HAL_GPIO_WritePin(R1_pin_GPIO_Port, R1_pin_Pin | R2_pin_Pin | R3_pin_Pin | R4_pin_Pin, GPIO_PIN_RESET);
 8002480:	2200      	movs	r2, #0
 8002482:	210f      	movs	r1, #15
 8002484:	4807      	ldr	r0, [pc, #28]	@ (80024a4 <scanKeys+0x168>)
 8002486:	f001 fbfd 	bl	8003c84 <HAL_GPIO_WritePin>
    // If no key is pressed, return the "no press" state
    if (currentKey == noKey)
 800248a:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 800248e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8002492:	429a      	cmp	r2, r3
 8002494:	d101      	bne.n	800249a <scanKeys+0x15e>
    {
        return '\0';  // Return '0' or some indicator to show no key is pressed
 8002496:	2300      	movs	r3, #0
 8002498:	e7ff      	b.n	800249a <scanKeys+0x15e>
    }
}
 800249a:	4618      	mov	r0, r3
 800249c:	3754      	adds	r7, #84	@ 0x54
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd90      	pop	{r4, r7, pc}
 80024a2:	bf00      	nop
 80024a4:	40020400 	.word	0x40020400
 80024a8:	0800819c 	.word	0x0800819c
 80024ac:	080081ac 	.word	0x080081ac
 80024b0:	080081bc 	.word	0x080081bc
 80024b4:	080081c4 	.word	0x080081c4

080024b8 <readtagsFromRDR1>:


//Function to read from Tag reader1
uchar readtagsFromRDR1 ()
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
	uchar readSucess;
	uchar status;
	Write_1_MFRC522(Status2Reg, 0);
 80024be:	2100      	movs	r1, #0
 80024c0:	2008      	movs	r0, #8
 80024c2:	f7fe fb39 	bl	8000b38 <Write_1_MFRC522>
	Read_1_MFRC522(Status2Reg);
 80024c6:	2008      	movs	r0, #8
 80024c8:	f7fe fb5c 	bl	8000b84 <Read_1_MFRC522>
	readSucess = MFRC522_1_Request( PICC_REQIDL , str);
 80024cc:	4917      	ldr	r1, [pc, #92]	@ (800252c <readtagsFromRDR1+0x74>)
 80024ce:	2026      	movs	r0, #38	@ 0x26
 80024d0:	f7fe fcd9 	bl	8000e86 <MFRC522_1_Request>
 80024d4:	4603      	mov	r3, r0
 80024d6:	71fb      	strb	r3, [r7, #7]
	if(readSucess == MI_OK)
 80024d8:	79fb      	ldrb	r3, [r7, #7]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d11a      	bne.n	8002514 <readtagsFromRDR1+0x5c>
	{
	  readSucess = MFRC522_1_Anticoll(str);
 80024de:	4813      	ldr	r0, [pc, #76]	@ (800252c <readtagsFromRDR1+0x74>)
 80024e0:	f7fe fcf6 	bl	8000ed0 <MFRC522_1_Anticoll>
 80024e4:	4603      	mov	r3, r0
 80024e6:	71fb      	strb	r3, [r7, #7]
	  if(readSucess == MI_OK)
 80024e8:	79fb      	ldrb	r3, [r7, #7]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d112      	bne.n	8002514 <readtagsFromRDR1+0x5c>
	  {
		  memcpy(sNum,str,5);
 80024ee:	4b10      	ldr	r3, [pc, #64]	@ (8002530 <readtagsFromRDR1+0x78>)
 80024f0:	4a0e      	ldr	r2, [pc, #56]	@ (800252c <readtagsFromRDR1+0x74>)
 80024f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80024f6:	6018      	str	r0, [r3, #0]
 80024f8:	3304      	adds	r3, #4
 80024fa:	7019      	strb	r1, [r3, #0]
		  status = MFRC522_1_SelectTag(sNum);
 80024fc:	480c      	ldr	r0, [pc, #48]	@ (8002530 <readtagsFromRDR1+0x78>)
 80024fe:	f7fe fd6d 	bl	8000fdc <MFRC522_1_SelectTag>
 8002502:	4603      	mov	r3, r0
 8002504:	71bb      	strb	r3, [r7, #6]
		  if(status > 0)
 8002506:	79bb      	ldrb	r3, [r7, #6]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d003      	beq.n	8002514 <readtagsFromRDR1+0x5c>
		  {
			  MFRC522_1_Halt();// Halt previous card
 800250c:	f7fe fda8 	bl	8001060 <MFRC522_1_Halt>
			  MFRC522_1_StopCrypto1();
 8002510:	f7fe fdc1 	bl	8001096 <MFRC522_1_StopCrypto1>

		  }
	  }
	}
	MFRC522_1_Halt();// Halt previous card
 8002514:	f7fe fda4 	bl	8001060 <MFRC522_1_Halt>
	MFRC522_1_StopCrypto1();
 8002518:	f7fe fdbd 	bl	8001096 <MFRC522_1_StopCrypto1>
	HAL_Delay(100);
 800251c:	2064      	movs	r0, #100	@ 0x64
 800251e:	f001 f8f3 	bl	8003708 <HAL_Delay>
	return readSucess;
 8002522:	79fb      	ldrb	r3, [r7, #7]
}
 8002524:	4618      	mov	r0, r3
 8002526:	3708      	adds	r7, #8
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	20000230 	.word	0x20000230
 8002530:	20000240 	.word	0x20000240

08002534 <readtagsFromRDR2>:

//Function to read from Tag reader2
uchar readtagsFromRDR2 ()
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
	uchar readSucess;
	uchar status;
	Write_2_MFRC522(Status2Reg, 0);
 800253a:	2100      	movs	r1, #0
 800253c:	2008      	movs	r0, #8
 800253e:	f7fe f835 	bl	80005ac <Write_2_MFRC522>
	Read_2_MFRC522(Status2Reg);
 8002542:	2008      	movs	r0, #8
 8002544:	f7fe f858 	bl	80005f8 <Read_2_MFRC522>
	readSucess = MFRC522_2_Request( PICC_REQIDL , str);
 8002548:	4917      	ldr	r1, [pc, #92]	@ (80025a8 <readtagsFromRDR2+0x74>)
 800254a:	2026      	movs	r0, #38	@ 0x26
 800254c:	f7fe f9c9 	bl	80008e2 <MFRC522_2_Request>
 8002550:	4603      	mov	r3, r0
 8002552:	71fb      	strb	r3, [r7, #7]
	if(readSucess == MI_OK)
 8002554:	79fb      	ldrb	r3, [r7, #7]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d11a      	bne.n	8002590 <readtagsFromRDR2+0x5c>
	{
      readSucess = MFRC522_2_Anticoll(str);
 800255a:	4813      	ldr	r0, [pc, #76]	@ (80025a8 <readtagsFromRDR2+0x74>)
 800255c:	f7fe f9e6 	bl	800092c <MFRC522_2_Anticoll>
 8002560:	4603      	mov	r3, r0
 8002562:	71fb      	strb	r3, [r7, #7]
	  if(readSucess == MI_OK)
 8002564:	79fb      	ldrb	r3, [r7, #7]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d112      	bne.n	8002590 <readtagsFromRDR2+0x5c>
	  {
		  memcpy(sNum,str,5);
 800256a:	4b10      	ldr	r3, [pc, #64]	@ (80025ac <readtagsFromRDR2+0x78>)
 800256c:	4a0e      	ldr	r2, [pc, #56]	@ (80025a8 <readtagsFromRDR2+0x74>)
 800256e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002572:	6018      	str	r0, [r3, #0]
 8002574:	3304      	adds	r3, #4
 8002576:	7019      	strb	r1, [r3, #0]
		  status = MFRC522_2_SelectTag(sNum);
 8002578:	480c      	ldr	r0, [pc, #48]	@ (80025ac <readtagsFromRDR2+0x78>)
 800257a:	f7fe fa5d 	bl	8000a38 <MFRC522_2_SelectTag>
 800257e:	4603      	mov	r3, r0
 8002580:	71bb      	strb	r3, [r7, #6]
		  if(status > 0)
 8002582:	79bb      	ldrb	r3, [r7, #6]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d003      	beq.n	8002590 <readtagsFromRDR2+0x5c>
		  {
			  MFRC522_2_Halt();// Halt previous card
 8002588:	f7fe fa98 	bl	8000abc <MFRC522_2_Halt>
			  MFRC522_2_StopCrypto1();
 800258c:	f7fe fab1 	bl	8000af2 <MFRC522_2_StopCrypto1>

		  }
	  }
	}
	MFRC522_2_Halt();// Halt previous card
 8002590:	f7fe fa94 	bl	8000abc <MFRC522_2_Halt>
	MFRC522_2_StopCrypto1();
 8002594:	f7fe faad 	bl	8000af2 <MFRC522_2_StopCrypto1>
	HAL_Delay(100);
 8002598:	2064      	movs	r0, #100	@ 0x64
 800259a:	f001 f8b5 	bl	8003708 <HAL_Delay>
	return readSucess;
 800259e:	79fb      	ldrb	r3, [r7, #7]
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3708      	adds	r7, #8
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	20000230 	.word	0x20000230
 80025ac:	20000240 	.word	0x20000240

080025b0 <compareIntArrays>:

//function to compare two int8 arrays
uchar compareIntArrays(uchar *arr1, uchar *arr2, uchar size)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b087      	sub	sp, #28
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	4613      	mov	r3, r2
 80025bc:	71fb      	strb	r3, [r7, #7]
    for (uchar i = 0; i < size; i++) {
 80025be:	2300      	movs	r3, #0
 80025c0:	75fb      	strb	r3, [r7, #23]
 80025c2:	e00e      	b.n	80025e2 <compareIntArrays+0x32>
        if (arr1[i] != arr2[i]) {
 80025c4:	7dfb      	ldrb	r3, [r7, #23]
 80025c6:	68fa      	ldr	r2, [r7, #12]
 80025c8:	4413      	add	r3, r2
 80025ca:	781a      	ldrb	r2, [r3, #0]
 80025cc:	7dfb      	ldrb	r3, [r7, #23]
 80025ce:	68b9      	ldr	r1, [r7, #8]
 80025d0:	440b      	add	r3, r1
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d001      	beq.n	80025dc <compareIntArrays+0x2c>
            return 0; // Arrays are different
 80025d8:	2300      	movs	r3, #0
 80025da:	e007      	b.n	80025ec <compareIntArrays+0x3c>
    for (uchar i = 0; i < size; i++) {
 80025dc:	7dfb      	ldrb	r3, [r7, #23]
 80025de:	3301      	adds	r3, #1
 80025e0:	75fb      	strb	r3, [r7, #23]
 80025e2:	7dfa      	ldrb	r2, [r7, #23]
 80025e4:	79fb      	ldrb	r3, [r7, #7]
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d3ec      	bcc.n	80025c4 <compareIntArrays+0x14>
        }
    }
    return 1; // Arrays are equal
 80025ea:	2301      	movs	r3, #1
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	371c      	adds	r7, #28
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <clearArrayEle>:

//Function to clear int8 array elements
void clearArrayEle (uchar *arrPtr, uchar size)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b085      	sub	sp, #20
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	460b      	mov	r3, r1
 8002602:	70fb      	strb	r3, [r7, #3]
	for(uchar i = 0; i < size; i++)
 8002604:	2300      	movs	r3, #0
 8002606:	73fb      	strb	r3, [r7, #15]
 8002608:	e007      	b.n	800261a <clearArrayEle+0x22>
	{
		arrPtr[i]=0;
 800260a:	7bfb      	ldrb	r3, [r7, #15]
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	4413      	add	r3, r2
 8002610:	2200      	movs	r2, #0
 8002612:	701a      	strb	r2, [r3, #0]
	for(uchar i = 0; i < size; i++)
 8002614:	7bfb      	ldrb	r3, [r7, #15]
 8002616:	3301      	adds	r3, #1
 8002618:	73fb      	strb	r3, [r7, #15]
 800261a:	7bfa      	ldrb	r2, [r7, #15]
 800261c:	78fb      	ldrb	r3, [r7, #3]
 800261e:	429a      	cmp	r2, r3
 8002620:	d3f3      	bcc.n	800260a <clearArrayEle+0x12>
	}
}
 8002622:	bf00      	nop
 8002624:	bf00      	nop
 8002626:	3714      	adds	r7, #20
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr

08002630 <checkValidUser>:

//Function to check a valid user and display message
uchar checkValidUser(uchar *arr1, uchar *arr2, uchar *arr3, uchar *arr4, uchar *arr5, uchar *arr6, uchar size)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b086      	sub	sp, #24
 8002634:	af00      	add	r7, sp, #0
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	60b9      	str	r1, [r7, #8]
 800263a:	607a      	str	r2, [r7, #4]
 800263c:	603b      	str	r3, [r7, #0]
	uchar valid1 = 0;
 800263e:	2300      	movs	r3, #0
 8002640:	75fb      	strb	r3, [r7, #23]
	uchar valid2 = 0;
 8002642:	2300      	movs	r3, #0
 8002644:	75bb      	strb	r3, [r7, #22]
	uchar valid3 = 0;
 8002646:	2300      	movs	r3, #0
 8002648:	757b      	strb	r3, [r7, #21]
	uchar valid4 = 0;
 800264a:	2300      	movs	r3, #0
 800264c:	753b      	strb	r3, [r7, #20]
	uchar valid5 = 0;
 800264e:	2300      	movs	r3, #0
 8002650:	74fb      	strb	r3, [r7, #19]

	valid1 = compareIntArrays(arr1, arr2, size);
 8002652:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002656:	461a      	mov	r2, r3
 8002658:	68b9      	ldr	r1, [r7, #8]
 800265a:	68f8      	ldr	r0, [r7, #12]
 800265c:	f7ff ffa8 	bl	80025b0 <compareIntArrays>
 8002660:	4603      	mov	r3, r0
 8002662:	75fb      	strb	r3, [r7, #23]
	valid2 = compareIntArrays(arr1, arr3, size);
 8002664:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002668:	461a      	mov	r2, r3
 800266a:	6879      	ldr	r1, [r7, #4]
 800266c:	68f8      	ldr	r0, [r7, #12]
 800266e:	f7ff ff9f 	bl	80025b0 <compareIntArrays>
 8002672:	4603      	mov	r3, r0
 8002674:	75bb      	strb	r3, [r7, #22]
	valid3 = compareIntArrays(arr1, arr4, size);
 8002676:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800267a:	461a      	mov	r2, r3
 800267c:	6839      	ldr	r1, [r7, #0]
 800267e:	68f8      	ldr	r0, [r7, #12]
 8002680:	f7ff ff96 	bl	80025b0 <compareIntArrays>
 8002684:	4603      	mov	r3, r0
 8002686:	757b      	strb	r3, [r7, #21]
	valid4 = compareIntArrays(arr1, arr5, size);
 8002688:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800268c:	461a      	mov	r2, r3
 800268e:	6a39      	ldr	r1, [r7, #32]
 8002690:	68f8      	ldr	r0, [r7, #12]
 8002692:	f7ff ff8d 	bl	80025b0 <compareIntArrays>
 8002696:	4603      	mov	r3, r0
 8002698:	753b      	strb	r3, [r7, #20]
	valid5 = compareIntArrays(arr1, arr6, size);
 800269a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800269e:	461a      	mov	r2, r3
 80026a0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80026a2:	68f8      	ldr	r0, [r7, #12]
 80026a4:	f7ff ff84 	bl	80025b0 <compareIntArrays>
 80026a8:	4603      	mov	r3, r0
 80026aa:	74fb      	strb	r3, [r7, #19]

	if(valid1 || valid2 || valid3 || valid4 || valid5)
 80026ac:	7dfb      	ldrb	r3, [r7, #23]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d10b      	bne.n	80026ca <checkValidUser+0x9a>
 80026b2:	7dbb      	ldrb	r3, [r7, #22]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d108      	bne.n	80026ca <checkValidUser+0x9a>
 80026b8:	7d7b      	ldrb	r3, [r7, #21]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d105      	bne.n	80026ca <checkValidUser+0x9a>
 80026be:	7d3b      	ldrb	r3, [r7, #20]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d102      	bne.n	80026ca <checkValidUser+0x9a>
 80026c4:	7cfb      	ldrb	r3, [r7, #19]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <checkValidUser+0x9e>
	{
		return TRUE;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e000      	b.n	80026d0 <checkValidUser+0xa0>
	}
	else
	{
		return FALSE;
 80026ce:	2300      	movs	r3, #0
	}
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3718      	adds	r7, #24
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <welcomeMsglcd>:

//function to display welcome message
void welcomeMsglcd (void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
	HD44780_Clear();
 80026dc:	f7fe fd6c 	bl	80011b8 <HD44780_Clear>
	HD44780_SetCursor(0,0);
 80026e0:	2100      	movs	r1, #0
 80026e2:	2000      	movs	r0, #0
 80026e4:	f7fe fd7e 	bl	80011e4 <HD44780_SetCursor>
	HD44780_PrintStr("Welcome to ");
 80026e8:	4805      	ldr	r0, [pc, #20]	@ (8002700 <welcomeMsglcd+0x28>)
 80026ea:	f7fe fdec 	bl	80012c6 <HD44780_PrintStr>
	HD44780_SetCursor(0,1);
 80026ee:	2101      	movs	r1, #1
 80026f0:	2000      	movs	r0, #0
 80026f2:	f7fe fd77 	bl	80011e4 <HD44780_SetCursor>
	HD44780_PrintStr("Smart IOTmailbox");
 80026f6:	4803      	ldr	r0, [pc, #12]	@ (8002704 <welcomeMsglcd+0x2c>)
 80026f8:	f7fe fde5 	bl	80012c6 <HD44780_PrintStr>
}
 80026fc:	bf00      	nop
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	08007f58 	.word	0x08007f58
 8002704:	08007f64 	.word	0x08007f64

08002708 <newNotificationlcd>:

//Function to display new mail/package notification
void newNotificationlcd(const char *line1, const char *line2, uint16_t delay_ms)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	60b9      	str	r1, [r7, #8]
 8002712:	4613      	mov	r3, r2
 8002714:	80fb      	strh	r3, [r7, #6]
	HD44780_Clear();
 8002716:	f7fe fd4f 	bl	80011b8 <HD44780_Clear>
	HD44780_SetCursor(0,0);
 800271a:	2100      	movs	r1, #0
 800271c:	2000      	movs	r0, #0
 800271e:	f7fe fd61 	bl	80011e4 <HD44780_SetCursor>
	HD44780_PrintStr(line1);
 8002722:	68f8      	ldr	r0, [r7, #12]
 8002724:	f7fe fdcf 	bl	80012c6 <HD44780_PrintStr>
	HD44780_SetCursor(0,1);
 8002728:	2101      	movs	r1, #1
 800272a:	2000      	movs	r0, #0
 800272c:	f7fe fd5a 	bl	80011e4 <HD44780_SetCursor>
	HD44780_PrintStr(line2);
 8002730:	68b8      	ldr	r0, [r7, #8]
 8002732:	f7fe fdc8 	bl	80012c6 <HD44780_PrintStr>
	HAL_Delay(delay_ms);
 8002736:	88fb      	ldrh	r3, [r7, #6]
 8002738:	4618      	mov	r0, r3
 800273a:	f000 ffe5 	bl	8003708 <HAL_Delay>
}
 800273e:	bf00      	nop
 8002740:	3710      	adds	r7, #16
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}

08002746 <setLCDHMIscreen>:

//Function to set a new screen on display
void setLCDHMIscreen(const char *line1, const char *line2)
{
 8002746:	b580      	push	{r7, lr}
 8002748:	b082      	sub	sp, #8
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
 800274e:	6039      	str	r1, [r7, #0]
	HD44780_Clear();
 8002750:	f7fe fd32 	bl	80011b8 <HD44780_Clear>
	HD44780_SetCursor(0,0);
 8002754:	2100      	movs	r1, #0
 8002756:	2000      	movs	r0, #0
 8002758:	f7fe fd44 	bl	80011e4 <HD44780_SetCursor>
	HD44780_PrintStr(line1);
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f7fe fdb2 	bl	80012c6 <HD44780_PrintStr>
	HD44780_SetCursor(0,1);
 8002762:	2101      	movs	r1, #1
 8002764:	2000      	movs	r0, #0
 8002766:	f7fe fd3d 	bl	80011e4 <HD44780_SetCursor>
	HD44780_PrintStr(line2);
 800276a:	6838      	ldr	r0, [r7, #0]
 800276c:	f7fe fdab 	bl	80012c6 <HD44780_PrintStr>
}
 8002770:	bf00      	nop
 8002772:	3708      	adds	r7, #8
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}

08002778 <DisplayMenu>:

//Function to display menu screens
void DisplayMenu(MenuState_t state, char key)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b08a      	sub	sp, #40	@ 0x28
 800277c:	af00      	add	r7, sp, #0
 800277e:	4603      	mov	r3, r0
 8002780:	460a      	mov	r2, r1
 8002782:	71fb      	strb	r3, [r7, #7]
 8002784:	4613      	mov	r3, r2
 8002786:	71bb      	strb	r3, [r7, #6]
	uchar buffer[20];
	char astrik[5] = "****";
 8002788:	4a81      	ldr	r2, [pc, #516]	@ (8002990 <DisplayMenu+0x218>)
 800278a:	f107 030c 	add.w	r3, r7, #12
 800278e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002792:	6018      	str	r0, [r3, #0]
 8002794:	3304      	adds	r3, #4
 8002796:	7019      	strb	r1, [r3, #0]
	astrik[passwordIndex] = '\0';  // Adjust * display
 8002798:	4b7e      	ldr	r3, [pc, #504]	@ (8002994 <DisplayMenu+0x21c>)
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	3328      	adds	r3, #40	@ 0x28
 800279e:	443b      	add	r3, r7
 80027a0:	2200      	movs	r2, #0
 80027a2:	f803 2c1c 	strb.w	r2, [r3, #-28]

	switch(state)
 80027a6:	79fb      	ldrb	r3, [r7, #7]
 80027a8:	2b08      	cmp	r3, #8
 80027aa:	f200 80e3 	bhi.w	8002974 <DisplayMenu+0x1fc>
 80027ae:	a201      	add	r2, pc, #4	@ (adr r2, 80027b4 <DisplayMenu+0x3c>)
 80027b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027b4:	080027d9 	.word	0x080027d9
 80027b8:	080027df 	.word	0x080027df
 80027bc:	080027e9 	.word	0x080027e9
 80027c0:	080027f3 	.word	0x080027f3
 80027c4:	080027fd 	.word	0x080027fd
 80027c8:	08002807 	.word	0x08002807
 80027cc:	08002895 	.word	0x08002895
 80027d0:	080028b9 	.word	0x080028b9
 80027d4:	08002951 	.word	0x08002951
	{
		case HOME_SCREEN:
			welcomeMsglcd();
 80027d8:	f7ff ff7e 	bl	80026d8 <welcomeMsglcd>
			break;
 80027dc:	e0d3      	b.n	8002986 <DisplayMenu+0x20e>
		case MAIN_MENU:
			setLCDHMIscreen("A:User1 B:User2","C:User3 0:Exit");
 80027de:	496e      	ldr	r1, [pc, #440]	@ (8002998 <DisplayMenu+0x220>)
 80027e0:	486e      	ldr	r0, [pc, #440]	@ (800299c <DisplayMenu+0x224>)
 80027e2:	f7ff ffb0 	bl	8002746 <setLCDHMIscreen>
			break;
 80027e6:	e0ce      	b.n	8002986 <DisplayMenu+0x20e>
		case USER_MENU:
			setLCDHMIscreen("1:Mail 2:Package","#:Back *:Home");
 80027e8:	496d      	ldr	r1, [pc, #436]	@ (80029a0 <DisplayMenu+0x228>)
 80027ea:	486e      	ldr	r0, [pc, #440]	@ (80029a4 <DisplayMenu+0x22c>)
 80027ec:	f7ff ffab 	bl	8002746 <setLCDHMIscreen>
			break;
 80027f0:	e0c9      	b.n	8002986 <DisplayMenu+0x20e>
		case MAIL_MENU:
			setLCDHMIscreen("1:Check 2:Retrieve","#:Back *:Home");
 80027f2:	496b      	ldr	r1, [pc, #428]	@ (80029a0 <DisplayMenu+0x228>)
 80027f4:	486c      	ldr	r0, [pc, #432]	@ (80029a8 <DisplayMenu+0x230>)
 80027f6:	f7ff ffa6 	bl	8002746 <setLCDHMIscreen>
			break;
 80027fa:	e0c4      	b.n	8002986 <DisplayMenu+0x20e>
		case PACKAGE_MENU:
			setLCDHMIscreen("1:Check 2:Retrieve","#:Back *:Home");
 80027fc:	4968      	ldr	r1, [pc, #416]	@ (80029a0 <DisplayMenu+0x228>)
 80027fe:	486a      	ldr	r0, [pc, #424]	@ (80029a8 <DisplayMenu+0x230>)
 8002800:	f7ff ffa1 	bl	8002746 <setLCDHMIscreen>
			break;
 8002804:	e0bf      	b.n	8002986 <DisplayMenu+0x20e>
		case CHECK_MAIL:
			if(currentUser == 1)
 8002806:	4b69      	ldr	r3, [pc, #420]	@ (80029ac <DisplayMenu+0x234>)
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	2b01      	cmp	r3, #1
 800280c:	d112      	bne.n	8002834 <DisplayMenu+0xbc>
			{
				sprintf(buffer,"User1 has %d",user1Info.mailCount);
 800280e:	4b68      	ldr	r3, [pc, #416]	@ (80029b0 <DisplayMenu+0x238>)
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	461a      	mov	r2, r3
 8002814:	f107 0314 	add.w	r3, r7, #20
 8002818:	4966      	ldr	r1, [pc, #408]	@ (80029b4 <DisplayMenu+0x23c>)
 800281a:	4618      	mov	r0, r3
 800281c:	f004 fac4 	bl	8006da8 <siprintf>
				newNotificationlcd(buffer,"mails",2000);
 8002820:	f107 0314 	add.w	r3, r7, #20
 8002824:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002828:	4963      	ldr	r1, [pc, #396]	@ (80029b8 <DisplayMenu+0x240>)
 800282a:	4618      	mov	r0, r3
 800282c:	f7ff ff6c 	bl	8002708 <newNotificationlcd>
				welcomeMsglcd();
 8002830:	f7ff ff52 	bl	80026d8 <welcomeMsglcd>
			}
			if(currentUser == 2)
 8002834:	4b5d      	ldr	r3, [pc, #372]	@ (80029ac <DisplayMenu+0x234>)
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	2b02      	cmp	r3, #2
 800283a:	d112      	bne.n	8002862 <DisplayMenu+0xea>
			{
				sprintf(buffer,"User2 has %d",user2Info.mailFlag);
 800283c:	4b5f      	ldr	r3, [pc, #380]	@ (80029bc <DisplayMenu+0x244>)
 800283e:	789b      	ldrb	r3, [r3, #2]
 8002840:	461a      	mov	r2, r3
 8002842:	f107 0314 	add.w	r3, r7, #20
 8002846:	495e      	ldr	r1, [pc, #376]	@ (80029c0 <DisplayMenu+0x248>)
 8002848:	4618      	mov	r0, r3
 800284a:	f004 faad 	bl	8006da8 <siprintf>
				newNotificationlcd(buffer,"mail",2000);
 800284e:	f107 0314 	add.w	r3, r7, #20
 8002852:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002856:	495b      	ldr	r1, [pc, #364]	@ (80029c4 <DisplayMenu+0x24c>)
 8002858:	4618      	mov	r0, r3
 800285a:	f7ff ff55 	bl	8002708 <newNotificationlcd>
				welcomeMsglcd();
 800285e:	f7ff ff3b 	bl	80026d8 <welcomeMsglcd>
			}
			if(currentUser == 3)
 8002862:	4b52      	ldr	r3, [pc, #328]	@ (80029ac <DisplayMenu+0x234>)
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	2b03      	cmp	r3, #3
 8002868:	f040 8086 	bne.w	8002978 <DisplayMenu+0x200>
			{
				sprintf(buffer,"User3 has %d",user3Info.mailFlag);
 800286c:	4b56      	ldr	r3, [pc, #344]	@ (80029c8 <DisplayMenu+0x250>)
 800286e:	789b      	ldrb	r3, [r3, #2]
 8002870:	461a      	mov	r2, r3
 8002872:	f107 0314 	add.w	r3, r7, #20
 8002876:	4955      	ldr	r1, [pc, #340]	@ (80029cc <DisplayMenu+0x254>)
 8002878:	4618      	mov	r0, r3
 800287a:	f004 fa95 	bl	8006da8 <siprintf>
				newNotificationlcd(buffer,"mail",2000);
 800287e:	f107 0314 	add.w	r3, r7, #20
 8002882:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002886:	494f      	ldr	r1, [pc, #316]	@ (80029c4 <DisplayMenu+0x24c>)
 8002888:	4618      	mov	r0, r3
 800288a:	f7ff ff3d 	bl	8002708 <newNotificationlcd>
				welcomeMsglcd();
 800288e:	f7ff ff23 	bl	80026d8 <welcomeMsglcd>
			}
			break;
 8002892:	e071      	b.n	8002978 <DisplayMenu+0x200>
		case RETRIEVE_MAIL:
			if (currentState == RETRIEVE_MAIL)
 8002894:	4b4e      	ldr	r3, [pc, #312]	@ (80029d0 <DisplayMenu+0x258>)
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	2b06      	cmp	r3, #6
 800289a:	d16f      	bne.n	800297c <DisplayMenu+0x204>
			{
				enteringPassword = TRUE;
 800289c:	4b4d      	ldr	r3, [pc, #308]	@ (80029d4 <DisplayMenu+0x25c>)
 800289e:	2201      	movs	r2, #1
 80028a0:	701a      	strb	r2, [r3, #0]
				passwordIndex = 0;
 80028a2:	4b3c      	ldr	r3, [pc, #240]	@ (8002994 <DisplayMenu+0x21c>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	701a      	strb	r2, [r3, #0]
				attempts = 0;
 80028a8:	4b4b      	ldr	r3, [pc, #300]	@ (80029d8 <DisplayMenu+0x260>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	701a      	strb	r2, [r3, #0]
				setLCDHMIscreen("Enter Password", "****");
 80028ae:	4938      	ldr	r1, [pc, #224]	@ (8002990 <DisplayMenu+0x218>)
 80028b0:	484a      	ldr	r0, [pc, #296]	@ (80029dc <DisplayMenu+0x264>)
 80028b2:	f7ff ff48 	bl	8002746 <setLCDHMIscreen>
			}
			break;
 80028b6:	e061      	b.n	800297c <DisplayMenu+0x204>
		case CHECK_PACKAGE:
			if(currentUser == 1)
 80028b8:	4b3c      	ldr	r3, [pc, #240]	@ (80029ac <DisplayMenu+0x234>)
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d114      	bne.n	80028ea <DisplayMenu+0x172>
			{
				if(user1Info.parcelFlag)
 80028c0:	4b3b      	ldr	r3, [pc, #236]	@ (80029b0 <DisplayMenu+0x238>)
 80028c2:	78db      	ldrb	r3, [r3, #3]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d008      	beq.n	80028da <DisplayMenu+0x162>
				{
					newNotificationlcd("User1 has a","Package",2000);
 80028c8:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80028cc:	4944      	ldr	r1, [pc, #272]	@ (80029e0 <DisplayMenu+0x268>)
 80028ce:	4845      	ldr	r0, [pc, #276]	@ (80029e4 <DisplayMenu+0x26c>)
 80028d0:	f7ff ff1a 	bl	8002708 <newNotificationlcd>
					welcomeMsglcd();
 80028d4:	f7ff ff00 	bl	80026d8 <welcomeMsglcd>
 80028d8:	e007      	b.n	80028ea <DisplayMenu+0x172>
				}
				else{
					newNotificationlcd("User1 has no","Package",2000);
 80028da:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80028de:	4940      	ldr	r1, [pc, #256]	@ (80029e0 <DisplayMenu+0x268>)
 80028e0:	4841      	ldr	r0, [pc, #260]	@ (80029e8 <DisplayMenu+0x270>)
 80028e2:	f7ff ff11 	bl	8002708 <newNotificationlcd>
					welcomeMsglcd();
 80028e6:	f7ff fef7 	bl	80026d8 <welcomeMsglcd>
				}

			}
			if(currentUser == 2)
 80028ea:	4b30      	ldr	r3, [pc, #192]	@ (80029ac <DisplayMenu+0x234>)
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d114      	bne.n	800291c <DisplayMenu+0x1a4>
			{
				if(user2Info.parcelFlag)
 80028f2:	4b32      	ldr	r3, [pc, #200]	@ (80029bc <DisplayMenu+0x244>)
 80028f4:	78db      	ldrb	r3, [r3, #3]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d008      	beq.n	800290c <DisplayMenu+0x194>
				{
					newNotificationlcd("User2 has a","Package",2000);
 80028fa:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80028fe:	4938      	ldr	r1, [pc, #224]	@ (80029e0 <DisplayMenu+0x268>)
 8002900:	483a      	ldr	r0, [pc, #232]	@ (80029ec <DisplayMenu+0x274>)
 8002902:	f7ff ff01 	bl	8002708 <newNotificationlcd>
					welcomeMsglcd();
 8002906:	f7ff fee7 	bl	80026d8 <welcomeMsglcd>
 800290a:	e007      	b.n	800291c <DisplayMenu+0x1a4>
				}
				else{
					newNotificationlcd("User2 has no","Package",2000);
 800290c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002910:	4933      	ldr	r1, [pc, #204]	@ (80029e0 <DisplayMenu+0x268>)
 8002912:	4837      	ldr	r0, [pc, #220]	@ (80029f0 <DisplayMenu+0x278>)
 8002914:	f7ff fef8 	bl	8002708 <newNotificationlcd>
					welcomeMsglcd();
 8002918:	f7ff fede 	bl	80026d8 <welcomeMsglcd>
				}
			}
			if(currentUser == 3)
 800291c:	4b23      	ldr	r3, [pc, #140]	@ (80029ac <DisplayMenu+0x234>)
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	2b03      	cmp	r3, #3
 8002922:	d12d      	bne.n	8002980 <DisplayMenu+0x208>
			{
				if(user3Info.parcelFlag)
 8002924:	4b28      	ldr	r3, [pc, #160]	@ (80029c8 <DisplayMenu+0x250>)
 8002926:	78db      	ldrb	r3, [r3, #3]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d008      	beq.n	800293e <DisplayMenu+0x1c6>
				{
					newNotificationlcd("User3 has a","Package",2000);
 800292c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002930:	492b      	ldr	r1, [pc, #172]	@ (80029e0 <DisplayMenu+0x268>)
 8002932:	4830      	ldr	r0, [pc, #192]	@ (80029f4 <DisplayMenu+0x27c>)
 8002934:	f7ff fee8 	bl	8002708 <newNotificationlcd>
					welcomeMsglcd();
 8002938:	f7ff fece 	bl	80026d8 <welcomeMsglcd>
				else{
					newNotificationlcd("User3 has no","Package",2000);
					welcomeMsglcd();
				}
			}
			break;
 800293c:	e020      	b.n	8002980 <DisplayMenu+0x208>
					newNotificationlcd("User3 has no","Package",2000);
 800293e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002942:	4927      	ldr	r1, [pc, #156]	@ (80029e0 <DisplayMenu+0x268>)
 8002944:	482c      	ldr	r0, [pc, #176]	@ (80029f8 <DisplayMenu+0x280>)
 8002946:	f7ff fedf 	bl	8002708 <newNotificationlcd>
					welcomeMsglcd();
 800294a:	f7ff fec5 	bl	80026d8 <welcomeMsglcd>
			break;
 800294e:	e017      	b.n	8002980 <DisplayMenu+0x208>
		case RETRIEVE_PACKAGE:
			if (currentState == RETRIEVE_PACKAGE)
 8002950:	4b1f      	ldr	r3, [pc, #124]	@ (80029d0 <DisplayMenu+0x258>)
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	2b08      	cmp	r3, #8
 8002956:	d115      	bne.n	8002984 <DisplayMenu+0x20c>
			{
				enteringPassword = TRUE;
 8002958:	4b1e      	ldr	r3, [pc, #120]	@ (80029d4 <DisplayMenu+0x25c>)
 800295a:	2201      	movs	r2, #1
 800295c:	701a      	strb	r2, [r3, #0]
				passwordIndex = 0;
 800295e:	4b0d      	ldr	r3, [pc, #52]	@ (8002994 <DisplayMenu+0x21c>)
 8002960:	2200      	movs	r2, #0
 8002962:	701a      	strb	r2, [r3, #0]
				attempts = 0;
 8002964:	4b1c      	ldr	r3, [pc, #112]	@ (80029d8 <DisplayMenu+0x260>)
 8002966:	2200      	movs	r2, #0
 8002968:	701a      	strb	r2, [r3, #0]
				setLCDHMIscreen("Enter Password", "****");
 800296a:	4909      	ldr	r1, [pc, #36]	@ (8002990 <DisplayMenu+0x218>)
 800296c:	481b      	ldr	r0, [pc, #108]	@ (80029dc <DisplayMenu+0x264>)
 800296e:	f7ff feea 	bl	8002746 <setLCDHMIscreen>
			}
			break;
 8002972:	e007      	b.n	8002984 <DisplayMenu+0x20c>
		default:
			break;
 8002974:	bf00      	nop
 8002976:	e006      	b.n	8002986 <DisplayMenu+0x20e>
			break;
 8002978:	bf00      	nop
 800297a:	e004      	b.n	8002986 <DisplayMenu+0x20e>
			break;
 800297c:	bf00      	nop
 800297e:	e002      	b.n	8002986 <DisplayMenu+0x20e>
			break;
 8002980:	bf00      	nop
 8002982:	e000      	b.n	8002986 <DisplayMenu+0x20e>
			break;
 8002984:	bf00      	nop
	}
}
 8002986:	bf00      	nop
 8002988:	3728      	adds	r7, #40	@ 0x28
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	08008264 	.word	0x08008264
 8002994:	2000025d 	.word	0x2000025d
 8002998:	080081cc 	.word	0x080081cc
 800299c:	080081dc 	.word	0x080081dc
 80029a0:	080081ec 	.word	0x080081ec
 80029a4:	080081fc 	.word	0x080081fc
 80029a8:	08008210 	.word	0x08008210
 80029ac:	20000254 	.word	0x20000254
 80029b0:	20000248 	.word	0x20000248
 80029b4:	08008224 	.word	0x08008224
 80029b8:	08008234 	.word	0x08008234
 80029bc:	2000024c 	.word	0x2000024c
 80029c0:	0800823c 	.word	0x0800823c
 80029c4:	0800824c 	.word	0x0800824c
 80029c8:	20000250 	.word	0x20000250
 80029cc:	08008254 	.word	0x08008254
 80029d0:	20000035 	.word	0x20000035
 80029d4:	2000025f 	.word	0x2000025f
 80029d8:	2000025e 	.word	0x2000025e
 80029dc:	0800826c 	.word	0x0800826c
 80029e0:	0800827c 	.word	0x0800827c
 80029e4:	08008284 	.word	0x08008284
 80029e8:	08008290 	.word	0x08008290
 80029ec:	080082a0 	.word	0x080082a0
 80029f0:	080082ac 	.word	0x080082ac
 80029f4:	080082bc 	.word	0x080082bc
 80029f8:	080082c8 	.word	0x080082c8

080029fc <getUserPassword>:

// Function to get the correct password based on the user
char* getUserPassword()
{
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0
    switch (currentUser)
 8002a00:	4b14      	ldr	r3, [pc, #80]	@ (8002a54 <getUserPassword+0x58>)
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	2b03      	cmp	r3, #3
 8002a06:	d016      	beq.n	8002a36 <getUserPassword+0x3a>
 8002a08:	2b03      	cmp	r3, #3
 8002a0a:	dc1c      	bgt.n	8002a46 <getUserPassword+0x4a>
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d002      	beq.n	8002a16 <getUserPassword+0x1a>
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d008      	beq.n	8002a26 <getUserPassword+0x2a>
 8002a14:	e017      	b.n	8002a46 <getUserPassword+0x4a>
    {
    		case 1:
                return (currentState == RETRIEVE_MAIL) ? genPassword1 : genPassword4;
 8002a16:	4b10      	ldr	r3, [pc, #64]	@ (8002a58 <getUserPassword+0x5c>)
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	2b06      	cmp	r3, #6
 8002a1c:	d101      	bne.n	8002a22 <getUserPassword+0x26>
 8002a1e:	4b0f      	ldr	r3, [pc, #60]	@ (8002a5c <getUserPassword+0x60>)
 8002a20:	e012      	b.n	8002a48 <getUserPassword+0x4c>
 8002a22:	4b0f      	ldr	r3, [pc, #60]	@ (8002a60 <getUserPassword+0x64>)
 8002a24:	e010      	b.n	8002a48 <getUserPassword+0x4c>
            case 2:
                return (currentState == RETRIEVE_MAIL) ? genPassword2 : genPassword5;
 8002a26:	4b0c      	ldr	r3, [pc, #48]	@ (8002a58 <getUserPassword+0x5c>)
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	2b06      	cmp	r3, #6
 8002a2c:	d101      	bne.n	8002a32 <getUserPassword+0x36>
 8002a2e:	4b0d      	ldr	r3, [pc, #52]	@ (8002a64 <getUserPassword+0x68>)
 8002a30:	e00a      	b.n	8002a48 <getUserPassword+0x4c>
 8002a32:	4b0d      	ldr	r3, [pc, #52]	@ (8002a68 <getUserPassword+0x6c>)
 8002a34:	e008      	b.n	8002a48 <getUserPassword+0x4c>
            case 3:
                return (currentState == RETRIEVE_MAIL) ? genPassword3 : genPassword6;
 8002a36:	4b08      	ldr	r3, [pc, #32]	@ (8002a58 <getUserPassword+0x5c>)
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	2b06      	cmp	r3, #6
 8002a3c:	d101      	bne.n	8002a42 <getUserPassword+0x46>
 8002a3e:	4b0b      	ldr	r3, [pc, #44]	@ (8002a6c <getUserPassword+0x70>)
 8002a40:	e002      	b.n	8002a48 <getUserPassword+0x4c>
 8002a42:	4b0b      	ldr	r3, [pc, #44]	@ (8002a70 <getUserPassword+0x74>)
 8002a44:	e000      	b.n	8002a48 <getUserPassword+0x4c>
            default:
                return "0000";
 8002a46:	4b0b      	ldr	r3, [pc, #44]	@ (8002a74 <getUserPassword+0x78>)
    }
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
 8002a52:	bf00      	nop
 8002a54:	20000254 	.word	0x20000254
 8002a58:	20000035 	.word	0x20000035
 8002a5c:	20000038 	.word	0x20000038
 8002a60:	20000050 	.word	0x20000050
 8002a64:	20000040 	.word	0x20000040
 8002a68:	20000058 	.word	0x20000058
 8002a6c:	20000048 	.word	0x20000048
 8002a70:	20000060 	.word	0x20000060
 8002a74:	080082d8 	.word	0x080082d8

08002a78 <HandleInput>:

//Function to scroll through menu screens upon input
void HandleInput(char key)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b088      	sub	sp, #32
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	4603      	mov	r3, r0
 8002a80:	71fb      	strb	r3, [r7, #7]
	char temp[5];
	if (enteringPassword) {
 8002a82:	4b2f      	ldr	r3, [pc, #188]	@ (8002b40 <HandleInput+0xc8>)
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	f000 821f 	beq.w	8002eca <HandleInput+0x452>
	        if (key >= '0' && key <= '9' && passwordIndex < 4) {
 8002a8c:	79fb      	ldrb	r3, [r7, #7]
 8002a8e:	2b2f      	cmp	r3, #47	@ 0x2f
 8002a90:	d92c      	bls.n	8002aec <HandleInput+0x74>
 8002a92:	79fb      	ldrb	r3, [r7, #7]
 8002a94:	2b39      	cmp	r3, #57	@ 0x39
 8002a96:	d829      	bhi.n	8002aec <HandleInput+0x74>
 8002a98:	4b2a      	ldr	r3, [pc, #168]	@ (8002b44 <HandleInput+0xcc>)
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	2b03      	cmp	r3, #3
 8002a9e:	d825      	bhi.n	8002aec <HandleInput+0x74>
	            inputPassword[passwordIndex++] = key;
 8002aa0:	4b28      	ldr	r3, [pc, #160]	@ (8002b44 <HandleInput+0xcc>)
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	1c5a      	adds	r2, r3, #1
 8002aa6:	b2d1      	uxtb	r1, r2
 8002aa8:	4a26      	ldr	r2, [pc, #152]	@ (8002b44 <HandleInput+0xcc>)
 8002aaa:	7011      	strb	r1, [r2, #0]
 8002aac:	4619      	mov	r1, r3
 8002aae:	4a26      	ldr	r2, [pc, #152]	@ (8002b48 <HandleInput+0xd0>)
 8002ab0:	79fb      	ldrb	r3, [r7, #7]
 8002ab2:	5453      	strb	r3, [r2, r1]
	            inputPassword[passwordIndex] = '\0';
 8002ab4:	4b23      	ldr	r3, [pc, #140]	@ (8002b44 <HandleInput+0xcc>)
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	461a      	mov	r2, r3
 8002aba:	4b23      	ldr	r3, [pc, #140]	@ (8002b48 <HandleInput+0xd0>)
 8002abc:	2100      	movs	r1, #0
 8002abe:	5499      	strb	r1, [r3, r2]
	            char maskedDisplay[5] = "****";  // Masked display
 8002ac0:	4a22      	ldr	r2, [pc, #136]	@ (8002b4c <HandleInput+0xd4>)
 8002ac2:	f107 0310 	add.w	r3, r7, #16
 8002ac6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002aca:	6018      	str	r0, [r3, #0]
 8002acc:	3304      	adds	r3, #4
 8002ace:	7019      	strb	r1, [r3, #0]
	            maskedDisplay[passwordIndex] = '\0';
 8002ad0:	4b1c      	ldr	r3, [pc, #112]	@ (8002b44 <HandleInput+0xcc>)
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	3320      	adds	r3, #32
 8002ad6:	443b      	add	r3, r7
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f803 2c10 	strb.w	r2, [r3, #-16]
	            setLCDHMIscreen("Enter Password", maskedDisplay);
 8002ade:	f107 0310 	add.w	r3, r7, #16
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	481a      	ldr	r0, [pc, #104]	@ (8002b50 <HandleInput+0xd8>)
 8002ae6:	f7ff fe2e 	bl	8002746 <setLCDHMIscreen>
	        if (key >= '0' && key <= '9' && passwordIndex < 4) {
 8002aea:	e2c0      	b.n	800306e <HandleInput+0x5f6>
	        }
	        else if (key == '#' && passwordIndex > 0) {  // Backspace functionality
 8002aec:	79fb      	ldrb	r3, [r7, #7]
 8002aee:	2b23      	cmp	r3, #35	@ 0x23
 8002af0:	d130      	bne.n	8002b54 <HandleInput+0xdc>
 8002af2:	4b14      	ldr	r3, [pc, #80]	@ (8002b44 <HandleInput+0xcc>)
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d02c      	beq.n	8002b54 <HandleInput+0xdc>
	            passwordIndex--;
 8002afa:	4b12      	ldr	r3, [pc, #72]	@ (8002b44 <HandleInput+0xcc>)
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	3b01      	subs	r3, #1
 8002b00:	b2da      	uxtb	r2, r3
 8002b02:	4b10      	ldr	r3, [pc, #64]	@ (8002b44 <HandleInput+0xcc>)
 8002b04:	701a      	strb	r2, [r3, #0]
	            inputPassword[passwordIndex] = '\0';
 8002b06:	4b0f      	ldr	r3, [pc, #60]	@ (8002b44 <HandleInput+0xcc>)
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	4b0e      	ldr	r3, [pc, #56]	@ (8002b48 <HandleInput+0xd0>)
 8002b0e:	2100      	movs	r1, #0
 8002b10:	5499      	strb	r1, [r3, r2]
	            char maskedDisplay[5] = "****";
 8002b12:	4a0e      	ldr	r2, [pc, #56]	@ (8002b4c <HandleInput+0xd4>)
 8002b14:	f107 0308 	add.w	r3, r7, #8
 8002b18:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002b1c:	6018      	str	r0, [r3, #0]
 8002b1e:	3304      	adds	r3, #4
 8002b20:	7019      	strb	r1, [r3, #0]
	            maskedDisplay[passwordIndex] = '\0';
 8002b22:	4b08      	ldr	r3, [pc, #32]	@ (8002b44 <HandleInput+0xcc>)
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	3320      	adds	r3, #32
 8002b28:	443b      	add	r3, r7
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f803 2c18 	strb.w	r2, [r3, #-24]
	            setLCDHMIscreen("Enter Password", maskedDisplay);
 8002b30:	f107 0308 	add.w	r3, r7, #8
 8002b34:	4619      	mov	r1, r3
 8002b36:	4806      	ldr	r0, [pc, #24]	@ (8002b50 <HandleInput+0xd8>)
 8002b38:	f7ff fe05 	bl	8002746 <setLCDHMIscreen>
	        else if (key == '#' && passwordIndex > 0) {  // Backspace functionality
 8002b3c:	e297      	b.n	800306e <HandleInput+0x5f6>
 8002b3e:	bf00      	nop
 8002b40:	2000025f 	.word	0x2000025f
 8002b44:	2000025d 	.word	0x2000025d
 8002b48:	20000258 	.word	0x20000258
 8002b4c:	08008264 	.word	0x08008264
 8002b50:	0800826c 	.word	0x0800826c
	        }
	        else if (passwordIndex == 4) {
 8002b54:	4baf      	ldr	r3, [pc, #700]	@ (8002e14 <HandleInput+0x39c>)
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	2b04      	cmp	r3, #4
 8002b5a:	f040 8287 	bne.w	800306c <HandleInput+0x5f4>

	        	strcpy(temp,getUserPassword());
 8002b5e:	f7ff ff4d 	bl	80029fc <getUserPassword>
 8002b62:	4602      	mov	r2, r0
 8002b64:	f107 0318 	add.w	r3, r7, #24
 8002b68:	4611      	mov	r1, r2
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f004 f9fb 	bl	8006f66 <strcpy>
	            if (strcmp(inputPassword, getUserPassword()) == 0) {
 8002b70:	f7ff ff44 	bl	80029fc <getUserPassword>
 8002b74:	4603      	mov	r3, r0
 8002b76:	4619      	mov	r1, r3
 8002b78:	48a7      	ldr	r0, [pc, #668]	@ (8002e18 <HandleInput+0x3a0>)
 8002b7a:	f7fd fb29 	bl	80001d0 <strcmp>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	f040 8177 	bne.w	8002e74 <HandleInput+0x3fc>
	                setLCDHMIscreen("Access Granted", "Opening...");
 8002b86:	49a5      	ldr	r1, [pc, #660]	@ (8002e1c <HandleInput+0x3a4>)
 8002b88:	48a5      	ldr	r0, [pc, #660]	@ (8002e20 <HandleInput+0x3a8>)
 8002b8a:	f7ff fddc 	bl	8002746 <setLCDHMIscreen>
	                HAL_Delay(2000);
 8002b8e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002b92:	f000 fdb9 	bl	8003708 <HAL_Delay>
	                welcomeMsglcd();
 8002b96:	f7ff fd9f 	bl	80026d8 <welcomeMsglcd>
	                if(currentUser == 1)
 8002b9a:	4ba2      	ldr	r3, [pc, #648]	@ (8002e24 <HandleInput+0x3ac>)
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d162      	bne.n	8002c68 <HandleInput+0x1f0>
	                {
	                	if (currentState == RETRIEVE_MAIL)
 8002ba2:	4ba1      	ldr	r3, [pc, #644]	@ (8002e28 <HandleInput+0x3b0>)
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	2b06      	cmp	r3, #6
 8002ba8:	d125      	bne.n	8002bf6 <HandleInput+0x17e>
						{
							user1Info.mailCount = 0;
 8002baa:	4ba0      	ldr	r3, [pc, #640]	@ (8002e2c <HandleInput+0x3b4>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	701a      	strb	r2, [r3, #0]
							HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	2140      	movs	r1, #64	@ 0x40
 8002bb4:	489e      	ldr	r0, [pc, #632]	@ (8002e30 <HandleInput+0x3b8>)
 8002bb6:	f001 f865 	bl	8003c84 <HAL_GPIO_WritePin>
							sprintf(buf1,"USER1\n\r");
 8002bba:	499e      	ldr	r1, [pc, #632]	@ (8002e34 <HandleInput+0x3bc>)
 8002bbc:	489e      	ldr	r0, [pc, #632]	@ (8002e38 <HandleInput+0x3c0>)
 8002bbe:	f004 f8f3 	bl	8006da8 <siprintf>
							HAL_UART_Transmit(&huart2,buf1,sizeof(buf1), HAL_MAX_DELAY);
 8002bc2:	f04f 33ff 	mov.w	r3, #4294967295
 8002bc6:	2208      	movs	r2, #8
 8002bc8:	499b      	ldr	r1, [pc, #620]	@ (8002e38 <HandleInput+0x3c0>)
 8002bca:	489c      	ldr	r0, [pc, #624]	@ (8002e3c <HandleInput+0x3c4>)
 8002bcc:	f003 fc02 	bl	80063d4 <HAL_UART_Transmit>
							clearArrayEle(buf1 ,8);
 8002bd0:	2108      	movs	r1, #8
 8002bd2:	4899      	ldr	r0, [pc, #612]	@ (8002e38 <HandleInput+0x3c0>)
 8002bd4:	f7ff fd10 	bl	80025f8 <clearArrayEle>

							//save the notification locally and send it to the ESP32
							sprintf(buf,"User 1 all mails were retrieved\n");
 8002bd8:	4999      	ldr	r1, [pc, #612]	@ (8002e40 <HandleInput+0x3c8>)
 8002bda:	489a      	ldr	r0, [pc, #616]	@ (8002e44 <HandleInput+0x3cc>)
 8002bdc:	f004 f8e4 	bl	8006da8 <siprintf>
							HAL_UART_Transmit(&huart2,buf,sizeof(buf), HAL_MAX_DELAY);
 8002be0:	f04f 33ff 	mov.w	r3, #4294967295
 8002be4:	2246      	movs	r2, #70	@ 0x46
 8002be6:	4997      	ldr	r1, [pc, #604]	@ (8002e44 <HandleInput+0x3cc>)
 8002be8:	4894      	ldr	r0, [pc, #592]	@ (8002e3c <HandleInput+0x3c4>)
 8002bea:	f003 fbf3 	bl	80063d4 <HAL_UART_Transmit>
							clearArrayEle(buf ,70);
 8002bee:	2146      	movs	r1, #70	@ 0x46
 8002bf0:	4894      	ldr	r0, [pc, #592]	@ (8002e44 <HandleInput+0x3cc>)
 8002bf2:	f7ff fd01 	bl	80025f8 <clearArrayEle>
						}
	                	if(currentState == RETRIEVE_PACKAGE)
 8002bf6:	4b8c      	ldr	r3, [pc, #560]	@ (8002e28 <HandleInput+0x3b0>)
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	2b08      	cmp	r3, #8
 8002bfc:	d134      	bne.n	8002c68 <HandleInput+0x1f0>
	                	{
	                		user1Info.parcelFlag = FALSE;
 8002bfe:	4b8b      	ldr	r3, [pc, #556]	@ (8002e2c <HandleInput+0x3b4>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	70da      	strb	r2, [r3, #3]
	                		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8002c04:	2200      	movs	r2, #0
 8002c06:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002c0a:	4889      	ldr	r0, [pc, #548]	@ (8002e30 <HandleInput+0x3b8>)
 8002c0c:	f001 f83a 	bl	8003c84 <HAL_GPIO_WritePin>

	                		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 1500);
 8002c10:	4b8d      	ldr	r3, [pc, #564]	@ (8002e48 <HandleInput+0x3d0>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8002c18:	641a      	str	r2, [r3, #64]	@ 0x40
							//allow delay to place the package and close after delay
							HAL_Delay(10000);
 8002c1a:	f242 7010 	movw	r0, #10000	@ 0x2710
 8002c1e:	f000 fd73 	bl	8003708 <HAL_Delay>
							__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 500);
 8002c22:	4b89      	ldr	r3, [pc, #548]	@ (8002e48 <HandleInput+0x3d0>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002c2a:	641a      	str	r2, [r3, #64]	@ 0x40

	                		sprintf(buf1,"USER1\n\r");
 8002c2c:	4981      	ldr	r1, [pc, #516]	@ (8002e34 <HandleInput+0x3bc>)
 8002c2e:	4882      	ldr	r0, [pc, #520]	@ (8002e38 <HandleInput+0x3c0>)
 8002c30:	f004 f8ba 	bl	8006da8 <siprintf>
							HAL_UART_Transmit(&huart2,buf1,sizeof(buf1), HAL_MAX_DELAY);
 8002c34:	f04f 33ff 	mov.w	r3, #4294967295
 8002c38:	2208      	movs	r2, #8
 8002c3a:	497f      	ldr	r1, [pc, #508]	@ (8002e38 <HandleInput+0x3c0>)
 8002c3c:	487f      	ldr	r0, [pc, #508]	@ (8002e3c <HandleInput+0x3c4>)
 8002c3e:	f003 fbc9 	bl	80063d4 <HAL_UART_Transmit>
							clearArrayEle(buf1 ,8);
 8002c42:	2108      	movs	r1, #8
 8002c44:	487c      	ldr	r0, [pc, #496]	@ (8002e38 <HandleInput+0x3c0>)
 8002c46:	f7ff fcd7 	bl	80025f8 <clearArrayEle>

							//save the notification locally and send it to the ESP32
							sprintf(buf,"User 1 all packages were retrieved\n");
 8002c4a:	4980      	ldr	r1, [pc, #512]	@ (8002e4c <HandleInput+0x3d4>)
 8002c4c:	487d      	ldr	r0, [pc, #500]	@ (8002e44 <HandleInput+0x3cc>)
 8002c4e:	f004 f8ab 	bl	8006da8 <siprintf>
							HAL_UART_Transmit(&huart2,buf,sizeof(buf), HAL_MAX_DELAY);
 8002c52:	f04f 33ff 	mov.w	r3, #4294967295
 8002c56:	2246      	movs	r2, #70	@ 0x46
 8002c58:	497a      	ldr	r1, [pc, #488]	@ (8002e44 <HandleInput+0x3cc>)
 8002c5a:	4878      	ldr	r0, [pc, #480]	@ (8002e3c <HandleInput+0x3c4>)
 8002c5c:	f003 fbba 	bl	80063d4 <HAL_UART_Transmit>
							clearArrayEle(buf ,70);
 8002c60:	2146      	movs	r1, #70	@ 0x46
 8002c62:	4878      	ldr	r0, [pc, #480]	@ (8002e44 <HandleInput+0x3cc>)
 8002c64:	f7ff fcc8 	bl	80025f8 <clearArrayEle>
	                		/*__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 2500);
	                		HAL_Delay(3000);
	                		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 500);*/
	                	}
	                }
	                if(currentUser == 2)
 8002c68:	4b6e      	ldr	r3, [pc, #440]	@ (8002e24 <HandleInput+0x3ac>)
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d162      	bne.n	8002d36 <HandleInput+0x2be>
	                {
	                	if(currentState == RETRIEVE_MAIL)
 8002c70:	4b6d      	ldr	r3, [pc, #436]	@ (8002e28 <HandleInput+0x3b0>)
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	2b06      	cmp	r3, #6
 8002c76:	d125      	bne.n	8002cc4 <HandleInput+0x24c>
	                	{
	                		user2Info.mailFlag = FALSE;
 8002c78:	4b75      	ldr	r3, [pc, #468]	@ (8002e50 <HandleInput+0x3d8>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	709a      	strb	r2, [r3, #2]
	                		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8002c7e:	2200      	movs	r2, #0
 8002c80:	2180      	movs	r1, #128	@ 0x80
 8002c82:	486b      	ldr	r0, [pc, #428]	@ (8002e30 <HandleInput+0x3b8>)
 8002c84:	f000 fffe 	bl	8003c84 <HAL_GPIO_WritePin>
	                		sprintf(buf1,"USER2\n\r");
 8002c88:	4972      	ldr	r1, [pc, #456]	@ (8002e54 <HandleInput+0x3dc>)
 8002c8a:	486b      	ldr	r0, [pc, #428]	@ (8002e38 <HandleInput+0x3c0>)
 8002c8c:	f004 f88c 	bl	8006da8 <siprintf>
							HAL_UART_Transmit(&huart2,buf1,sizeof(buf1), HAL_MAX_DELAY);
 8002c90:	f04f 33ff 	mov.w	r3, #4294967295
 8002c94:	2208      	movs	r2, #8
 8002c96:	4968      	ldr	r1, [pc, #416]	@ (8002e38 <HandleInput+0x3c0>)
 8002c98:	4868      	ldr	r0, [pc, #416]	@ (8002e3c <HandleInput+0x3c4>)
 8002c9a:	f003 fb9b 	bl	80063d4 <HAL_UART_Transmit>
							clearArrayEle(buf1 ,8);
 8002c9e:	2108      	movs	r1, #8
 8002ca0:	4865      	ldr	r0, [pc, #404]	@ (8002e38 <HandleInput+0x3c0>)
 8002ca2:	f7ff fca9 	bl	80025f8 <clearArrayEle>

							//save the notification locally and send it to the ESP32
							sprintf(buf,"User 2 all mails were retrieved\n");
 8002ca6:	496c      	ldr	r1, [pc, #432]	@ (8002e58 <HandleInput+0x3e0>)
 8002ca8:	4866      	ldr	r0, [pc, #408]	@ (8002e44 <HandleInput+0x3cc>)
 8002caa:	f004 f87d 	bl	8006da8 <siprintf>
							HAL_UART_Transmit(&huart2,buf,sizeof(buf), HAL_MAX_DELAY);
 8002cae:	f04f 33ff 	mov.w	r3, #4294967295
 8002cb2:	2246      	movs	r2, #70	@ 0x46
 8002cb4:	4963      	ldr	r1, [pc, #396]	@ (8002e44 <HandleInput+0x3cc>)
 8002cb6:	4861      	ldr	r0, [pc, #388]	@ (8002e3c <HandleInput+0x3c4>)
 8002cb8:	f003 fb8c 	bl	80063d4 <HAL_UART_Transmit>
							clearArrayEle(buf ,70);
 8002cbc:	2146      	movs	r1, #70	@ 0x46
 8002cbe:	4861      	ldr	r0, [pc, #388]	@ (8002e44 <HandleInput+0x3cc>)
 8002cc0:	f7ff fc9a 	bl	80025f8 <clearArrayEle>
	                	}
	                	if(currentState == RETRIEVE_PACKAGE)
 8002cc4:	4b58      	ldr	r3, [pc, #352]	@ (8002e28 <HandleInput+0x3b0>)
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	2b08      	cmp	r3, #8
 8002cca:	d134      	bne.n	8002d36 <HandleInput+0x2be>
						{
							user2Info.parcelFlag = FALSE;
 8002ccc:	4b60      	ldr	r3, [pc, #384]	@ (8002e50 <HandleInput+0x3d8>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	70da      	strb	r2, [r3, #3]
							HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002cd8:	4855      	ldr	r0, [pc, #340]	@ (8002e30 <HandleInput+0x3b8>)
 8002cda:	f000 ffd3 	bl	8003c84 <HAL_GPIO_WritePin>

							__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 1500);
 8002cde:	4b5a      	ldr	r3, [pc, #360]	@ (8002e48 <HandleInput+0x3d0>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8002ce6:	641a      	str	r2, [r3, #64]	@ 0x40
							//allow delay to place the package and close after delay
							HAL_Delay(10000);
 8002ce8:	f242 7010 	movw	r0, #10000	@ 0x2710
 8002cec:	f000 fd0c 	bl	8003708 <HAL_Delay>
							__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 500);
 8002cf0:	4b55      	ldr	r3, [pc, #340]	@ (8002e48 <HandleInput+0x3d0>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002cf8:	641a      	str	r2, [r3, #64]	@ 0x40

							sprintf(buf1,"USER2\n\r");
 8002cfa:	4956      	ldr	r1, [pc, #344]	@ (8002e54 <HandleInput+0x3dc>)
 8002cfc:	484e      	ldr	r0, [pc, #312]	@ (8002e38 <HandleInput+0x3c0>)
 8002cfe:	f004 f853 	bl	8006da8 <siprintf>
							HAL_UART_Transmit(&huart2,buf1,sizeof(buf1), HAL_MAX_DELAY);
 8002d02:	f04f 33ff 	mov.w	r3, #4294967295
 8002d06:	2208      	movs	r2, #8
 8002d08:	494b      	ldr	r1, [pc, #300]	@ (8002e38 <HandleInput+0x3c0>)
 8002d0a:	484c      	ldr	r0, [pc, #304]	@ (8002e3c <HandleInput+0x3c4>)
 8002d0c:	f003 fb62 	bl	80063d4 <HAL_UART_Transmit>
							clearArrayEle(buf1 ,8);
 8002d10:	2108      	movs	r1, #8
 8002d12:	4849      	ldr	r0, [pc, #292]	@ (8002e38 <HandleInput+0x3c0>)
 8002d14:	f7ff fc70 	bl	80025f8 <clearArrayEle>

							//save the notification locally and send it to the ESP32
							sprintf(buf,"User 2 all packages were retrieved\n");
 8002d18:	4950      	ldr	r1, [pc, #320]	@ (8002e5c <HandleInput+0x3e4>)
 8002d1a:	484a      	ldr	r0, [pc, #296]	@ (8002e44 <HandleInput+0x3cc>)
 8002d1c:	f004 f844 	bl	8006da8 <siprintf>
							HAL_UART_Transmit(&huart2,buf,sizeof(buf), HAL_MAX_DELAY);
 8002d20:	f04f 33ff 	mov.w	r3, #4294967295
 8002d24:	2246      	movs	r2, #70	@ 0x46
 8002d26:	4947      	ldr	r1, [pc, #284]	@ (8002e44 <HandleInput+0x3cc>)
 8002d28:	4844      	ldr	r0, [pc, #272]	@ (8002e3c <HandleInput+0x3c4>)
 8002d2a:	f003 fb53 	bl	80063d4 <HAL_UART_Transmit>
							clearArrayEle(buf ,70);
 8002d2e:	2146      	movs	r1, #70	@ 0x46
 8002d30:	4844      	ldr	r0, [pc, #272]	@ (8002e44 <HandleInput+0x3cc>)
 8002d32:	f7ff fc61 	bl	80025f8 <clearArrayEle>
							/*__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 2500);
							HAL_Delay(3000);
							__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 500);*/
						}
	                }
	                if(currentUser == 3)
 8002d36:	4b3b      	ldr	r3, [pc, #236]	@ (8002e24 <HandleInput+0x3ac>)
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	2b03      	cmp	r3, #3
 8002d3c:	d163      	bne.n	8002e06 <HandleInput+0x38e>
	                {
	                	if(currentState == RETRIEVE_MAIL)
 8002d3e:	4b3a      	ldr	r3, [pc, #232]	@ (8002e28 <HandleInput+0x3b0>)
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	2b06      	cmp	r3, #6
 8002d44:	d126      	bne.n	8002d94 <HandleInput+0x31c>
	                	{
	                		user3Info.mailFlag = FALSE;
 8002d46:	4b46      	ldr	r3, [pc, #280]	@ (8002e60 <HandleInput+0x3e8>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	709a      	strb	r2, [r3, #2]
	                		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002d52:	4837      	ldr	r0, [pc, #220]	@ (8002e30 <HandleInput+0x3b8>)
 8002d54:	f000 ff96 	bl	8003c84 <HAL_GPIO_WritePin>
	                		sprintf(buf1,"USER3\n\r");
 8002d58:	4942      	ldr	r1, [pc, #264]	@ (8002e64 <HandleInput+0x3ec>)
 8002d5a:	4837      	ldr	r0, [pc, #220]	@ (8002e38 <HandleInput+0x3c0>)
 8002d5c:	f004 f824 	bl	8006da8 <siprintf>
							HAL_UART_Transmit(&huart2,buf1,sizeof(buf1), HAL_MAX_DELAY);
 8002d60:	f04f 33ff 	mov.w	r3, #4294967295
 8002d64:	2208      	movs	r2, #8
 8002d66:	4934      	ldr	r1, [pc, #208]	@ (8002e38 <HandleInput+0x3c0>)
 8002d68:	4834      	ldr	r0, [pc, #208]	@ (8002e3c <HandleInput+0x3c4>)
 8002d6a:	f003 fb33 	bl	80063d4 <HAL_UART_Transmit>
							clearArrayEle(buf1 ,8);
 8002d6e:	2108      	movs	r1, #8
 8002d70:	4831      	ldr	r0, [pc, #196]	@ (8002e38 <HandleInput+0x3c0>)
 8002d72:	f7ff fc41 	bl	80025f8 <clearArrayEle>

							//save the notification locally and send it to the ESP32
							sprintf(buf,"User 3 all mails were retrieved\n");
 8002d76:	493c      	ldr	r1, [pc, #240]	@ (8002e68 <HandleInput+0x3f0>)
 8002d78:	4832      	ldr	r0, [pc, #200]	@ (8002e44 <HandleInput+0x3cc>)
 8002d7a:	f004 f815 	bl	8006da8 <siprintf>
							HAL_UART_Transmit(&huart2,buf,sizeof(buf), HAL_MAX_DELAY);
 8002d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8002d82:	2246      	movs	r2, #70	@ 0x46
 8002d84:	492f      	ldr	r1, [pc, #188]	@ (8002e44 <HandleInput+0x3cc>)
 8002d86:	482d      	ldr	r0, [pc, #180]	@ (8002e3c <HandleInput+0x3c4>)
 8002d88:	f003 fb24 	bl	80063d4 <HAL_UART_Transmit>
							clearArrayEle(buf ,70);
 8002d8c:	2146      	movs	r1, #70	@ 0x46
 8002d8e:	482d      	ldr	r0, [pc, #180]	@ (8002e44 <HandleInput+0x3cc>)
 8002d90:	f7ff fc32 	bl	80025f8 <clearArrayEle>
	                	}
	                	if(currentState == RETRIEVE_PACKAGE)
 8002d94:	4b24      	ldr	r3, [pc, #144]	@ (8002e28 <HandleInput+0x3b0>)
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	2b08      	cmp	r3, #8
 8002d9a:	d134      	bne.n	8002e06 <HandleInput+0x38e>
						{
							user2Info.parcelFlag = FALSE;
 8002d9c:	4b2c      	ldr	r3, [pc, #176]	@ (8002e50 <HandleInput+0x3d8>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	70da      	strb	r2, [r3, #3]
							HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8002da2:	2200      	movs	r2, #0
 8002da4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002da8:	4821      	ldr	r0, [pc, #132]	@ (8002e30 <HandleInput+0x3b8>)
 8002daa:	f000 ff6b 	bl	8003c84 <HAL_GPIO_WritePin>

							__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 1500);
 8002dae:	4b26      	ldr	r3, [pc, #152]	@ (8002e48 <HandleInput+0x3d0>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8002db6:	641a      	str	r2, [r3, #64]	@ 0x40
							//allow delay to place the package and close after delay
							HAL_Delay(10000);
 8002db8:	f242 7010 	movw	r0, #10000	@ 0x2710
 8002dbc:	f000 fca4 	bl	8003708 <HAL_Delay>
							__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 500);
 8002dc0:	4b21      	ldr	r3, [pc, #132]	@ (8002e48 <HandleInput+0x3d0>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002dc8:	641a      	str	r2, [r3, #64]	@ 0x40

							sprintf(buf1,"USER3\n\r");
 8002dca:	4926      	ldr	r1, [pc, #152]	@ (8002e64 <HandleInput+0x3ec>)
 8002dcc:	481a      	ldr	r0, [pc, #104]	@ (8002e38 <HandleInput+0x3c0>)
 8002dce:	f003 ffeb 	bl	8006da8 <siprintf>
							HAL_UART_Transmit(&huart2,buf1,sizeof(buf1), HAL_MAX_DELAY);
 8002dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8002dd6:	2208      	movs	r2, #8
 8002dd8:	4917      	ldr	r1, [pc, #92]	@ (8002e38 <HandleInput+0x3c0>)
 8002dda:	4818      	ldr	r0, [pc, #96]	@ (8002e3c <HandleInput+0x3c4>)
 8002ddc:	f003 fafa 	bl	80063d4 <HAL_UART_Transmit>
							clearArrayEle(buf1 ,8);
 8002de0:	2108      	movs	r1, #8
 8002de2:	4815      	ldr	r0, [pc, #84]	@ (8002e38 <HandleInput+0x3c0>)
 8002de4:	f7ff fc08 	bl	80025f8 <clearArrayEle>

							//save the notification locally and send it to the ESP32
							sprintf(buf,"User 3 all packages were retrieved\n");
 8002de8:	4920      	ldr	r1, [pc, #128]	@ (8002e6c <HandleInput+0x3f4>)
 8002dea:	4816      	ldr	r0, [pc, #88]	@ (8002e44 <HandleInput+0x3cc>)
 8002dec:	f003 ffdc 	bl	8006da8 <siprintf>
							HAL_UART_Transmit(&huart2,buf,sizeof(buf), HAL_MAX_DELAY);
 8002df0:	f04f 33ff 	mov.w	r3, #4294967295
 8002df4:	2246      	movs	r2, #70	@ 0x46
 8002df6:	4913      	ldr	r1, [pc, #76]	@ (8002e44 <HandleInput+0x3cc>)
 8002df8:	4810      	ldr	r0, [pc, #64]	@ (8002e3c <HandleInput+0x3c4>)
 8002dfa:	f003 faeb 	bl	80063d4 <HAL_UART_Transmit>
							clearArrayEle(buf ,70);
 8002dfe:	2146      	movs	r1, #70	@ 0x46
 8002e00:	4810      	ldr	r0, [pc, #64]	@ (8002e44 <HandleInput+0x3cc>)
 8002e02:	f7ff fbf9 	bl	80025f8 <clearArrayEle>
							/*__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 2500);
							HAL_Delay(3000);
							__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 500);*/
						}
	                }
	                currentState = MAIN_MENU;
 8002e06:	4b08      	ldr	r3, [pc, #32]	@ (8002e28 <HandleInput+0x3b0>)
 8002e08:	2201      	movs	r2, #1
 8002e0a:	701a      	strb	r2, [r3, #0]
	                enteringPassword = FALSE;
 8002e0c:	4b18      	ldr	r3, [pc, #96]	@ (8002e70 <HandleInput+0x3f8>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	701a      	strb	r2, [r3, #0]
	                    setLCDHMIscreen("Enter Password", "****");
	                    passwordIndex = 0;
	                }
	            }
	        }
	        return;
 8002e12:	e12b      	b.n	800306c <HandleInput+0x5f4>
 8002e14:	2000025d 	.word	0x2000025d
 8002e18:	20000258 	.word	0x20000258
 8002e1c:	080082e0 	.word	0x080082e0
 8002e20:	080082ec 	.word	0x080082ec
 8002e24:	20000254 	.word	0x20000254
 8002e28:	20000035 	.word	0x20000035
 8002e2c:	20000248 	.word	0x20000248
 8002e30:	40020800 	.word	0x40020800
 8002e34:	08007f94 	.word	0x08007f94
 8002e38:	200002a8 	.word	0x200002a8
 8002e3c:	200001e8 	.word	0x200001e8
 8002e40:	080082fc 	.word	0x080082fc
 8002e44:	20000260 	.word	0x20000260
 8002e48:	200001a0 	.word	0x200001a0
 8002e4c:	08008320 	.word	0x08008320
 8002e50:	2000024c 	.word	0x2000024c
 8002e54:	0800802c 	.word	0x0800802c
 8002e58:	08008344 	.word	0x08008344
 8002e5c:	08008368 	.word	0x08008368
 8002e60:	20000250 	.word	0x20000250
 8002e64:	08008180 	.word	0x08008180
 8002e68:	0800838c 	.word	0x0800838c
 8002e6c:	080083b0 	.word	0x080083b0
 8002e70:	2000025f 	.word	0x2000025f
	                attempts++;
 8002e74:	4b7f      	ldr	r3, [pc, #508]	@ (8003074 <HandleInput+0x5fc>)
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	3301      	adds	r3, #1
 8002e7a:	b2da      	uxtb	r2, r3
 8002e7c:	4b7d      	ldr	r3, [pc, #500]	@ (8003074 <HandleInput+0x5fc>)
 8002e7e:	701a      	strb	r2, [r3, #0]
	                if (attempts >= 3) {
 8002e80:	4b7c      	ldr	r3, [pc, #496]	@ (8003074 <HandleInput+0x5fc>)
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d910      	bls.n	8002eaa <HandleInput+0x432>
	                    setLCDHMIscreen("Access Denied", "Too Many Tries");
 8002e88:	497b      	ldr	r1, [pc, #492]	@ (8003078 <HandleInput+0x600>)
 8002e8a:	487c      	ldr	r0, [pc, #496]	@ (800307c <HandleInput+0x604>)
 8002e8c:	f7ff fc5b 	bl	8002746 <setLCDHMIscreen>
	                    HAL_Delay(2000);
 8002e90:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002e94:	f000 fc38 	bl	8003708 <HAL_Delay>
	                    welcomeMsglcd();
 8002e98:	f7ff fc1e 	bl	80026d8 <welcomeMsglcd>
	                    currentState = MAIN_MENU;
 8002e9c:	4b78      	ldr	r3, [pc, #480]	@ (8003080 <HandleInput+0x608>)
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	701a      	strb	r2, [r3, #0]
	                    enteringPassword = FALSE;
 8002ea2:	4b78      	ldr	r3, [pc, #480]	@ (8003084 <HandleInput+0x60c>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	701a      	strb	r2, [r3, #0]
	        return;
 8002ea8:	e0e0      	b.n	800306c <HandleInput+0x5f4>
	                    setLCDHMIscreen("Incorrect!", "Try Again");
 8002eaa:	4977      	ldr	r1, [pc, #476]	@ (8003088 <HandleInput+0x610>)
 8002eac:	4877      	ldr	r0, [pc, #476]	@ (800308c <HandleInput+0x614>)
 8002eae:	f7ff fc4a 	bl	8002746 <setLCDHMIscreen>
	                    HAL_Delay(1500);
 8002eb2:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8002eb6:	f000 fc27 	bl	8003708 <HAL_Delay>
	                    setLCDHMIscreen("Enter Password", "****");
 8002eba:	4975      	ldr	r1, [pc, #468]	@ (8003090 <HandleInput+0x618>)
 8002ebc:	4875      	ldr	r0, [pc, #468]	@ (8003094 <HandleInput+0x61c>)
 8002ebe:	f7ff fc42 	bl	8002746 <setLCDHMIscreen>
	                    passwordIndex = 0;
 8002ec2:	4b75      	ldr	r3, [pc, #468]	@ (8003098 <HandleInput+0x620>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	701a      	strb	r2, [r3, #0]
	        return;
 8002ec8:	e0d0      	b.n	800306c <HandleInput+0x5f4>
	    }


	switch(key)
 8002eca:	79fb      	ldrb	r3, [r7, #7]
 8002ecc:	3b23      	subs	r3, #35	@ 0x23
 8002ece:	2b20      	cmp	r3, #32
 8002ed0:	f200 80bb 	bhi.w	800304a <HandleInput+0x5d2>
 8002ed4:	a201      	add	r2, pc, #4	@ (adr r2, 8002edc <HandleInput+0x464>)
 8002ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eda:	bf00      	nop
 8002edc:	08002f7f 	.word	0x08002f7f
 8002ee0:	0800304b 	.word	0x0800304b
 8002ee4:	0800304b 	.word	0x0800304b
 8002ee8:	0800304b 	.word	0x0800304b
 8002eec:	0800304b 	.word	0x0800304b
 8002ef0:	0800304b 	.word	0x0800304b
 8002ef4:	0800304b 	.word	0x0800304b
 8002ef8:	08002f77 	.word	0x08002f77
 8002efc:	0800304b 	.word	0x0800304b
 8002f00:	0800304b 	.word	0x0800304b
 8002f04:	0800304b 	.word	0x0800304b
 8002f08:	0800304b 	.word	0x0800304b
 8002f0c:	0800304b 	.word	0x0800304b
 8002f10:	08002f61 	.word	0x08002f61
 8002f14:	08002feb 	.word	0x08002feb
 8002f18:	0800301b 	.word	0x0800301b
 8002f1c:	0800304b 	.word	0x0800304b
 8002f20:	0800304b 	.word	0x0800304b
 8002f24:	0800304b 	.word	0x0800304b
 8002f28:	0800304b 	.word	0x0800304b
 8002f2c:	0800304b 	.word	0x0800304b
 8002f30:	0800304b 	.word	0x0800304b
 8002f34:	0800304b 	.word	0x0800304b
 8002f38:	0800304b 	.word	0x0800304b
 8002f3c:	0800304b 	.word	0x0800304b
 8002f40:	0800304b 	.word	0x0800304b
 8002f44:	0800304b 	.word	0x0800304b
 8002f48:	0800304b 	.word	0x0800304b
 8002f4c:	0800304b 	.word	0x0800304b
 8002f50:	0800304b 	.word	0x0800304b
 8002f54:	08002fd9 	.word	0x08002fd9
 8002f58:	08002fd9 	.word	0x08002fd9
 8002f5c:	08002fd9 	.word	0x08002fd9
	{
		case '0':
			if (!enteringPassword) currentState = HOME_SCREEN;
 8002f60:	4b48      	ldr	r3, [pc, #288]	@ (8003084 <HandleInput+0x60c>)
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	f083 0301 	eor.w	r3, r3, #1
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d06f      	beq.n	800304e <HandleInput+0x5d6>
 8002f6e:	4b44      	ldr	r3, [pc, #272]	@ (8003080 <HandleInput+0x608>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	701a      	strb	r2, [r3, #0]
			break;
 8002f74:	e06b      	b.n	800304e <HandleInput+0x5d6>
		case '*':
			currentState = MAIN_MENU;
 8002f76:	4b42      	ldr	r3, [pc, #264]	@ (8003080 <HandleInput+0x608>)
 8002f78:	2201      	movs	r2, #1
 8002f7a:	701a      	strb	r2, [r3, #0]
			break;
 8002f7c:	e06e      	b.n	800305c <HandleInput+0x5e4>
		case '#':
			if(currentState == CHECK_MAIL || currentState == RETRIEVE_MAIL)
 8002f7e:	4b40      	ldr	r3, [pc, #256]	@ (8003080 <HandleInput+0x608>)
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	2b05      	cmp	r3, #5
 8002f84:	d003      	beq.n	8002f8e <HandleInput+0x516>
 8002f86:	4b3e      	ldr	r3, [pc, #248]	@ (8003080 <HandleInput+0x608>)
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	2b06      	cmp	r3, #6
 8002f8c:	d103      	bne.n	8002f96 <HandleInput+0x51e>
			{
				currentState = MAIL_MENU;
 8002f8e:	4b3c      	ldr	r3, [pc, #240]	@ (8003080 <HandleInput+0x608>)
 8002f90:	2203      	movs	r2, #3
 8002f92:	701a      	strb	r2, [r3, #0]
 8002f94:	e01f      	b.n	8002fd6 <HandleInput+0x55e>
			}
			else if(currentState == CHECK_PACKAGE || currentState == RETRIEVE_PACKAGE)
 8002f96:	4b3a      	ldr	r3, [pc, #232]	@ (8003080 <HandleInput+0x608>)
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	2b07      	cmp	r3, #7
 8002f9c:	d003      	beq.n	8002fa6 <HandleInput+0x52e>
 8002f9e:	4b38      	ldr	r3, [pc, #224]	@ (8003080 <HandleInput+0x608>)
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	2b08      	cmp	r3, #8
 8002fa4:	d103      	bne.n	8002fae <HandleInput+0x536>
			{
				currentState = PACKAGE_MENU;
 8002fa6:	4b36      	ldr	r3, [pc, #216]	@ (8003080 <HandleInput+0x608>)
 8002fa8:	2204      	movs	r2, #4
 8002faa:	701a      	strb	r2, [r3, #0]
 8002fac:	e013      	b.n	8002fd6 <HandleInput+0x55e>
			}
			else if(currentState == MAIL_MENU || currentState == PACKAGE_MENU)
 8002fae:	4b34      	ldr	r3, [pc, #208]	@ (8003080 <HandleInput+0x608>)
 8002fb0:	781b      	ldrb	r3, [r3, #0]
 8002fb2:	2b03      	cmp	r3, #3
 8002fb4:	d003      	beq.n	8002fbe <HandleInput+0x546>
 8002fb6:	4b32      	ldr	r3, [pc, #200]	@ (8003080 <HandleInput+0x608>)
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	2b04      	cmp	r3, #4
 8002fbc:	d103      	bne.n	8002fc6 <HandleInput+0x54e>
			{
				currentState = USER_MENU;
 8002fbe:	4b30      	ldr	r3, [pc, #192]	@ (8003080 <HandleInput+0x608>)
 8002fc0:	2202      	movs	r2, #2
 8002fc2:	701a      	strb	r2, [r3, #0]
 8002fc4:	e007      	b.n	8002fd6 <HandleInput+0x55e>
			}
			else if(currentState == USER_MENU)
 8002fc6:	4b2e      	ldr	r3, [pc, #184]	@ (8003080 <HandleInput+0x608>)
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d141      	bne.n	8003052 <HandleInput+0x5da>
			{
				 currentState = MAIN_MENU;
 8002fce:	4b2c      	ldr	r3, [pc, #176]	@ (8003080 <HandleInput+0x608>)
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002fd4:	e03d      	b.n	8003052 <HandleInput+0x5da>
 8002fd6:	e03c      	b.n	8003052 <HandleInput+0x5da>
		case 'A': case 'B': case 'C':
		    currentUser = key - 'A' + 1;
 8002fd8:	79fb      	ldrb	r3, [r7, #7]
 8002fda:	3b40      	subs	r3, #64	@ 0x40
 8002fdc:	b2da      	uxtb	r2, r3
 8002fde:	4b2f      	ldr	r3, [pc, #188]	@ (800309c <HandleInput+0x624>)
 8002fe0:	701a      	strb	r2, [r3, #0]
		    currentState = USER_MENU;
 8002fe2:	4b27      	ldr	r3, [pc, #156]	@ (8003080 <HandleInput+0x608>)
 8002fe4:	2202      	movs	r2, #2
 8002fe6:	701a      	strb	r2, [r3, #0]
		    break;
 8002fe8:	e038      	b.n	800305c <HandleInput+0x5e4>
		case '1':  // Navigate inside user sub menus
			///if(currentState != RETRIEVE_MAIL && currentState != RETRIEVE_PACKAGE)
			if (currentState == USER_MENU) currentState = MAIL_MENU;
 8002fea:	4b25      	ldr	r3, [pc, #148]	@ (8003080 <HandleInput+0x608>)
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d103      	bne.n	8002ffa <HandleInput+0x582>
 8002ff2:	4b23      	ldr	r3, [pc, #140]	@ (8003080 <HandleInput+0x608>)
 8002ff4:	2203      	movs	r2, #3
 8002ff6:	701a      	strb	r2, [r3, #0]
			else if (currentState == MAIL_MENU) currentState = CHECK_MAIL;
			else if (currentState == PACKAGE_MENU) currentState = CHECK_PACKAGE;
			break;
 8002ff8:	e02d      	b.n	8003056 <HandleInput+0x5de>
			else if (currentState == MAIL_MENU) currentState = CHECK_MAIL;
 8002ffa:	4b21      	ldr	r3, [pc, #132]	@ (8003080 <HandleInput+0x608>)
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	2b03      	cmp	r3, #3
 8003000:	d103      	bne.n	800300a <HandleInput+0x592>
 8003002:	4b1f      	ldr	r3, [pc, #124]	@ (8003080 <HandleInput+0x608>)
 8003004:	2205      	movs	r2, #5
 8003006:	701a      	strb	r2, [r3, #0]
			break;
 8003008:	e025      	b.n	8003056 <HandleInput+0x5de>
			else if (currentState == PACKAGE_MENU) currentState = CHECK_PACKAGE;
 800300a:	4b1d      	ldr	r3, [pc, #116]	@ (8003080 <HandleInput+0x608>)
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	2b04      	cmp	r3, #4
 8003010:	d121      	bne.n	8003056 <HandleInput+0x5de>
 8003012:	4b1b      	ldr	r3, [pc, #108]	@ (8003080 <HandleInput+0x608>)
 8003014:	2207      	movs	r2, #7
 8003016:	701a      	strb	r2, [r3, #0]
			break;
 8003018:	e01d      	b.n	8003056 <HandleInput+0x5de>
		case '2':
			//if(currentState != RETRIEVE_MAIL && currentState != RETRIEVE_PACKAGE)
			if (currentState == USER_MENU) currentState = PACKAGE_MENU;
 800301a:	4b19      	ldr	r3, [pc, #100]	@ (8003080 <HandleInput+0x608>)
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	2b02      	cmp	r3, #2
 8003020:	d103      	bne.n	800302a <HandleInput+0x5b2>
 8003022:	4b17      	ldr	r3, [pc, #92]	@ (8003080 <HandleInput+0x608>)
 8003024:	2204      	movs	r2, #4
 8003026:	701a      	strb	r2, [r3, #0]
			else if (currentState == MAIL_MENU) currentState = RETRIEVE_MAIL;
			else if (currentState == PACKAGE_MENU) currentState = RETRIEVE_PACKAGE;
			break;
 8003028:	e017      	b.n	800305a <HandleInput+0x5e2>
			else if (currentState == MAIL_MENU) currentState = RETRIEVE_MAIL;
 800302a:	4b15      	ldr	r3, [pc, #84]	@ (8003080 <HandleInput+0x608>)
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	2b03      	cmp	r3, #3
 8003030:	d103      	bne.n	800303a <HandleInput+0x5c2>
 8003032:	4b13      	ldr	r3, [pc, #76]	@ (8003080 <HandleInput+0x608>)
 8003034:	2206      	movs	r2, #6
 8003036:	701a      	strb	r2, [r3, #0]
			break;
 8003038:	e00f      	b.n	800305a <HandleInput+0x5e2>
			else if (currentState == PACKAGE_MENU) currentState = RETRIEVE_PACKAGE;
 800303a:	4b11      	ldr	r3, [pc, #68]	@ (8003080 <HandleInput+0x608>)
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	2b04      	cmp	r3, #4
 8003040:	d10b      	bne.n	800305a <HandleInput+0x5e2>
 8003042:	4b0f      	ldr	r3, [pc, #60]	@ (8003080 <HandleInput+0x608>)
 8003044:	2208      	movs	r2, #8
 8003046:	701a      	strb	r2, [r3, #0]
			break;
 8003048:	e007      	b.n	800305a <HandleInput+0x5e2>
		default:
			break;
 800304a:	bf00      	nop
 800304c:	e006      	b.n	800305c <HandleInput+0x5e4>
			break;
 800304e:	bf00      	nop
 8003050:	e004      	b.n	800305c <HandleInput+0x5e4>
			break;
 8003052:	bf00      	nop
 8003054:	e002      	b.n	800305c <HandleInput+0x5e4>
			break;
 8003056:	bf00      	nop
 8003058:	e000      	b.n	800305c <HandleInput+0x5e4>
			break;
 800305a:	bf00      	nop
	}
	DisplayMenu(currentState,key);
 800305c:	4b08      	ldr	r3, [pc, #32]	@ (8003080 <HandleInput+0x608>)
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	79fa      	ldrb	r2, [r7, #7]
 8003062:	4611      	mov	r1, r2
 8003064:	4618      	mov	r0, r3
 8003066:	f7ff fb87 	bl	8002778 <DisplayMenu>
 800306a:	e000      	b.n	800306e <HandleInput+0x5f6>
	        return;
 800306c:	bf00      	nop
}
 800306e:	3720      	adds	r7, #32
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	2000025e 	.word	0x2000025e
 8003078:	080083d4 	.word	0x080083d4
 800307c:	080083e4 	.word	0x080083e4
 8003080:	20000035 	.word	0x20000035
 8003084:	2000025f 	.word	0x2000025f
 8003088:	080083f4 	.word	0x080083f4
 800308c:	08008400 	.word	0x08008400
 8003090:	08008264 	.word	0x08008264
 8003094:	0800826c 	.word	0x0800826c
 8003098:	2000025d 	.word	0x2000025d
 800309c:	20000254 	.word	0x20000254

080030a0 <generate_password>:

//Generate password
void generate_password(uchar *password)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
	srand(HAL_GetTick());
 80030a8:	f000 fb22 	bl	80036f0 <HAL_GetTick>
 80030ac:	4603      	mov	r3, r0
 80030ae:	4618      	mov	r0, r3
 80030b0:	f003 fd4c 	bl	8006b4c <srand>
	for (int i = 0; i < 4; i++) {
 80030b4:	2300      	movs	r3, #0
 80030b6:	60fb      	str	r3, [r7, #12]
 80030b8:	e017      	b.n	80030ea <generate_password+0x4a>
	        password[i] = '0' + (rand() % 10);  // Generate random 0-9 digit
 80030ba:	f003 fd75 	bl	8006ba8 <rand>
 80030be:	4602      	mov	r2, r0
 80030c0:	4b0f      	ldr	r3, [pc, #60]	@ (8003100 <generate_password+0x60>)
 80030c2:	fb83 1302 	smull	r1, r3, r3, r2
 80030c6:	1099      	asrs	r1, r3, #2
 80030c8:	17d3      	asrs	r3, r2, #31
 80030ca:	1ac9      	subs	r1, r1, r3
 80030cc:	460b      	mov	r3, r1
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	440b      	add	r3, r1
 80030d2:	005b      	lsls	r3, r3, #1
 80030d4:	1ad1      	subs	r1, r2, r3
 80030d6:	b2ca      	uxtb	r2, r1
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6879      	ldr	r1, [r7, #4]
 80030dc:	440b      	add	r3, r1
 80030de:	3230      	adds	r2, #48	@ 0x30
 80030e0:	b2d2      	uxtb	r2, r2
 80030e2:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 4; i++) {
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	3301      	adds	r3, #1
 80030e8:	60fb      	str	r3, [r7, #12]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2b03      	cmp	r3, #3
 80030ee:	dde4      	ble.n	80030ba <generate_password+0x1a>
	    }
	password[4] = '\0';
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	3304      	adds	r3, #4
 80030f4:	2200      	movs	r2, #0
 80030f6:	701a      	strb	r2, [r3, #0]
}
 80030f8:	bf00      	nop
 80030fa:	3710      	adds	r7, #16
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	66666667 	.word	0x66666667

08003104 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003104:	b480      	push	{r7}
 8003106:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003108:	b672      	cpsid	i
}
 800310a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800310c:	bf00      	nop
 800310e:	e7fd      	b.n	800310c <Error_Handler+0x8>

08003110 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003116:	2300      	movs	r3, #0
 8003118:	607b      	str	r3, [r7, #4]
 800311a:	4b10      	ldr	r3, [pc, #64]	@ (800315c <HAL_MspInit+0x4c>)
 800311c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800311e:	4a0f      	ldr	r2, [pc, #60]	@ (800315c <HAL_MspInit+0x4c>)
 8003120:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003124:	6453      	str	r3, [r2, #68]	@ 0x44
 8003126:	4b0d      	ldr	r3, [pc, #52]	@ (800315c <HAL_MspInit+0x4c>)
 8003128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800312a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800312e:	607b      	str	r3, [r7, #4]
 8003130:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003132:	2300      	movs	r3, #0
 8003134:	603b      	str	r3, [r7, #0]
 8003136:	4b09      	ldr	r3, [pc, #36]	@ (800315c <HAL_MspInit+0x4c>)
 8003138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800313a:	4a08      	ldr	r2, [pc, #32]	@ (800315c <HAL_MspInit+0x4c>)
 800313c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003140:	6413      	str	r3, [r2, #64]	@ 0x40
 8003142:	4b06      	ldr	r3, [pc, #24]	@ (800315c <HAL_MspInit+0x4c>)
 8003144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003146:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800314a:	603b      	str	r3, [r7, #0]
 800314c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800314e:	2007      	movs	r0, #7
 8003150:	f000 fbb0 	bl	80038b4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003154:	bf00      	nop
 8003156:	3708      	adds	r7, #8
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	40023800 	.word	0x40023800

08003160 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b08a      	sub	sp, #40	@ 0x28
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003168:	f107 0314 	add.w	r3, r7, #20
 800316c:	2200      	movs	r2, #0
 800316e:	601a      	str	r2, [r3, #0]
 8003170:	605a      	str	r2, [r3, #4]
 8003172:	609a      	str	r2, [r3, #8]
 8003174:	60da      	str	r2, [r3, #12]
 8003176:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a19      	ldr	r2, [pc, #100]	@ (80031e4 <HAL_I2C_MspInit+0x84>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d12c      	bne.n	80031dc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003182:	2300      	movs	r3, #0
 8003184:	613b      	str	r3, [r7, #16]
 8003186:	4b18      	ldr	r3, [pc, #96]	@ (80031e8 <HAL_I2C_MspInit+0x88>)
 8003188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800318a:	4a17      	ldr	r2, [pc, #92]	@ (80031e8 <HAL_I2C_MspInit+0x88>)
 800318c:	f043 0302 	orr.w	r3, r3, #2
 8003190:	6313      	str	r3, [r2, #48]	@ 0x30
 8003192:	4b15      	ldr	r3, [pc, #84]	@ (80031e8 <HAL_I2C_MspInit+0x88>)
 8003194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003196:	f003 0302 	and.w	r3, r3, #2
 800319a:	613b      	str	r3, [r7, #16]
 800319c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800319e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80031a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80031a4:	2312      	movs	r3, #18
 80031a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80031a8:	2301      	movs	r3, #1
 80031aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031ac:	2303      	movs	r3, #3
 80031ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80031b0:	2304      	movs	r3, #4
 80031b2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031b4:	f107 0314 	add.w	r3, r7, #20
 80031b8:	4619      	mov	r1, r3
 80031ba:	480c      	ldr	r0, [pc, #48]	@ (80031ec <HAL_I2C_MspInit+0x8c>)
 80031bc:	f000 fbae 	bl	800391c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80031c0:	2300      	movs	r3, #0
 80031c2:	60fb      	str	r3, [r7, #12]
 80031c4:	4b08      	ldr	r3, [pc, #32]	@ (80031e8 <HAL_I2C_MspInit+0x88>)
 80031c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c8:	4a07      	ldr	r2, [pc, #28]	@ (80031e8 <HAL_I2C_MspInit+0x88>)
 80031ca:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80031ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80031d0:	4b05      	ldr	r3, [pc, #20]	@ (80031e8 <HAL_I2C_MspInit+0x88>)
 80031d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031d8:	60fb      	str	r3, [r7, #12]
 80031da:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 80031dc:	bf00      	nop
 80031de:	3728      	adds	r7, #40	@ 0x28
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	40005800 	.word	0x40005800
 80031e8:	40023800 	.word	0x40023800
 80031ec:	40020400 	.word	0x40020400

080031f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b08a      	sub	sp, #40	@ 0x28
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031f8:	f107 0314 	add.w	r3, r7, #20
 80031fc:	2200      	movs	r2, #0
 80031fe:	601a      	str	r2, [r3, #0]
 8003200:	605a      	str	r2, [r3, #4]
 8003202:	609a      	str	r2, [r3, #8]
 8003204:	60da      	str	r2, [r3, #12]
 8003206:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a19      	ldr	r2, [pc, #100]	@ (8003274 <HAL_SPI_MspInit+0x84>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d12b      	bne.n	800326a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003212:	2300      	movs	r3, #0
 8003214:	613b      	str	r3, [r7, #16]
 8003216:	4b18      	ldr	r3, [pc, #96]	@ (8003278 <HAL_SPI_MspInit+0x88>)
 8003218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800321a:	4a17      	ldr	r2, [pc, #92]	@ (8003278 <HAL_SPI_MspInit+0x88>)
 800321c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003220:	6453      	str	r3, [r2, #68]	@ 0x44
 8003222:	4b15      	ldr	r3, [pc, #84]	@ (8003278 <HAL_SPI_MspInit+0x88>)
 8003224:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003226:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800322a:	613b      	str	r3, [r7, #16]
 800322c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800322e:	2300      	movs	r3, #0
 8003230:	60fb      	str	r3, [r7, #12]
 8003232:	4b11      	ldr	r3, [pc, #68]	@ (8003278 <HAL_SPI_MspInit+0x88>)
 8003234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003236:	4a10      	ldr	r2, [pc, #64]	@ (8003278 <HAL_SPI_MspInit+0x88>)
 8003238:	f043 0301 	orr.w	r3, r3, #1
 800323c:	6313      	str	r3, [r2, #48]	@ 0x30
 800323e:	4b0e      	ldr	r3, [pc, #56]	@ (8003278 <HAL_SPI_MspInit+0x88>)
 8003240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003242:	f003 0301 	and.w	r3, r3, #1
 8003246:	60fb      	str	r3, [r7, #12]
 8003248:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800324a:	23e0      	movs	r3, #224	@ 0xe0
 800324c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800324e:	2302      	movs	r3, #2
 8003250:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003252:	2300      	movs	r3, #0
 8003254:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003256:	2303      	movs	r3, #3
 8003258:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800325a:	2305      	movs	r3, #5
 800325c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800325e:	f107 0314 	add.w	r3, r7, #20
 8003262:	4619      	mov	r1, r3
 8003264:	4805      	ldr	r0, [pc, #20]	@ (800327c <HAL_SPI_MspInit+0x8c>)
 8003266:	f000 fb59 	bl	800391c <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800326a:	bf00      	nop
 800326c:	3728      	adds	r7, #40	@ 0x28
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	40013000 	.word	0x40013000
 8003278:	40023800 	.word	0x40023800
 800327c:	40020000 	.word	0x40020000

08003280 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003280:	b480      	push	{r7}
 8003282:	b085      	sub	sp, #20
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003290:	d10d      	bne.n	80032ae <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003292:	2300      	movs	r3, #0
 8003294:	60fb      	str	r3, [r7, #12]
 8003296:	4b09      	ldr	r3, [pc, #36]	@ (80032bc <HAL_TIM_Base_MspInit+0x3c>)
 8003298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800329a:	4a08      	ldr	r2, [pc, #32]	@ (80032bc <HAL_TIM_Base_MspInit+0x3c>)
 800329c:	f043 0301 	orr.w	r3, r3, #1
 80032a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80032a2:	4b06      	ldr	r3, [pc, #24]	@ (80032bc <HAL_TIM_Base_MspInit+0x3c>)
 80032a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a6:	f003 0301 	and.w	r3, r3, #1
 80032aa:	60fb      	str	r3, [r7, #12]
 80032ac:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80032ae:	bf00      	nop
 80032b0:	3714      	adds	r7, #20
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
 80032ba:	bf00      	nop
 80032bc:	40023800 	.word	0x40023800

080032c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b088      	sub	sp, #32
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032c8:	f107 030c 	add.w	r3, r7, #12
 80032cc:	2200      	movs	r2, #0
 80032ce:	601a      	str	r2, [r3, #0]
 80032d0:	605a      	str	r2, [r3, #4]
 80032d2:	609a      	str	r2, [r3, #8]
 80032d4:	60da      	str	r2, [r3, #12]
 80032d6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032e0:	d11d      	bne.n	800331e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032e2:	2300      	movs	r3, #0
 80032e4:	60bb      	str	r3, [r7, #8]
 80032e6:	4b10      	ldr	r3, [pc, #64]	@ (8003328 <HAL_TIM_MspPostInit+0x68>)
 80032e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ea:	4a0f      	ldr	r2, [pc, #60]	@ (8003328 <HAL_TIM_MspPostInit+0x68>)
 80032ec:	f043 0301 	orr.w	r3, r3, #1
 80032f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80032f2:	4b0d      	ldr	r3, [pc, #52]	@ (8003328 <HAL_TIM_MspPostInit+0x68>)
 80032f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032f6:	f003 0301 	and.w	r3, r3, #1
 80032fa:	60bb      	str	r3, [r7, #8]
 80032fc:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80032fe:	230f      	movs	r3, #15
 8003300:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003302:	2302      	movs	r3, #2
 8003304:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003306:	2300      	movs	r3, #0
 8003308:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800330a:	2300      	movs	r3, #0
 800330c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800330e:	2301      	movs	r3, #1
 8003310:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003312:	f107 030c 	add.w	r3, r7, #12
 8003316:	4619      	mov	r1, r3
 8003318:	4804      	ldr	r0, [pc, #16]	@ (800332c <HAL_TIM_MspPostInit+0x6c>)
 800331a:	f000 faff 	bl	800391c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800331e:	bf00      	nop
 8003320:	3720      	adds	r7, #32
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	40023800 	.word	0x40023800
 800332c:	40020000 	.word	0x40020000

08003330 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b08a      	sub	sp, #40	@ 0x28
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003338:	f107 0314 	add.w	r3, r7, #20
 800333c:	2200      	movs	r2, #0
 800333e:	601a      	str	r2, [r3, #0]
 8003340:	605a      	str	r2, [r3, #4]
 8003342:	609a      	str	r2, [r3, #8]
 8003344:	60da      	str	r2, [r3, #12]
 8003346:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a19      	ldr	r2, [pc, #100]	@ (80033b4 <HAL_UART_MspInit+0x84>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d12b      	bne.n	80033aa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003352:	2300      	movs	r3, #0
 8003354:	613b      	str	r3, [r7, #16]
 8003356:	4b18      	ldr	r3, [pc, #96]	@ (80033b8 <HAL_UART_MspInit+0x88>)
 8003358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800335a:	4a17      	ldr	r2, [pc, #92]	@ (80033b8 <HAL_UART_MspInit+0x88>)
 800335c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003360:	6413      	str	r3, [r2, #64]	@ 0x40
 8003362:	4b15      	ldr	r3, [pc, #84]	@ (80033b8 <HAL_UART_MspInit+0x88>)
 8003364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003366:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800336a:	613b      	str	r3, [r7, #16]
 800336c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800336e:	2300      	movs	r3, #0
 8003370:	60fb      	str	r3, [r7, #12]
 8003372:	4b11      	ldr	r3, [pc, #68]	@ (80033b8 <HAL_UART_MspInit+0x88>)
 8003374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003376:	4a10      	ldr	r2, [pc, #64]	@ (80033b8 <HAL_UART_MspInit+0x88>)
 8003378:	f043 0308 	orr.w	r3, r3, #8
 800337c:	6313      	str	r3, [r2, #48]	@ 0x30
 800337e:	4b0e      	ldr	r3, [pc, #56]	@ (80033b8 <HAL_UART_MspInit+0x88>)
 8003380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003382:	f003 0308 	and.w	r3, r3, #8
 8003386:	60fb      	str	r3, [r7, #12]
 8003388:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800338a:	2360      	movs	r3, #96	@ 0x60
 800338c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800338e:	2302      	movs	r3, #2
 8003390:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003392:	2300      	movs	r3, #0
 8003394:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003396:	2303      	movs	r3, #3
 8003398:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800339a:	2307      	movs	r3, #7
 800339c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800339e:	f107 0314 	add.w	r3, r7, #20
 80033a2:	4619      	mov	r1, r3
 80033a4:	4805      	ldr	r0, [pc, #20]	@ (80033bc <HAL_UART_MspInit+0x8c>)
 80033a6:	f000 fab9 	bl	800391c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80033aa:	bf00      	nop
 80033ac:	3728      	adds	r7, #40	@ 0x28
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	40004400 	.word	0x40004400
 80033b8:	40023800 	.word	0x40023800
 80033bc:	40020c00 	.word	0x40020c00

080033c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80033c0:	b480      	push	{r7}
 80033c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80033c4:	bf00      	nop
 80033c6:	e7fd      	b.n	80033c4 <NMI_Handler+0x4>

080033c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80033c8:	b480      	push	{r7}
 80033ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033cc:	bf00      	nop
 80033ce:	e7fd      	b.n	80033cc <HardFault_Handler+0x4>

080033d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80033d0:	b480      	push	{r7}
 80033d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80033d4:	bf00      	nop
 80033d6:	e7fd      	b.n	80033d4 <MemManage_Handler+0x4>

080033d8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80033d8:	b480      	push	{r7}
 80033da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80033dc:	bf00      	nop
 80033de:	e7fd      	b.n	80033dc <BusFault_Handler+0x4>

080033e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80033e0:	b480      	push	{r7}
 80033e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80033e4:	bf00      	nop
 80033e6:	e7fd      	b.n	80033e4 <UsageFault_Handler+0x4>

080033e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80033e8:	b480      	push	{r7}
 80033ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80033ec:	bf00      	nop
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr

080033f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80033f6:	b480      	push	{r7}
 80033f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033fa:	bf00      	nop
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr

08003404 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003404:	b480      	push	{r7}
 8003406:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003408:	bf00      	nop
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr

08003412 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003412:	b580      	push	{r7, lr}
 8003414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003416:	f000 f957 	bl	80036c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800341a:	bf00      	nop
 800341c:	bd80      	pop	{r7, pc}

0800341e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800341e:	b480      	push	{r7}
 8003420:	af00      	add	r7, sp, #0
  return 1;
 8003422:	2301      	movs	r3, #1
}
 8003424:	4618      	mov	r0, r3
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr

0800342e <_kill>:

int _kill(int pid, int sig)
{
 800342e:	b580      	push	{r7, lr}
 8003430:	b082      	sub	sp, #8
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
 8003436:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003438:	f003 fd68 	bl	8006f0c <__errno>
 800343c:	4603      	mov	r3, r0
 800343e:	2216      	movs	r2, #22
 8003440:	601a      	str	r2, [r3, #0]
  return -1;
 8003442:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003446:	4618      	mov	r0, r3
 8003448:	3708      	adds	r7, #8
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}

0800344e <_exit>:

void _exit (int status)
{
 800344e:	b580      	push	{r7, lr}
 8003450:	b082      	sub	sp, #8
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003456:	f04f 31ff 	mov.w	r1, #4294967295
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f7ff ffe7 	bl	800342e <_kill>
  while (1) {}    /* Make sure we hang here */
 8003460:	bf00      	nop
 8003462:	e7fd      	b.n	8003460 <_exit+0x12>

08003464 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b086      	sub	sp, #24
 8003468:	af00      	add	r7, sp, #0
 800346a:	60f8      	str	r0, [r7, #12]
 800346c:	60b9      	str	r1, [r7, #8]
 800346e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003470:	2300      	movs	r3, #0
 8003472:	617b      	str	r3, [r7, #20]
 8003474:	e00a      	b.n	800348c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003476:	f3af 8000 	nop.w
 800347a:	4601      	mov	r1, r0
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	1c5a      	adds	r2, r3, #1
 8003480:	60ba      	str	r2, [r7, #8]
 8003482:	b2ca      	uxtb	r2, r1
 8003484:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	3301      	adds	r3, #1
 800348a:	617b      	str	r3, [r7, #20]
 800348c:	697a      	ldr	r2, [r7, #20]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	429a      	cmp	r2, r3
 8003492:	dbf0      	blt.n	8003476 <_read+0x12>
  }

  return len;
 8003494:	687b      	ldr	r3, [r7, #4]
}
 8003496:	4618      	mov	r0, r3
 8003498:	3718      	adds	r7, #24
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}

0800349e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800349e:	b580      	push	{r7, lr}
 80034a0:	b086      	sub	sp, #24
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	60f8      	str	r0, [r7, #12]
 80034a6:	60b9      	str	r1, [r7, #8]
 80034a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034aa:	2300      	movs	r3, #0
 80034ac:	617b      	str	r3, [r7, #20]
 80034ae:	e009      	b.n	80034c4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	1c5a      	adds	r2, r3, #1
 80034b4:	60ba      	str	r2, [r7, #8]
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	4618      	mov	r0, r3
 80034ba:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	3301      	adds	r3, #1
 80034c2:	617b      	str	r3, [r7, #20]
 80034c4:	697a      	ldr	r2, [r7, #20]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	429a      	cmp	r2, r3
 80034ca:	dbf1      	blt.n	80034b0 <_write+0x12>
  }
  return len;
 80034cc:	687b      	ldr	r3, [r7, #4]
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3718      	adds	r7, #24
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}

080034d6 <_close>:

int _close(int file)
{
 80034d6:	b480      	push	{r7}
 80034d8:	b083      	sub	sp, #12
 80034da:	af00      	add	r7, sp, #0
 80034dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80034de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	370c      	adds	r7, #12
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr

080034ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80034ee:	b480      	push	{r7}
 80034f0:	b083      	sub	sp, #12
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
 80034f6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80034fe:	605a      	str	r2, [r3, #4]
  return 0;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	370c      	adds	r7, #12
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr

0800350e <_isatty>:

int _isatty(int file)
{
 800350e:	b480      	push	{r7}
 8003510:	b083      	sub	sp, #12
 8003512:	af00      	add	r7, sp, #0
 8003514:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003516:	2301      	movs	r3, #1
}
 8003518:	4618      	mov	r0, r3
 800351a:	370c      	adds	r7, #12
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr

08003524 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003524:	b480      	push	{r7}
 8003526:	b085      	sub	sp, #20
 8003528:	af00      	add	r7, sp, #0
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	60b9      	str	r1, [r7, #8]
 800352e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003530:	2300      	movs	r3, #0
}
 8003532:	4618      	mov	r0, r3
 8003534:	3714      	adds	r7, #20
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr
	...

08003540 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b086      	sub	sp, #24
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003548:	4a14      	ldr	r2, [pc, #80]	@ (800359c <_sbrk+0x5c>)
 800354a:	4b15      	ldr	r3, [pc, #84]	@ (80035a0 <_sbrk+0x60>)
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003554:	4b13      	ldr	r3, [pc, #76]	@ (80035a4 <_sbrk+0x64>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d102      	bne.n	8003562 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800355c:	4b11      	ldr	r3, [pc, #68]	@ (80035a4 <_sbrk+0x64>)
 800355e:	4a12      	ldr	r2, [pc, #72]	@ (80035a8 <_sbrk+0x68>)
 8003560:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003562:	4b10      	ldr	r3, [pc, #64]	@ (80035a4 <_sbrk+0x64>)
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4413      	add	r3, r2
 800356a:	693a      	ldr	r2, [r7, #16]
 800356c:	429a      	cmp	r2, r3
 800356e:	d207      	bcs.n	8003580 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003570:	f003 fccc 	bl	8006f0c <__errno>
 8003574:	4603      	mov	r3, r0
 8003576:	220c      	movs	r2, #12
 8003578:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800357a:	f04f 33ff 	mov.w	r3, #4294967295
 800357e:	e009      	b.n	8003594 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003580:	4b08      	ldr	r3, [pc, #32]	@ (80035a4 <_sbrk+0x64>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003586:	4b07      	ldr	r3, [pc, #28]	@ (80035a4 <_sbrk+0x64>)
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4413      	add	r3, r2
 800358e:	4a05      	ldr	r2, [pc, #20]	@ (80035a4 <_sbrk+0x64>)
 8003590:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003592:	68fb      	ldr	r3, [r7, #12]
}
 8003594:	4618      	mov	r0, r3
 8003596:	3718      	adds	r7, #24
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}
 800359c:	20020000 	.word	0x20020000
 80035a0:	00000400 	.word	0x00000400
 80035a4:	200002b0 	.word	0x200002b0
 80035a8:	20000408 	.word	0x20000408

080035ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80035ac:	b480      	push	{r7}
 80035ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80035b0:	4b06      	ldr	r3, [pc, #24]	@ (80035cc <SystemInit+0x20>)
 80035b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035b6:	4a05      	ldr	r2, [pc, #20]	@ (80035cc <SystemInit+0x20>)
 80035b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80035bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80035c0:	bf00      	nop
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	e000ed00 	.word	0xe000ed00

080035d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80035d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003608 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80035d4:	f7ff ffea 	bl	80035ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80035d8:	480c      	ldr	r0, [pc, #48]	@ (800360c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80035da:	490d      	ldr	r1, [pc, #52]	@ (8003610 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80035dc:	4a0d      	ldr	r2, [pc, #52]	@ (8003614 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80035de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80035e0:	e002      	b.n	80035e8 <LoopCopyDataInit>

080035e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80035e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035e6:	3304      	adds	r3, #4

080035e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80035e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80035ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80035ec:	d3f9      	bcc.n	80035e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80035ee:	4a0a      	ldr	r2, [pc, #40]	@ (8003618 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80035f0:	4c0a      	ldr	r4, [pc, #40]	@ (800361c <LoopFillZerobss+0x22>)
  movs r3, #0
 80035f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80035f4:	e001      	b.n	80035fa <LoopFillZerobss>

080035f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80035f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80035f8:	3204      	adds	r2, #4

080035fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80035fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80035fc:	d3fb      	bcc.n	80035f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80035fe:	f003 fc8b 	bl	8006f18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003602:	f7fd ff4f 	bl	80014a4 <main>
  bx  lr    
 8003606:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003608:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800360c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003610:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 8003614:	08008514 	.word	0x08008514
  ldr r2, =_sbss
 8003618:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
 800361c:	20000404 	.word	0x20000404

08003620 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003620:	e7fe      	b.n	8003620 <ADC_IRQHandler>
	...

08003624 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003628:	4b0e      	ldr	r3, [pc, #56]	@ (8003664 <HAL_Init+0x40>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a0d      	ldr	r2, [pc, #52]	@ (8003664 <HAL_Init+0x40>)
 800362e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003632:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003634:	4b0b      	ldr	r3, [pc, #44]	@ (8003664 <HAL_Init+0x40>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a0a      	ldr	r2, [pc, #40]	@ (8003664 <HAL_Init+0x40>)
 800363a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800363e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003640:	4b08      	ldr	r3, [pc, #32]	@ (8003664 <HAL_Init+0x40>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a07      	ldr	r2, [pc, #28]	@ (8003664 <HAL_Init+0x40>)
 8003646:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800364a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800364c:	2003      	movs	r0, #3
 800364e:	f000 f931 	bl	80038b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003652:	2000      	movs	r0, #0
 8003654:	f000 f808 	bl	8003668 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003658:	f7ff fd5a 	bl	8003110 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800365c:	2300      	movs	r3, #0
}
 800365e:	4618      	mov	r0, r3
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	40023c00 	.word	0x40023c00

08003668 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003670:	4b12      	ldr	r3, [pc, #72]	@ (80036bc <HAL_InitTick+0x54>)
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	4b12      	ldr	r3, [pc, #72]	@ (80036c0 <HAL_InitTick+0x58>)
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	4619      	mov	r1, r3
 800367a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800367e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003682:	fbb2 f3f3 	udiv	r3, r2, r3
 8003686:	4618      	mov	r0, r3
 8003688:	f000 f93b 	bl	8003902 <HAL_SYSTICK_Config>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d001      	beq.n	8003696 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e00e      	b.n	80036b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2b0f      	cmp	r3, #15
 800369a:	d80a      	bhi.n	80036b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800369c:	2200      	movs	r2, #0
 800369e:	6879      	ldr	r1, [r7, #4]
 80036a0:	f04f 30ff 	mov.w	r0, #4294967295
 80036a4:	f000 f911 	bl	80038ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80036a8:	4a06      	ldr	r2, [pc, #24]	@ (80036c4 <HAL_InitTick+0x5c>)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80036ae:	2300      	movs	r3, #0
 80036b0:	e000      	b.n	80036b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3708      	adds	r7, #8
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	20000068 	.word	0x20000068
 80036c0:	20000070 	.word	0x20000070
 80036c4:	2000006c 	.word	0x2000006c

080036c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036c8:	b480      	push	{r7}
 80036ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80036cc:	4b06      	ldr	r3, [pc, #24]	@ (80036e8 <HAL_IncTick+0x20>)
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	461a      	mov	r2, r3
 80036d2:	4b06      	ldr	r3, [pc, #24]	@ (80036ec <HAL_IncTick+0x24>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4413      	add	r3, r2
 80036d8:	4a04      	ldr	r2, [pc, #16]	@ (80036ec <HAL_IncTick+0x24>)
 80036da:	6013      	str	r3, [r2, #0]
}
 80036dc:	bf00      	nop
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop
 80036e8:	20000070 	.word	0x20000070
 80036ec:	200002b4 	.word	0x200002b4

080036f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036f0:	b480      	push	{r7}
 80036f2:	af00      	add	r7, sp, #0
  return uwTick;
 80036f4:	4b03      	ldr	r3, [pc, #12]	@ (8003704 <HAL_GetTick+0x14>)
 80036f6:	681b      	ldr	r3, [r3, #0]
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop
 8003704:	200002b4 	.word	0x200002b4

08003708 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003710:	f7ff ffee 	bl	80036f0 <HAL_GetTick>
 8003714:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003720:	d005      	beq.n	800372e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003722:	4b0a      	ldr	r3, [pc, #40]	@ (800374c <HAL_Delay+0x44>)
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	461a      	mov	r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	4413      	add	r3, r2
 800372c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800372e:	bf00      	nop
 8003730:	f7ff ffde 	bl	80036f0 <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	68fa      	ldr	r2, [r7, #12]
 800373c:	429a      	cmp	r2, r3
 800373e:	d8f7      	bhi.n	8003730 <HAL_Delay+0x28>
  {
  }
}
 8003740:	bf00      	nop
 8003742:	bf00      	nop
 8003744:	3710      	adds	r7, #16
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	20000070 	.word	0x20000070

08003750 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003750:	b480      	push	{r7}
 8003752:	b085      	sub	sp, #20
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f003 0307 	and.w	r3, r3, #7
 800375e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003760:	4b0c      	ldr	r3, [pc, #48]	@ (8003794 <__NVIC_SetPriorityGrouping+0x44>)
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003766:	68ba      	ldr	r2, [r7, #8]
 8003768:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800376c:	4013      	ands	r3, r2
 800376e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003778:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800377c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003780:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003782:	4a04      	ldr	r2, [pc, #16]	@ (8003794 <__NVIC_SetPriorityGrouping+0x44>)
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	60d3      	str	r3, [r2, #12]
}
 8003788:	bf00      	nop
 800378a:	3714      	adds	r7, #20
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr
 8003794:	e000ed00 	.word	0xe000ed00

08003798 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003798:	b480      	push	{r7}
 800379a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800379c:	4b04      	ldr	r3, [pc, #16]	@ (80037b0 <__NVIC_GetPriorityGrouping+0x18>)
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	0a1b      	lsrs	r3, r3, #8
 80037a2:	f003 0307 	and.w	r3, r3, #7
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr
 80037b0:	e000ed00 	.word	0xe000ed00

080037b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	4603      	mov	r3, r0
 80037bc:	6039      	str	r1, [r7, #0]
 80037be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	db0a      	blt.n	80037de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	b2da      	uxtb	r2, r3
 80037cc:	490c      	ldr	r1, [pc, #48]	@ (8003800 <__NVIC_SetPriority+0x4c>)
 80037ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037d2:	0112      	lsls	r2, r2, #4
 80037d4:	b2d2      	uxtb	r2, r2
 80037d6:	440b      	add	r3, r1
 80037d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037dc:	e00a      	b.n	80037f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	b2da      	uxtb	r2, r3
 80037e2:	4908      	ldr	r1, [pc, #32]	@ (8003804 <__NVIC_SetPriority+0x50>)
 80037e4:	79fb      	ldrb	r3, [r7, #7]
 80037e6:	f003 030f 	and.w	r3, r3, #15
 80037ea:	3b04      	subs	r3, #4
 80037ec:	0112      	lsls	r2, r2, #4
 80037ee:	b2d2      	uxtb	r2, r2
 80037f0:	440b      	add	r3, r1
 80037f2:	761a      	strb	r2, [r3, #24]
}
 80037f4:	bf00      	nop
 80037f6:	370c      	adds	r7, #12
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr
 8003800:	e000e100 	.word	0xe000e100
 8003804:	e000ed00 	.word	0xe000ed00

08003808 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003808:	b480      	push	{r7}
 800380a:	b089      	sub	sp, #36	@ 0x24
 800380c:	af00      	add	r7, sp, #0
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	60b9      	str	r1, [r7, #8]
 8003812:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f003 0307 	and.w	r3, r3, #7
 800381a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	f1c3 0307 	rsb	r3, r3, #7
 8003822:	2b04      	cmp	r3, #4
 8003824:	bf28      	it	cs
 8003826:	2304      	movcs	r3, #4
 8003828:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	3304      	adds	r3, #4
 800382e:	2b06      	cmp	r3, #6
 8003830:	d902      	bls.n	8003838 <NVIC_EncodePriority+0x30>
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	3b03      	subs	r3, #3
 8003836:	e000      	b.n	800383a <NVIC_EncodePriority+0x32>
 8003838:	2300      	movs	r3, #0
 800383a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800383c:	f04f 32ff 	mov.w	r2, #4294967295
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	fa02 f303 	lsl.w	r3, r2, r3
 8003846:	43da      	mvns	r2, r3
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	401a      	ands	r2, r3
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003850:	f04f 31ff 	mov.w	r1, #4294967295
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	fa01 f303 	lsl.w	r3, r1, r3
 800385a:	43d9      	mvns	r1, r3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003860:	4313      	orrs	r3, r2
         );
}
 8003862:	4618      	mov	r0, r3
 8003864:	3724      	adds	r7, #36	@ 0x24
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr
	...

08003870 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	3b01      	subs	r3, #1
 800387c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003880:	d301      	bcc.n	8003886 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003882:	2301      	movs	r3, #1
 8003884:	e00f      	b.n	80038a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003886:	4a0a      	ldr	r2, [pc, #40]	@ (80038b0 <SysTick_Config+0x40>)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	3b01      	subs	r3, #1
 800388c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800388e:	210f      	movs	r1, #15
 8003890:	f04f 30ff 	mov.w	r0, #4294967295
 8003894:	f7ff ff8e 	bl	80037b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003898:	4b05      	ldr	r3, [pc, #20]	@ (80038b0 <SysTick_Config+0x40>)
 800389a:	2200      	movs	r2, #0
 800389c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800389e:	4b04      	ldr	r3, [pc, #16]	@ (80038b0 <SysTick_Config+0x40>)
 80038a0:	2207      	movs	r2, #7
 80038a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038a4:	2300      	movs	r3, #0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3708      	adds	r7, #8
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	e000e010 	.word	0xe000e010

080038b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f7ff ff47 	bl	8003750 <__NVIC_SetPriorityGrouping>
}
 80038c2:	bf00      	nop
 80038c4:	3708      	adds	r7, #8
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}

080038ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80038ca:	b580      	push	{r7, lr}
 80038cc:	b086      	sub	sp, #24
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	4603      	mov	r3, r0
 80038d2:	60b9      	str	r1, [r7, #8]
 80038d4:	607a      	str	r2, [r7, #4]
 80038d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80038d8:	2300      	movs	r3, #0
 80038da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80038dc:	f7ff ff5c 	bl	8003798 <__NVIC_GetPriorityGrouping>
 80038e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	68b9      	ldr	r1, [r7, #8]
 80038e6:	6978      	ldr	r0, [r7, #20]
 80038e8:	f7ff ff8e 	bl	8003808 <NVIC_EncodePriority>
 80038ec:	4602      	mov	r2, r0
 80038ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038f2:	4611      	mov	r1, r2
 80038f4:	4618      	mov	r0, r3
 80038f6:	f7ff ff5d 	bl	80037b4 <__NVIC_SetPriority>
}
 80038fa:	bf00      	nop
 80038fc:	3718      	adds	r7, #24
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}

08003902 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003902:	b580      	push	{r7, lr}
 8003904:	b082      	sub	sp, #8
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f7ff ffb0 	bl	8003870 <SysTick_Config>
 8003910:	4603      	mov	r3, r0
}
 8003912:	4618      	mov	r0, r3
 8003914:	3708      	adds	r7, #8
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
	...

0800391c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800391c:	b480      	push	{r7}
 800391e:	b089      	sub	sp, #36	@ 0x24
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003926:	2300      	movs	r3, #0
 8003928:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800392a:	2300      	movs	r3, #0
 800392c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800392e:	2300      	movs	r3, #0
 8003930:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003932:	2300      	movs	r3, #0
 8003934:	61fb      	str	r3, [r7, #28]
 8003936:	e16b      	b.n	8003c10 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003938:	2201      	movs	r2, #1
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	fa02 f303 	lsl.w	r3, r2, r3
 8003940:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	697a      	ldr	r2, [r7, #20]
 8003948:	4013      	ands	r3, r2
 800394a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800394c:	693a      	ldr	r2, [r7, #16]
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	429a      	cmp	r2, r3
 8003952:	f040 815a 	bne.w	8003c0a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f003 0303 	and.w	r3, r3, #3
 800395e:	2b01      	cmp	r3, #1
 8003960:	d005      	beq.n	800396e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800396a:	2b02      	cmp	r3, #2
 800396c:	d130      	bne.n	80039d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	005b      	lsls	r3, r3, #1
 8003978:	2203      	movs	r2, #3
 800397a:	fa02 f303 	lsl.w	r3, r2, r3
 800397e:	43db      	mvns	r3, r3
 8003980:	69ba      	ldr	r2, [r7, #24]
 8003982:	4013      	ands	r3, r2
 8003984:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	68da      	ldr	r2, [r3, #12]
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	005b      	lsls	r3, r3, #1
 800398e:	fa02 f303 	lsl.w	r3, r2, r3
 8003992:	69ba      	ldr	r2, [r7, #24]
 8003994:	4313      	orrs	r3, r2
 8003996:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	69ba      	ldr	r2, [r7, #24]
 800399c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80039a4:	2201      	movs	r2, #1
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ac:	43db      	mvns	r3, r3
 80039ae:	69ba      	ldr	r2, [r7, #24]
 80039b0:	4013      	ands	r3, r2
 80039b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	091b      	lsrs	r3, r3, #4
 80039ba:	f003 0201 	and.w	r2, r3, #1
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	fa02 f303 	lsl.w	r3, r2, r3
 80039c4:	69ba      	ldr	r2, [r7, #24]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	69ba      	ldr	r2, [r7, #24]
 80039ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f003 0303 	and.w	r3, r3, #3
 80039d8:	2b03      	cmp	r3, #3
 80039da:	d017      	beq.n	8003a0c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	005b      	lsls	r3, r3, #1
 80039e6:	2203      	movs	r2, #3
 80039e8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ec:	43db      	mvns	r3, r3
 80039ee:	69ba      	ldr	r2, [r7, #24]
 80039f0:	4013      	ands	r3, r2
 80039f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	689a      	ldr	r2, [r3, #8]
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	005b      	lsls	r3, r3, #1
 80039fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003a00:	69ba      	ldr	r2, [r7, #24]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	69ba      	ldr	r2, [r7, #24]
 8003a0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	f003 0303 	and.w	r3, r3, #3
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d123      	bne.n	8003a60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	08da      	lsrs	r2, r3, #3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	3208      	adds	r2, #8
 8003a20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	f003 0307 	and.w	r3, r3, #7
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	220f      	movs	r2, #15
 8003a30:	fa02 f303 	lsl.w	r3, r2, r3
 8003a34:	43db      	mvns	r3, r3
 8003a36:	69ba      	ldr	r2, [r7, #24]
 8003a38:	4013      	ands	r3, r2
 8003a3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	691a      	ldr	r2, [r3, #16]
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	f003 0307 	and.w	r3, r3, #7
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4c:	69ba      	ldr	r2, [r7, #24]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	08da      	lsrs	r2, r3, #3
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	3208      	adds	r2, #8
 8003a5a:	69b9      	ldr	r1, [r7, #24]
 8003a5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	005b      	lsls	r3, r3, #1
 8003a6a:	2203      	movs	r2, #3
 8003a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a70:	43db      	mvns	r3, r3
 8003a72:	69ba      	ldr	r2, [r7, #24]
 8003a74:	4013      	ands	r3, r2
 8003a76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f003 0203 	and.w	r2, r3, #3
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	005b      	lsls	r3, r3, #1
 8003a84:	fa02 f303 	lsl.w	r3, r2, r3
 8003a88:	69ba      	ldr	r2, [r7, #24]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	69ba      	ldr	r2, [r7, #24]
 8003a92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	f000 80b4 	beq.w	8003c0a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	60fb      	str	r3, [r7, #12]
 8003aa6:	4b60      	ldr	r3, [pc, #384]	@ (8003c28 <HAL_GPIO_Init+0x30c>)
 8003aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aaa:	4a5f      	ldr	r2, [pc, #380]	@ (8003c28 <HAL_GPIO_Init+0x30c>)
 8003aac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003ab0:	6453      	str	r3, [r2, #68]	@ 0x44
 8003ab2:	4b5d      	ldr	r3, [pc, #372]	@ (8003c28 <HAL_GPIO_Init+0x30c>)
 8003ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ab6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003aba:	60fb      	str	r3, [r7, #12]
 8003abc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003abe:	4a5b      	ldr	r2, [pc, #364]	@ (8003c2c <HAL_GPIO_Init+0x310>)
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	089b      	lsrs	r3, r3, #2
 8003ac4:	3302      	adds	r3, #2
 8003ac6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	f003 0303 	and.w	r3, r3, #3
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	220f      	movs	r2, #15
 8003ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8003ada:	43db      	mvns	r3, r3
 8003adc:	69ba      	ldr	r2, [r7, #24]
 8003ade:	4013      	ands	r3, r2
 8003ae0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a52      	ldr	r2, [pc, #328]	@ (8003c30 <HAL_GPIO_Init+0x314>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d02b      	beq.n	8003b42 <HAL_GPIO_Init+0x226>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a51      	ldr	r2, [pc, #324]	@ (8003c34 <HAL_GPIO_Init+0x318>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d025      	beq.n	8003b3e <HAL_GPIO_Init+0x222>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a50      	ldr	r2, [pc, #320]	@ (8003c38 <HAL_GPIO_Init+0x31c>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d01f      	beq.n	8003b3a <HAL_GPIO_Init+0x21e>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a4f      	ldr	r2, [pc, #316]	@ (8003c3c <HAL_GPIO_Init+0x320>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d019      	beq.n	8003b36 <HAL_GPIO_Init+0x21a>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a4e      	ldr	r2, [pc, #312]	@ (8003c40 <HAL_GPIO_Init+0x324>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d013      	beq.n	8003b32 <HAL_GPIO_Init+0x216>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a4d      	ldr	r2, [pc, #308]	@ (8003c44 <HAL_GPIO_Init+0x328>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d00d      	beq.n	8003b2e <HAL_GPIO_Init+0x212>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4a4c      	ldr	r2, [pc, #304]	@ (8003c48 <HAL_GPIO_Init+0x32c>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d007      	beq.n	8003b2a <HAL_GPIO_Init+0x20e>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a4b      	ldr	r2, [pc, #300]	@ (8003c4c <HAL_GPIO_Init+0x330>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d101      	bne.n	8003b26 <HAL_GPIO_Init+0x20a>
 8003b22:	2307      	movs	r3, #7
 8003b24:	e00e      	b.n	8003b44 <HAL_GPIO_Init+0x228>
 8003b26:	2308      	movs	r3, #8
 8003b28:	e00c      	b.n	8003b44 <HAL_GPIO_Init+0x228>
 8003b2a:	2306      	movs	r3, #6
 8003b2c:	e00a      	b.n	8003b44 <HAL_GPIO_Init+0x228>
 8003b2e:	2305      	movs	r3, #5
 8003b30:	e008      	b.n	8003b44 <HAL_GPIO_Init+0x228>
 8003b32:	2304      	movs	r3, #4
 8003b34:	e006      	b.n	8003b44 <HAL_GPIO_Init+0x228>
 8003b36:	2303      	movs	r3, #3
 8003b38:	e004      	b.n	8003b44 <HAL_GPIO_Init+0x228>
 8003b3a:	2302      	movs	r3, #2
 8003b3c:	e002      	b.n	8003b44 <HAL_GPIO_Init+0x228>
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e000      	b.n	8003b44 <HAL_GPIO_Init+0x228>
 8003b42:	2300      	movs	r3, #0
 8003b44:	69fa      	ldr	r2, [r7, #28]
 8003b46:	f002 0203 	and.w	r2, r2, #3
 8003b4a:	0092      	lsls	r2, r2, #2
 8003b4c:	4093      	lsls	r3, r2
 8003b4e:	69ba      	ldr	r2, [r7, #24]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b54:	4935      	ldr	r1, [pc, #212]	@ (8003c2c <HAL_GPIO_Init+0x310>)
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	089b      	lsrs	r3, r3, #2
 8003b5a:	3302      	adds	r3, #2
 8003b5c:	69ba      	ldr	r2, [r7, #24]
 8003b5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b62:	4b3b      	ldr	r3, [pc, #236]	@ (8003c50 <HAL_GPIO_Init+0x334>)
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	43db      	mvns	r3, r3
 8003b6c:	69ba      	ldr	r2, [r7, #24]
 8003b6e:	4013      	ands	r3, r2
 8003b70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d003      	beq.n	8003b86 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003b7e:	69ba      	ldr	r2, [r7, #24]
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b86:	4a32      	ldr	r2, [pc, #200]	@ (8003c50 <HAL_GPIO_Init+0x334>)
 8003b88:	69bb      	ldr	r3, [r7, #24]
 8003b8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b8c:	4b30      	ldr	r3, [pc, #192]	@ (8003c50 <HAL_GPIO_Init+0x334>)
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	43db      	mvns	r3, r3
 8003b96:	69ba      	ldr	r2, [r7, #24]
 8003b98:	4013      	ands	r3, r2
 8003b9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d003      	beq.n	8003bb0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003ba8:	69ba      	ldr	r2, [r7, #24]
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003bb0:	4a27      	ldr	r2, [pc, #156]	@ (8003c50 <HAL_GPIO_Init+0x334>)
 8003bb2:	69bb      	ldr	r3, [r7, #24]
 8003bb4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003bb6:	4b26      	ldr	r3, [pc, #152]	@ (8003c50 <HAL_GPIO_Init+0x334>)
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	43db      	mvns	r3, r3
 8003bc0:	69ba      	ldr	r2, [r7, #24]
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d003      	beq.n	8003bda <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003bd2:	69ba      	ldr	r2, [r7, #24]
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003bda:	4a1d      	ldr	r2, [pc, #116]	@ (8003c50 <HAL_GPIO_Init+0x334>)
 8003bdc:	69bb      	ldr	r3, [r7, #24]
 8003bde:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003be0:	4b1b      	ldr	r3, [pc, #108]	@ (8003c50 <HAL_GPIO_Init+0x334>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	43db      	mvns	r3, r3
 8003bea:	69ba      	ldr	r2, [r7, #24]
 8003bec:	4013      	ands	r3, r2
 8003bee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d003      	beq.n	8003c04 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003bfc:	69ba      	ldr	r2, [r7, #24]
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c04:	4a12      	ldr	r2, [pc, #72]	@ (8003c50 <HAL_GPIO_Init+0x334>)
 8003c06:	69bb      	ldr	r3, [r7, #24]
 8003c08:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	3301      	adds	r3, #1
 8003c0e:	61fb      	str	r3, [r7, #28]
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	2b0f      	cmp	r3, #15
 8003c14:	f67f ae90 	bls.w	8003938 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003c18:	bf00      	nop
 8003c1a:	bf00      	nop
 8003c1c:	3724      	adds	r7, #36	@ 0x24
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr
 8003c26:	bf00      	nop
 8003c28:	40023800 	.word	0x40023800
 8003c2c:	40013800 	.word	0x40013800
 8003c30:	40020000 	.word	0x40020000
 8003c34:	40020400 	.word	0x40020400
 8003c38:	40020800 	.word	0x40020800
 8003c3c:	40020c00 	.word	0x40020c00
 8003c40:	40021000 	.word	0x40021000
 8003c44:	40021400 	.word	0x40021400
 8003c48:	40021800 	.word	0x40021800
 8003c4c:	40021c00 	.word	0x40021c00
 8003c50:	40013c00 	.word	0x40013c00

08003c54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b085      	sub	sp, #20
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	460b      	mov	r3, r1
 8003c5e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	691a      	ldr	r2, [r3, #16]
 8003c64:	887b      	ldrh	r3, [r7, #2]
 8003c66:	4013      	ands	r3, r2
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d002      	beq.n	8003c72 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	73fb      	strb	r3, [r7, #15]
 8003c70:	e001      	b.n	8003c76 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003c72:	2300      	movs	r3, #0
 8003c74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003c76:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3714      	adds	r7, #20
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	807b      	strh	r3, [r7, #2]
 8003c90:	4613      	mov	r3, r2
 8003c92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c94:	787b      	ldrb	r3, [r7, #1]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d003      	beq.n	8003ca2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c9a:	887a      	ldrh	r2, [r7, #2]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003ca0:	e003      	b.n	8003caa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003ca2:	887b      	ldrh	r3, [r7, #2]
 8003ca4:	041a      	lsls	r2, r3, #16
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	619a      	str	r2, [r3, #24]
}
 8003caa:	bf00      	nop
 8003cac:	370c      	adds	r7, #12
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr

08003cb6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003cb6:	b480      	push	{r7}
 8003cb8:	b085      	sub	sp, #20
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	6078      	str	r0, [r7, #4]
 8003cbe:	460b      	mov	r3, r1
 8003cc0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	695b      	ldr	r3, [r3, #20]
 8003cc6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003cc8:	887a      	ldrh	r2, [r7, #2]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	4013      	ands	r3, r2
 8003cce:	041a      	lsls	r2, r3, #16
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	43d9      	mvns	r1, r3
 8003cd4:	887b      	ldrh	r3, [r7, #2]
 8003cd6:	400b      	ands	r3, r1
 8003cd8:	431a      	orrs	r2, r3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	619a      	str	r2, [r3, #24]
}
 8003cde:	bf00      	nop
 8003ce0:	3714      	adds	r7, #20
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
	...

08003cec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d101      	bne.n	8003cfe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e12b      	b.n	8003f56 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d106      	bne.n	8003d18 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f7ff fa24 	bl	8003160 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2224      	movs	r2, #36	@ 0x24
 8003d1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f022 0201 	bic.w	r2, r2, #1
 8003d2e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003d3e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003d4e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003d50:	f001 f8da 	bl	8004f08 <HAL_RCC_GetPCLK1Freq>
 8003d54:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	4a81      	ldr	r2, [pc, #516]	@ (8003f60 <HAL_I2C_Init+0x274>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d807      	bhi.n	8003d70 <HAL_I2C_Init+0x84>
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	4a80      	ldr	r2, [pc, #512]	@ (8003f64 <HAL_I2C_Init+0x278>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	bf94      	ite	ls
 8003d68:	2301      	movls	r3, #1
 8003d6a:	2300      	movhi	r3, #0
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	e006      	b.n	8003d7e <HAL_I2C_Init+0x92>
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	4a7d      	ldr	r2, [pc, #500]	@ (8003f68 <HAL_I2C_Init+0x27c>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	bf94      	ite	ls
 8003d78:	2301      	movls	r3, #1
 8003d7a:	2300      	movhi	r3, #0
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d001      	beq.n	8003d86 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e0e7      	b.n	8003f56 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	4a78      	ldr	r2, [pc, #480]	@ (8003f6c <HAL_I2C_Init+0x280>)
 8003d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d8e:	0c9b      	lsrs	r3, r3, #18
 8003d90:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	68ba      	ldr	r2, [r7, #8]
 8003da2:	430a      	orrs	r2, r1
 8003da4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	6a1b      	ldr	r3, [r3, #32]
 8003dac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	4a6a      	ldr	r2, [pc, #424]	@ (8003f60 <HAL_I2C_Init+0x274>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d802      	bhi.n	8003dc0 <HAL_I2C_Init+0xd4>
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	3301      	adds	r3, #1
 8003dbe:	e009      	b.n	8003dd4 <HAL_I2C_Init+0xe8>
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003dc6:	fb02 f303 	mul.w	r3, r2, r3
 8003dca:	4a69      	ldr	r2, [pc, #420]	@ (8003f70 <HAL_I2C_Init+0x284>)
 8003dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd0:	099b      	lsrs	r3, r3, #6
 8003dd2:	3301      	adds	r3, #1
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	6812      	ldr	r2, [r2, #0]
 8003dd8:	430b      	orrs	r3, r1
 8003dda:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	69db      	ldr	r3, [r3, #28]
 8003de2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003de6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	495c      	ldr	r1, [pc, #368]	@ (8003f60 <HAL_I2C_Init+0x274>)
 8003df0:	428b      	cmp	r3, r1
 8003df2:	d819      	bhi.n	8003e28 <HAL_I2C_Init+0x13c>
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	1e59      	subs	r1, r3, #1
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	005b      	lsls	r3, r3, #1
 8003dfe:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e02:	1c59      	adds	r1, r3, #1
 8003e04:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003e08:	400b      	ands	r3, r1
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d00a      	beq.n	8003e24 <HAL_I2C_Init+0x138>
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	1e59      	subs	r1, r3, #1
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	005b      	lsls	r3, r3, #1
 8003e18:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e1c:	3301      	adds	r3, #1
 8003e1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e22:	e051      	b.n	8003ec8 <HAL_I2C_Init+0x1dc>
 8003e24:	2304      	movs	r3, #4
 8003e26:	e04f      	b.n	8003ec8 <HAL_I2C_Init+0x1dc>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d111      	bne.n	8003e54 <HAL_I2C_Init+0x168>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	1e58      	subs	r0, r3, #1
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6859      	ldr	r1, [r3, #4]
 8003e38:	460b      	mov	r3, r1
 8003e3a:	005b      	lsls	r3, r3, #1
 8003e3c:	440b      	add	r3, r1
 8003e3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e42:	3301      	adds	r3, #1
 8003e44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	bf0c      	ite	eq
 8003e4c:	2301      	moveq	r3, #1
 8003e4e:	2300      	movne	r3, #0
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	e012      	b.n	8003e7a <HAL_I2C_Init+0x18e>
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	1e58      	subs	r0, r3, #1
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6859      	ldr	r1, [r3, #4]
 8003e5c:	460b      	mov	r3, r1
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	440b      	add	r3, r1
 8003e62:	0099      	lsls	r1, r3, #2
 8003e64:	440b      	add	r3, r1
 8003e66:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	bf0c      	ite	eq
 8003e74:	2301      	moveq	r3, #1
 8003e76:	2300      	movne	r3, #0
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d001      	beq.n	8003e82 <HAL_I2C_Init+0x196>
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e022      	b.n	8003ec8 <HAL_I2C_Init+0x1dc>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d10e      	bne.n	8003ea8 <HAL_I2C_Init+0x1bc>
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	1e58      	subs	r0, r3, #1
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6859      	ldr	r1, [r3, #4]
 8003e92:	460b      	mov	r3, r1
 8003e94:	005b      	lsls	r3, r3, #1
 8003e96:	440b      	add	r3, r1
 8003e98:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e9c:	3301      	adds	r3, #1
 8003e9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ea2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ea6:	e00f      	b.n	8003ec8 <HAL_I2C_Init+0x1dc>
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	1e58      	subs	r0, r3, #1
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6859      	ldr	r1, [r3, #4]
 8003eb0:	460b      	mov	r3, r1
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	440b      	add	r3, r1
 8003eb6:	0099      	lsls	r1, r3, #2
 8003eb8:	440b      	add	r3, r1
 8003eba:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ebe:	3301      	adds	r3, #1
 8003ec0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ec4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003ec8:	6879      	ldr	r1, [r7, #4]
 8003eca:	6809      	ldr	r1, [r1, #0]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	69da      	ldr	r2, [r3, #28]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a1b      	ldr	r3, [r3, #32]
 8003ee2:	431a      	orrs	r2, r3
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	430a      	orrs	r2, r1
 8003eea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003ef6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	6911      	ldr	r1, [r2, #16]
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	68d2      	ldr	r2, [r2, #12]
 8003f02:	4311      	orrs	r1, r2
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	6812      	ldr	r2, [r2, #0]
 8003f08:	430b      	orrs	r3, r1
 8003f0a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	695a      	ldr	r2, [r3, #20]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	699b      	ldr	r3, [r3, #24]
 8003f1e:	431a      	orrs	r2, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	430a      	orrs	r2, r1
 8003f26:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f042 0201 	orr.w	r2, r2, #1
 8003f36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2220      	movs	r2, #32
 8003f42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003f54:	2300      	movs	r3, #0
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3710      	adds	r7, #16
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	000186a0 	.word	0x000186a0
 8003f64:	001e847f 	.word	0x001e847f
 8003f68:	003d08ff 	.word	0x003d08ff
 8003f6c:	431bde83 	.word	0x431bde83
 8003f70:	10624dd3 	.word	0x10624dd3

08003f74 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b088      	sub	sp, #32
 8003f78:	af02      	add	r7, sp, #8
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	607a      	str	r2, [r7, #4]
 8003f7e:	461a      	mov	r2, r3
 8003f80:	460b      	mov	r3, r1
 8003f82:	817b      	strh	r3, [r7, #10]
 8003f84:	4613      	mov	r3, r2
 8003f86:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003f88:	f7ff fbb2 	bl	80036f0 <HAL_GetTick>
 8003f8c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	2b20      	cmp	r3, #32
 8003f98:	f040 80e0 	bne.w	800415c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	9300      	str	r3, [sp, #0]
 8003fa0:	2319      	movs	r3, #25
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	4970      	ldr	r1, [pc, #448]	@ (8004168 <HAL_I2C_Master_Transmit+0x1f4>)
 8003fa6:	68f8      	ldr	r0, [r7, #12]
 8003fa8:	f000 f964 	bl	8004274 <I2C_WaitOnFlagUntilTimeout>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d001      	beq.n	8003fb6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003fb2:	2302      	movs	r3, #2
 8003fb4:	e0d3      	b.n	800415e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d101      	bne.n	8003fc4 <HAL_I2C_Master_Transmit+0x50>
 8003fc0:	2302      	movs	r3, #2
 8003fc2:	e0cc      	b.n	800415e <HAL_I2C_Master_Transmit+0x1ea>
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0301 	and.w	r3, r3, #1
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d007      	beq.n	8003fea <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f042 0201 	orr.w	r2, r2, #1
 8003fe8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ff8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2221      	movs	r2, #33	@ 0x21
 8003ffe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2210      	movs	r2, #16
 8004006:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2200      	movs	r2, #0
 800400e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	893a      	ldrh	r2, [r7, #8]
 800401a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004020:	b29a      	uxth	r2, r3
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	4a50      	ldr	r2, [pc, #320]	@ (800416c <HAL_I2C_Master_Transmit+0x1f8>)
 800402a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800402c:	8979      	ldrh	r1, [r7, #10]
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	6a3a      	ldr	r2, [r7, #32]
 8004032:	68f8      	ldr	r0, [r7, #12]
 8004034:	f000 f89c 	bl	8004170 <I2C_MasterRequestWrite>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d001      	beq.n	8004042 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e08d      	b.n	800415e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004042:	2300      	movs	r3, #0
 8004044:	613b      	str	r3, [r7, #16]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	695b      	ldr	r3, [r3, #20]
 800404c:	613b      	str	r3, [r7, #16]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	699b      	ldr	r3, [r3, #24]
 8004054:	613b      	str	r3, [r7, #16]
 8004056:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004058:	e066      	b.n	8004128 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800405a:	697a      	ldr	r2, [r7, #20]
 800405c:	6a39      	ldr	r1, [r7, #32]
 800405e:	68f8      	ldr	r0, [r7, #12]
 8004060:	f000 fa22 	bl	80044a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d00d      	beq.n	8004086 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800406e:	2b04      	cmp	r3, #4
 8004070:	d107      	bne.n	8004082 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004080:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e06b      	b.n	800415e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800408a:	781a      	ldrb	r2, [r3, #0]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004096:	1c5a      	adds	r2, r3, #1
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	3b01      	subs	r3, #1
 80040a4:	b29a      	uxth	r2, r3
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040ae:	3b01      	subs	r3, #1
 80040b0:	b29a      	uxth	r2, r3
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	695b      	ldr	r3, [r3, #20]
 80040bc:	f003 0304 	and.w	r3, r3, #4
 80040c0:	2b04      	cmp	r3, #4
 80040c2:	d11b      	bne.n	80040fc <HAL_I2C_Master_Transmit+0x188>
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d017      	beq.n	80040fc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d0:	781a      	ldrb	r2, [r3, #0]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040dc:	1c5a      	adds	r2, r3, #1
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	3b01      	subs	r3, #1
 80040ea:	b29a      	uxth	r2, r3
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040f4:	3b01      	subs	r3, #1
 80040f6:	b29a      	uxth	r2, r3
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040fc:	697a      	ldr	r2, [r7, #20]
 80040fe:	6a39      	ldr	r1, [r7, #32]
 8004100:	68f8      	ldr	r0, [r7, #12]
 8004102:	f000 fa19 	bl	8004538 <I2C_WaitOnBTFFlagUntilTimeout>
 8004106:	4603      	mov	r3, r0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d00d      	beq.n	8004128 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004110:	2b04      	cmp	r3, #4
 8004112:	d107      	bne.n	8004124 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004122:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e01a      	b.n	800415e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800412c:	2b00      	cmp	r3, #0
 800412e:	d194      	bne.n	800405a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800413e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2220      	movs	r2, #32
 8004144:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2200      	movs	r2, #0
 800414c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2200      	movs	r2, #0
 8004154:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004158:	2300      	movs	r3, #0
 800415a:	e000      	b.n	800415e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800415c:	2302      	movs	r3, #2
  }
}
 800415e:	4618      	mov	r0, r3
 8004160:	3718      	adds	r7, #24
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	00100002 	.word	0x00100002
 800416c:	ffff0000 	.word	0xffff0000

08004170 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b088      	sub	sp, #32
 8004174:	af02      	add	r7, sp, #8
 8004176:	60f8      	str	r0, [r7, #12]
 8004178:	607a      	str	r2, [r7, #4]
 800417a:	603b      	str	r3, [r7, #0]
 800417c:	460b      	mov	r3, r1
 800417e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004184:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	2b08      	cmp	r3, #8
 800418a:	d006      	beq.n	800419a <I2C_MasterRequestWrite+0x2a>
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	2b01      	cmp	r3, #1
 8004190:	d003      	beq.n	800419a <I2C_MasterRequestWrite+0x2a>
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004198:	d108      	bne.n	80041ac <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041a8:	601a      	str	r2, [r3, #0]
 80041aa:	e00b      	b.n	80041c4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041b0:	2b12      	cmp	r3, #18
 80041b2:	d107      	bne.n	80041c4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041c2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	9300      	str	r3, [sp, #0]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80041d0:	68f8      	ldr	r0, [r7, #12]
 80041d2:	f000 f84f 	bl	8004274 <I2C_WaitOnFlagUntilTimeout>
 80041d6:	4603      	mov	r3, r0
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d00d      	beq.n	80041f8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041ea:	d103      	bne.n	80041f4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80041f2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80041f4:	2303      	movs	r3, #3
 80041f6:	e035      	b.n	8004264 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	691b      	ldr	r3, [r3, #16]
 80041fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004200:	d108      	bne.n	8004214 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004202:	897b      	ldrh	r3, [r7, #10]
 8004204:	b2db      	uxtb	r3, r3
 8004206:	461a      	mov	r2, r3
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004210:	611a      	str	r2, [r3, #16]
 8004212:	e01b      	b.n	800424c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004214:	897b      	ldrh	r3, [r7, #10]
 8004216:	11db      	asrs	r3, r3, #7
 8004218:	b2db      	uxtb	r3, r3
 800421a:	f003 0306 	and.w	r3, r3, #6
 800421e:	b2db      	uxtb	r3, r3
 8004220:	f063 030f 	orn	r3, r3, #15
 8004224:	b2da      	uxtb	r2, r3
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	490e      	ldr	r1, [pc, #56]	@ (800426c <I2C_MasterRequestWrite+0xfc>)
 8004232:	68f8      	ldr	r0, [r7, #12]
 8004234:	f000 f898 	bl	8004368 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004238:	4603      	mov	r3, r0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d001      	beq.n	8004242 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e010      	b.n	8004264 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004242:	897b      	ldrh	r3, [r7, #10]
 8004244:	b2da      	uxtb	r2, r3
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	4907      	ldr	r1, [pc, #28]	@ (8004270 <I2C_MasterRequestWrite+0x100>)
 8004252:	68f8      	ldr	r0, [r7, #12]
 8004254:	f000 f888 	bl	8004368 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004258:	4603      	mov	r3, r0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d001      	beq.n	8004262 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e000      	b.n	8004264 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004262:	2300      	movs	r3, #0
}
 8004264:	4618      	mov	r0, r3
 8004266:	3718      	adds	r7, #24
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}
 800426c:	00010008 	.word	0x00010008
 8004270:	00010002 	.word	0x00010002

08004274 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	60f8      	str	r0, [r7, #12]
 800427c:	60b9      	str	r1, [r7, #8]
 800427e:	603b      	str	r3, [r7, #0]
 8004280:	4613      	mov	r3, r2
 8004282:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004284:	e048      	b.n	8004318 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800428c:	d044      	beq.n	8004318 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800428e:	f7ff fa2f 	bl	80036f0 <HAL_GetTick>
 8004292:	4602      	mov	r2, r0
 8004294:	69bb      	ldr	r3, [r7, #24]
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	683a      	ldr	r2, [r7, #0]
 800429a:	429a      	cmp	r2, r3
 800429c:	d302      	bcc.n	80042a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d139      	bne.n	8004318 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	0c1b      	lsrs	r3, r3, #16
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d10d      	bne.n	80042ca <I2C_WaitOnFlagUntilTimeout+0x56>
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	695b      	ldr	r3, [r3, #20]
 80042b4:	43da      	mvns	r2, r3
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	4013      	ands	r3, r2
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	2b00      	cmp	r3, #0
 80042be:	bf0c      	ite	eq
 80042c0:	2301      	moveq	r3, #1
 80042c2:	2300      	movne	r3, #0
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	461a      	mov	r2, r3
 80042c8:	e00c      	b.n	80042e4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	699b      	ldr	r3, [r3, #24]
 80042d0:	43da      	mvns	r2, r3
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	4013      	ands	r3, r2
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	2b00      	cmp	r3, #0
 80042da:	bf0c      	ite	eq
 80042dc:	2301      	moveq	r3, #1
 80042de:	2300      	movne	r3, #0
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	461a      	mov	r2, r3
 80042e4:	79fb      	ldrb	r3, [r7, #7]
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d116      	bne.n	8004318 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2200      	movs	r2, #0
 80042ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2220      	movs	r2, #32
 80042f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004304:	f043 0220 	orr.w	r2, r3, #32
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2200      	movs	r2, #0
 8004310:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	e023      	b.n	8004360 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	0c1b      	lsrs	r3, r3, #16
 800431c:	b2db      	uxtb	r3, r3
 800431e:	2b01      	cmp	r3, #1
 8004320:	d10d      	bne.n	800433e <I2C_WaitOnFlagUntilTimeout+0xca>
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	695b      	ldr	r3, [r3, #20]
 8004328:	43da      	mvns	r2, r3
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	4013      	ands	r3, r2
 800432e:	b29b      	uxth	r3, r3
 8004330:	2b00      	cmp	r3, #0
 8004332:	bf0c      	ite	eq
 8004334:	2301      	moveq	r3, #1
 8004336:	2300      	movne	r3, #0
 8004338:	b2db      	uxtb	r3, r3
 800433a:	461a      	mov	r2, r3
 800433c:	e00c      	b.n	8004358 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	699b      	ldr	r3, [r3, #24]
 8004344:	43da      	mvns	r2, r3
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	4013      	ands	r3, r2
 800434a:	b29b      	uxth	r3, r3
 800434c:	2b00      	cmp	r3, #0
 800434e:	bf0c      	ite	eq
 8004350:	2301      	moveq	r3, #1
 8004352:	2300      	movne	r3, #0
 8004354:	b2db      	uxtb	r3, r3
 8004356:	461a      	mov	r2, r3
 8004358:	79fb      	ldrb	r3, [r7, #7]
 800435a:	429a      	cmp	r2, r3
 800435c:	d093      	beq.n	8004286 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800435e:	2300      	movs	r3, #0
}
 8004360:	4618      	mov	r0, r3
 8004362:	3710      	adds	r7, #16
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}

08004368 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b084      	sub	sp, #16
 800436c:	af00      	add	r7, sp, #0
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	607a      	str	r2, [r7, #4]
 8004374:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004376:	e071      	b.n	800445c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	695b      	ldr	r3, [r3, #20]
 800437e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004382:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004386:	d123      	bne.n	80043d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004396:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80043a0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2200      	movs	r2, #0
 80043a6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2220      	movs	r2, #32
 80043ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2200      	movs	r2, #0
 80043b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043bc:	f043 0204 	orr.w	r2, r3, #4
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2200      	movs	r2, #0
 80043c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	e067      	b.n	80044a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043d6:	d041      	beq.n	800445c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043d8:	f7ff f98a 	bl	80036f0 <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d302      	bcc.n	80043ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d136      	bne.n	800445c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	0c1b      	lsrs	r3, r3, #16
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d10c      	bne.n	8004412 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	695b      	ldr	r3, [r3, #20]
 80043fe:	43da      	mvns	r2, r3
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	4013      	ands	r3, r2
 8004404:	b29b      	uxth	r3, r3
 8004406:	2b00      	cmp	r3, #0
 8004408:	bf14      	ite	ne
 800440a:	2301      	movne	r3, #1
 800440c:	2300      	moveq	r3, #0
 800440e:	b2db      	uxtb	r3, r3
 8004410:	e00b      	b.n	800442a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	699b      	ldr	r3, [r3, #24]
 8004418:	43da      	mvns	r2, r3
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	4013      	ands	r3, r2
 800441e:	b29b      	uxth	r3, r3
 8004420:	2b00      	cmp	r3, #0
 8004422:	bf14      	ite	ne
 8004424:	2301      	movne	r3, #1
 8004426:	2300      	moveq	r3, #0
 8004428:	b2db      	uxtb	r3, r3
 800442a:	2b00      	cmp	r3, #0
 800442c:	d016      	beq.n	800445c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2200      	movs	r2, #0
 8004432:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2220      	movs	r2, #32
 8004438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2200      	movs	r2, #0
 8004440:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004448:	f043 0220 	orr.w	r2, r3, #32
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2200      	movs	r2, #0
 8004454:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e021      	b.n	80044a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	0c1b      	lsrs	r3, r3, #16
 8004460:	b2db      	uxtb	r3, r3
 8004462:	2b01      	cmp	r3, #1
 8004464:	d10c      	bne.n	8004480 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	695b      	ldr	r3, [r3, #20]
 800446c:	43da      	mvns	r2, r3
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	4013      	ands	r3, r2
 8004472:	b29b      	uxth	r3, r3
 8004474:	2b00      	cmp	r3, #0
 8004476:	bf14      	ite	ne
 8004478:	2301      	movne	r3, #1
 800447a:	2300      	moveq	r3, #0
 800447c:	b2db      	uxtb	r3, r3
 800447e:	e00b      	b.n	8004498 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	699b      	ldr	r3, [r3, #24]
 8004486:	43da      	mvns	r2, r3
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	4013      	ands	r3, r2
 800448c:	b29b      	uxth	r3, r3
 800448e:	2b00      	cmp	r3, #0
 8004490:	bf14      	ite	ne
 8004492:	2301      	movne	r3, #1
 8004494:	2300      	moveq	r3, #0
 8004496:	b2db      	uxtb	r3, r3
 8004498:	2b00      	cmp	r3, #0
 800449a:	f47f af6d 	bne.w	8004378 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800449e:	2300      	movs	r3, #0
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3710      	adds	r7, #16
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	60f8      	str	r0, [r7, #12]
 80044b0:	60b9      	str	r1, [r7, #8]
 80044b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044b4:	e034      	b.n	8004520 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80044b6:	68f8      	ldr	r0, [r7, #12]
 80044b8:	f000 f886 	bl	80045c8 <I2C_IsAcknowledgeFailed>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d001      	beq.n	80044c6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e034      	b.n	8004530 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044cc:	d028      	beq.n	8004520 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044ce:	f7ff f90f 	bl	80036f0 <HAL_GetTick>
 80044d2:	4602      	mov	r2, r0
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	1ad3      	subs	r3, r2, r3
 80044d8:	68ba      	ldr	r2, [r7, #8]
 80044da:	429a      	cmp	r2, r3
 80044dc:	d302      	bcc.n	80044e4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d11d      	bne.n	8004520 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	695b      	ldr	r3, [r3, #20]
 80044ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044ee:	2b80      	cmp	r3, #128	@ 0x80
 80044f0:	d016      	beq.n	8004520 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2200      	movs	r2, #0
 80044f6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2220      	movs	r2, #32
 80044fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2200      	movs	r2, #0
 8004504:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800450c:	f043 0220 	orr.w	r2, r3, #32
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2200      	movs	r2, #0
 8004518:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	e007      	b.n	8004530 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	695b      	ldr	r3, [r3, #20]
 8004526:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800452a:	2b80      	cmp	r3, #128	@ 0x80
 800452c:	d1c3      	bne.n	80044b6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800452e:	2300      	movs	r3, #0
}
 8004530:	4618      	mov	r0, r3
 8004532:	3710      	adds	r7, #16
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}

08004538 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b084      	sub	sp, #16
 800453c:	af00      	add	r7, sp, #0
 800453e:	60f8      	str	r0, [r7, #12]
 8004540:	60b9      	str	r1, [r7, #8]
 8004542:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004544:	e034      	b.n	80045b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004546:	68f8      	ldr	r0, [r7, #12]
 8004548:	f000 f83e 	bl	80045c8 <I2C_IsAcknowledgeFailed>
 800454c:	4603      	mov	r3, r0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d001      	beq.n	8004556 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e034      	b.n	80045c0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800455c:	d028      	beq.n	80045b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800455e:	f7ff f8c7 	bl	80036f0 <HAL_GetTick>
 8004562:	4602      	mov	r2, r0
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	68ba      	ldr	r2, [r7, #8]
 800456a:	429a      	cmp	r2, r3
 800456c:	d302      	bcc.n	8004574 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d11d      	bne.n	80045b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	695b      	ldr	r3, [r3, #20]
 800457a:	f003 0304 	and.w	r3, r3, #4
 800457e:	2b04      	cmp	r3, #4
 8004580:	d016      	beq.n	80045b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2200      	movs	r2, #0
 8004586:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2220      	movs	r2, #32
 800458c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2200      	movs	r2, #0
 8004594:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800459c:	f043 0220 	orr.w	r2, r3, #32
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e007      	b.n	80045c0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	695b      	ldr	r3, [r3, #20]
 80045b6:	f003 0304 	and.w	r3, r3, #4
 80045ba:	2b04      	cmp	r3, #4
 80045bc:	d1c3      	bne.n	8004546 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80045be:	2300      	movs	r3, #0
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3710      	adds	r7, #16
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}

080045c8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b083      	sub	sp, #12
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	695b      	ldr	r3, [r3, #20]
 80045d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045de:	d11b      	bne.n	8004618 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80045e8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2220      	movs	r2, #32
 80045f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004604:	f043 0204 	orr.w	r2, r3, #4
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2200      	movs	r2, #0
 8004610:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	e000      	b.n	800461a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004618:	2300      	movs	r3, #0
}
 800461a:	4618      	mov	r0, r3
 800461c:	370c      	adds	r7, #12
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr
	...

08004628 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b086      	sub	sp, #24
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d101      	bne.n	800463a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e267      	b.n	8004b0a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 0301 	and.w	r3, r3, #1
 8004642:	2b00      	cmp	r3, #0
 8004644:	d075      	beq.n	8004732 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004646:	4b88      	ldr	r3, [pc, #544]	@ (8004868 <HAL_RCC_OscConfig+0x240>)
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	f003 030c 	and.w	r3, r3, #12
 800464e:	2b04      	cmp	r3, #4
 8004650:	d00c      	beq.n	800466c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004652:	4b85      	ldr	r3, [pc, #532]	@ (8004868 <HAL_RCC_OscConfig+0x240>)
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800465a:	2b08      	cmp	r3, #8
 800465c:	d112      	bne.n	8004684 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800465e:	4b82      	ldr	r3, [pc, #520]	@ (8004868 <HAL_RCC_OscConfig+0x240>)
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004666:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800466a:	d10b      	bne.n	8004684 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800466c:	4b7e      	ldr	r3, [pc, #504]	@ (8004868 <HAL_RCC_OscConfig+0x240>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004674:	2b00      	cmp	r3, #0
 8004676:	d05b      	beq.n	8004730 <HAL_RCC_OscConfig+0x108>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d157      	bne.n	8004730 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e242      	b.n	8004b0a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800468c:	d106      	bne.n	800469c <HAL_RCC_OscConfig+0x74>
 800468e:	4b76      	ldr	r3, [pc, #472]	@ (8004868 <HAL_RCC_OscConfig+0x240>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a75      	ldr	r2, [pc, #468]	@ (8004868 <HAL_RCC_OscConfig+0x240>)
 8004694:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004698:	6013      	str	r3, [r2, #0]
 800469a:	e01d      	b.n	80046d8 <HAL_RCC_OscConfig+0xb0>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80046a4:	d10c      	bne.n	80046c0 <HAL_RCC_OscConfig+0x98>
 80046a6:	4b70      	ldr	r3, [pc, #448]	@ (8004868 <HAL_RCC_OscConfig+0x240>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a6f      	ldr	r2, [pc, #444]	@ (8004868 <HAL_RCC_OscConfig+0x240>)
 80046ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80046b0:	6013      	str	r3, [r2, #0]
 80046b2:	4b6d      	ldr	r3, [pc, #436]	@ (8004868 <HAL_RCC_OscConfig+0x240>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a6c      	ldr	r2, [pc, #432]	@ (8004868 <HAL_RCC_OscConfig+0x240>)
 80046b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046bc:	6013      	str	r3, [r2, #0]
 80046be:	e00b      	b.n	80046d8 <HAL_RCC_OscConfig+0xb0>
 80046c0:	4b69      	ldr	r3, [pc, #420]	@ (8004868 <HAL_RCC_OscConfig+0x240>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a68      	ldr	r2, [pc, #416]	@ (8004868 <HAL_RCC_OscConfig+0x240>)
 80046c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046ca:	6013      	str	r3, [r2, #0]
 80046cc:	4b66      	ldr	r3, [pc, #408]	@ (8004868 <HAL_RCC_OscConfig+0x240>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a65      	ldr	r2, [pc, #404]	@ (8004868 <HAL_RCC_OscConfig+0x240>)
 80046d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80046d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d013      	beq.n	8004708 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046e0:	f7ff f806 	bl	80036f0 <HAL_GetTick>
 80046e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046e6:	e008      	b.n	80046fa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046e8:	f7ff f802 	bl	80036f0 <HAL_GetTick>
 80046ec:	4602      	mov	r2, r0
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	2b64      	cmp	r3, #100	@ 0x64
 80046f4:	d901      	bls.n	80046fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e207      	b.n	8004b0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046fa:	4b5b      	ldr	r3, [pc, #364]	@ (8004868 <HAL_RCC_OscConfig+0x240>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d0f0      	beq.n	80046e8 <HAL_RCC_OscConfig+0xc0>
 8004706:	e014      	b.n	8004732 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004708:	f7fe fff2 	bl	80036f0 <HAL_GetTick>
 800470c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800470e:	e008      	b.n	8004722 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004710:	f7fe ffee 	bl	80036f0 <HAL_GetTick>
 8004714:	4602      	mov	r2, r0
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	2b64      	cmp	r3, #100	@ 0x64
 800471c:	d901      	bls.n	8004722 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800471e:	2303      	movs	r3, #3
 8004720:	e1f3      	b.n	8004b0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004722:	4b51      	ldr	r3, [pc, #324]	@ (8004868 <HAL_RCC_OscConfig+0x240>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800472a:	2b00      	cmp	r3, #0
 800472c:	d1f0      	bne.n	8004710 <HAL_RCC_OscConfig+0xe8>
 800472e:	e000      	b.n	8004732 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004730:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 0302 	and.w	r3, r3, #2
 800473a:	2b00      	cmp	r3, #0
 800473c:	d063      	beq.n	8004806 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800473e:	4b4a      	ldr	r3, [pc, #296]	@ (8004868 <HAL_RCC_OscConfig+0x240>)
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	f003 030c 	and.w	r3, r3, #12
 8004746:	2b00      	cmp	r3, #0
 8004748:	d00b      	beq.n	8004762 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800474a:	4b47      	ldr	r3, [pc, #284]	@ (8004868 <HAL_RCC_OscConfig+0x240>)
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004752:	2b08      	cmp	r3, #8
 8004754:	d11c      	bne.n	8004790 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004756:	4b44      	ldr	r3, [pc, #272]	@ (8004868 <HAL_RCC_OscConfig+0x240>)
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800475e:	2b00      	cmp	r3, #0
 8004760:	d116      	bne.n	8004790 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004762:	4b41      	ldr	r3, [pc, #260]	@ (8004868 <HAL_RCC_OscConfig+0x240>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0302 	and.w	r3, r3, #2
 800476a:	2b00      	cmp	r3, #0
 800476c:	d005      	beq.n	800477a <HAL_RCC_OscConfig+0x152>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	2b01      	cmp	r3, #1
 8004774:	d001      	beq.n	800477a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e1c7      	b.n	8004b0a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800477a:	4b3b      	ldr	r3, [pc, #236]	@ (8004868 <HAL_RCC_OscConfig+0x240>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	691b      	ldr	r3, [r3, #16]
 8004786:	00db      	lsls	r3, r3, #3
 8004788:	4937      	ldr	r1, [pc, #220]	@ (8004868 <HAL_RCC_OscConfig+0x240>)
 800478a:	4313      	orrs	r3, r2
 800478c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800478e:	e03a      	b.n	8004806 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d020      	beq.n	80047da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004798:	4b34      	ldr	r3, [pc, #208]	@ (800486c <HAL_RCC_OscConfig+0x244>)
 800479a:	2201      	movs	r2, #1
 800479c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800479e:	f7fe ffa7 	bl	80036f0 <HAL_GetTick>
 80047a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047a4:	e008      	b.n	80047b8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047a6:	f7fe ffa3 	bl	80036f0 <HAL_GetTick>
 80047aa:	4602      	mov	r2, r0
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	1ad3      	subs	r3, r2, r3
 80047b0:	2b02      	cmp	r3, #2
 80047b2:	d901      	bls.n	80047b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80047b4:	2303      	movs	r3, #3
 80047b6:	e1a8      	b.n	8004b0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047b8:	4b2b      	ldr	r3, [pc, #172]	@ (8004868 <HAL_RCC_OscConfig+0x240>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 0302 	and.w	r3, r3, #2
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d0f0      	beq.n	80047a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047c4:	4b28      	ldr	r3, [pc, #160]	@ (8004868 <HAL_RCC_OscConfig+0x240>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	691b      	ldr	r3, [r3, #16]
 80047d0:	00db      	lsls	r3, r3, #3
 80047d2:	4925      	ldr	r1, [pc, #148]	@ (8004868 <HAL_RCC_OscConfig+0x240>)
 80047d4:	4313      	orrs	r3, r2
 80047d6:	600b      	str	r3, [r1, #0]
 80047d8:	e015      	b.n	8004806 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047da:	4b24      	ldr	r3, [pc, #144]	@ (800486c <HAL_RCC_OscConfig+0x244>)
 80047dc:	2200      	movs	r2, #0
 80047de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047e0:	f7fe ff86 	bl	80036f0 <HAL_GetTick>
 80047e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047e6:	e008      	b.n	80047fa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047e8:	f7fe ff82 	bl	80036f0 <HAL_GetTick>
 80047ec:	4602      	mov	r2, r0
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	2b02      	cmp	r3, #2
 80047f4:	d901      	bls.n	80047fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80047f6:	2303      	movs	r3, #3
 80047f8:	e187      	b.n	8004b0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047fa:	4b1b      	ldr	r3, [pc, #108]	@ (8004868 <HAL_RCC_OscConfig+0x240>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 0302 	and.w	r3, r3, #2
 8004802:	2b00      	cmp	r3, #0
 8004804:	d1f0      	bne.n	80047e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 0308 	and.w	r3, r3, #8
 800480e:	2b00      	cmp	r3, #0
 8004810:	d036      	beq.n	8004880 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	695b      	ldr	r3, [r3, #20]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d016      	beq.n	8004848 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800481a:	4b15      	ldr	r3, [pc, #84]	@ (8004870 <HAL_RCC_OscConfig+0x248>)
 800481c:	2201      	movs	r2, #1
 800481e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004820:	f7fe ff66 	bl	80036f0 <HAL_GetTick>
 8004824:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004826:	e008      	b.n	800483a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004828:	f7fe ff62 	bl	80036f0 <HAL_GetTick>
 800482c:	4602      	mov	r2, r0
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	2b02      	cmp	r3, #2
 8004834:	d901      	bls.n	800483a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004836:	2303      	movs	r3, #3
 8004838:	e167      	b.n	8004b0a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800483a:	4b0b      	ldr	r3, [pc, #44]	@ (8004868 <HAL_RCC_OscConfig+0x240>)
 800483c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800483e:	f003 0302 	and.w	r3, r3, #2
 8004842:	2b00      	cmp	r3, #0
 8004844:	d0f0      	beq.n	8004828 <HAL_RCC_OscConfig+0x200>
 8004846:	e01b      	b.n	8004880 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004848:	4b09      	ldr	r3, [pc, #36]	@ (8004870 <HAL_RCC_OscConfig+0x248>)
 800484a:	2200      	movs	r2, #0
 800484c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800484e:	f7fe ff4f 	bl	80036f0 <HAL_GetTick>
 8004852:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004854:	e00e      	b.n	8004874 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004856:	f7fe ff4b 	bl	80036f0 <HAL_GetTick>
 800485a:	4602      	mov	r2, r0
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	1ad3      	subs	r3, r2, r3
 8004860:	2b02      	cmp	r3, #2
 8004862:	d907      	bls.n	8004874 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004864:	2303      	movs	r3, #3
 8004866:	e150      	b.n	8004b0a <HAL_RCC_OscConfig+0x4e2>
 8004868:	40023800 	.word	0x40023800
 800486c:	42470000 	.word	0x42470000
 8004870:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004874:	4b88      	ldr	r3, [pc, #544]	@ (8004a98 <HAL_RCC_OscConfig+0x470>)
 8004876:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004878:	f003 0302 	and.w	r3, r3, #2
 800487c:	2b00      	cmp	r3, #0
 800487e:	d1ea      	bne.n	8004856 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 0304 	and.w	r3, r3, #4
 8004888:	2b00      	cmp	r3, #0
 800488a:	f000 8097 	beq.w	80049bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800488e:	2300      	movs	r3, #0
 8004890:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004892:	4b81      	ldr	r3, [pc, #516]	@ (8004a98 <HAL_RCC_OscConfig+0x470>)
 8004894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004896:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800489a:	2b00      	cmp	r3, #0
 800489c:	d10f      	bne.n	80048be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800489e:	2300      	movs	r3, #0
 80048a0:	60bb      	str	r3, [r7, #8]
 80048a2:	4b7d      	ldr	r3, [pc, #500]	@ (8004a98 <HAL_RCC_OscConfig+0x470>)
 80048a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048a6:	4a7c      	ldr	r2, [pc, #496]	@ (8004a98 <HAL_RCC_OscConfig+0x470>)
 80048a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80048ae:	4b7a      	ldr	r3, [pc, #488]	@ (8004a98 <HAL_RCC_OscConfig+0x470>)
 80048b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048b6:	60bb      	str	r3, [r7, #8]
 80048b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048ba:	2301      	movs	r3, #1
 80048bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048be:	4b77      	ldr	r3, [pc, #476]	@ (8004a9c <HAL_RCC_OscConfig+0x474>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d118      	bne.n	80048fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048ca:	4b74      	ldr	r3, [pc, #464]	@ (8004a9c <HAL_RCC_OscConfig+0x474>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a73      	ldr	r2, [pc, #460]	@ (8004a9c <HAL_RCC_OscConfig+0x474>)
 80048d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048d6:	f7fe ff0b 	bl	80036f0 <HAL_GetTick>
 80048da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048dc:	e008      	b.n	80048f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048de:	f7fe ff07 	bl	80036f0 <HAL_GetTick>
 80048e2:	4602      	mov	r2, r0
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	1ad3      	subs	r3, r2, r3
 80048e8:	2b02      	cmp	r3, #2
 80048ea:	d901      	bls.n	80048f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80048ec:	2303      	movs	r3, #3
 80048ee:	e10c      	b.n	8004b0a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048f0:	4b6a      	ldr	r3, [pc, #424]	@ (8004a9c <HAL_RCC_OscConfig+0x474>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d0f0      	beq.n	80048de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	2b01      	cmp	r3, #1
 8004902:	d106      	bne.n	8004912 <HAL_RCC_OscConfig+0x2ea>
 8004904:	4b64      	ldr	r3, [pc, #400]	@ (8004a98 <HAL_RCC_OscConfig+0x470>)
 8004906:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004908:	4a63      	ldr	r2, [pc, #396]	@ (8004a98 <HAL_RCC_OscConfig+0x470>)
 800490a:	f043 0301 	orr.w	r3, r3, #1
 800490e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004910:	e01c      	b.n	800494c <HAL_RCC_OscConfig+0x324>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	2b05      	cmp	r3, #5
 8004918:	d10c      	bne.n	8004934 <HAL_RCC_OscConfig+0x30c>
 800491a:	4b5f      	ldr	r3, [pc, #380]	@ (8004a98 <HAL_RCC_OscConfig+0x470>)
 800491c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800491e:	4a5e      	ldr	r2, [pc, #376]	@ (8004a98 <HAL_RCC_OscConfig+0x470>)
 8004920:	f043 0304 	orr.w	r3, r3, #4
 8004924:	6713      	str	r3, [r2, #112]	@ 0x70
 8004926:	4b5c      	ldr	r3, [pc, #368]	@ (8004a98 <HAL_RCC_OscConfig+0x470>)
 8004928:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800492a:	4a5b      	ldr	r2, [pc, #364]	@ (8004a98 <HAL_RCC_OscConfig+0x470>)
 800492c:	f043 0301 	orr.w	r3, r3, #1
 8004930:	6713      	str	r3, [r2, #112]	@ 0x70
 8004932:	e00b      	b.n	800494c <HAL_RCC_OscConfig+0x324>
 8004934:	4b58      	ldr	r3, [pc, #352]	@ (8004a98 <HAL_RCC_OscConfig+0x470>)
 8004936:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004938:	4a57      	ldr	r2, [pc, #348]	@ (8004a98 <HAL_RCC_OscConfig+0x470>)
 800493a:	f023 0301 	bic.w	r3, r3, #1
 800493e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004940:	4b55      	ldr	r3, [pc, #340]	@ (8004a98 <HAL_RCC_OscConfig+0x470>)
 8004942:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004944:	4a54      	ldr	r2, [pc, #336]	@ (8004a98 <HAL_RCC_OscConfig+0x470>)
 8004946:	f023 0304 	bic.w	r3, r3, #4
 800494a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d015      	beq.n	8004980 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004954:	f7fe fecc 	bl	80036f0 <HAL_GetTick>
 8004958:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800495a:	e00a      	b.n	8004972 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800495c:	f7fe fec8 	bl	80036f0 <HAL_GetTick>
 8004960:	4602      	mov	r2, r0
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	f241 3288 	movw	r2, #5000	@ 0x1388
 800496a:	4293      	cmp	r3, r2
 800496c:	d901      	bls.n	8004972 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	e0cb      	b.n	8004b0a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004972:	4b49      	ldr	r3, [pc, #292]	@ (8004a98 <HAL_RCC_OscConfig+0x470>)
 8004974:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004976:	f003 0302 	and.w	r3, r3, #2
 800497a:	2b00      	cmp	r3, #0
 800497c:	d0ee      	beq.n	800495c <HAL_RCC_OscConfig+0x334>
 800497e:	e014      	b.n	80049aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004980:	f7fe feb6 	bl	80036f0 <HAL_GetTick>
 8004984:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004986:	e00a      	b.n	800499e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004988:	f7fe feb2 	bl	80036f0 <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004996:	4293      	cmp	r3, r2
 8004998:	d901      	bls.n	800499e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800499a:	2303      	movs	r3, #3
 800499c:	e0b5      	b.n	8004b0a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800499e:	4b3e      	ldr	r3, [pc, #248]	@ (8004a98 <HAL_RCC_OscConfig+0x470>)
 80049a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049a2:	f003 0302 	and.w	r3, r3, #2
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d1ee      	bne.n	8004988 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80049aa:	7dfb      	ldrb	r3, [r7, #23]
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d105      	bne.n	80049bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049b0:	4b39      	ldr	r3, [pc, #228]	@ (8004a98 <HAL_RCC_OscConfig+0x470>)
 80049b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049b4:	4a38      	ldr	r2, [pc, #224]	@ (8004a98 <HAL_RCC_OscConfig+0x470>)
 80049b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80049ba:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	699b      	ldr	r3, [r3, #24]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	f000 80a1 	beq.w	8004b08 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80049c6:	4b34      	ldr	r3, [pc, #208]	@ (8004a98 <HAL_RCC_OscConfig+0x470>)
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	f003 030c 	and.w	r3, r3, #12
 80049ce:	2b08      	cmp	r3, #8
 80049d0:	d05c      	beq.n	8004a8c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	699b      	ldr	r3, [r3, #24]
 80049d6:	2b02      	cmp	r3, #2
 80049d8:	d141      	bne.n	8004a5e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049da:	4b31      	ldr	r3, [pc, #196]	@ (8004aa0 <HAL_RCC_OscConfig+0x478>)
 80049dc:	2200      	movs	r2, #0
 80049de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049e0:	f7fe fe86 	bl	80036f0 <HAL_GetTick>
 80049e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049e6:	e008      	b.n	80049fa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049e8:	f7fe fe82 	bl	80036f0 <HAL_GetTick>
 80049ec:	4602      	mov	r2, r0
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	2b02      	cmp	r3, #2
 80049f4:	d901      	bls.n	80049fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80049f6:	2303      	movs	r3, #3
 80049f8:	e087      	b.n	8004b0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049fa:	4b27      	ldr	r3, [pc, #156]	@ (8004a98 <HAL_RCC_OscConfig+0x470>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d1f0      	bne.n	80049e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	69da      	ldr	r2, [r3, #28]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6a1b      	ldr	r3, [r3, #32]
 8004a0e:	431a      	orrs	r2, r3
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a14:	019b      	lsls	r3, r3, #6
 8004a16:	431a      	orrs	r2, r3
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a1c:	085b      	lsrs	r3, r3, #1
 8004a1e:	3b01      	subs	r3, #1
 8004a20:	041b      	lsls	r3, r3, #16
 8004a22:	431a      	orrs	r2, r3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a28:	061b      	lsls	r3, r3, #24
 8004a2a:	491b      	ldr	r1, [pc, #108]	@ (8004a98 <HAL_RCC_OscConfig+0x470>)
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a30:	4b1b      	ldr	r3, [pc, #108]	@ (8004aa0 <HAL_RCC_OscConfig+0x478>)
 8004a32:	2201      	movs	r2, #1
 8004a34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a36:	f7fe fe5b 	bl	80036f0 <HAL_GetTick>
 8004a3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a3c:	e008      	b.n	8004a50 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a3e:	f7fe fe57 	bl	80036f0 <HAL_GetTick>
 8004a42:	4602      	mov	r2, r0
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	1ad3      	subs	r3, r2, r3
 8004a48:	2b02      	cmp	r3, #2
 8004a4a:	d901      	bls.n	8004a50 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	e05c      	b.n	8004b0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a50:	4b11      	ldr	r3, [pc, #68]	@ (8004a98 <HAL_RCC_OscConfig+0x470>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d0f0      	beq.n	8004a3e <HAL_RCC_OscConfig+0x416>
 8004a5c:	e054      	b.n	8004b08 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a5e:	4b10      	ldr	r3, [pc, #64]	@ (8004aa0 <HAL_RCC_OscConfig+0x478>)
 8004a60:	2200      	movs	r2, #0
 8004a62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a64:	f7fe fe44 	bl	80036f0 <HAL_GetTick>
 8004a68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a6a:	e008      	b.n	8004a7e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a6c:	f7fe fe40 	bl	80036f0 <HAL_GetTick>
 8004a70:	4602      	mov	r2, r0
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	2b02      	cmp	r3, #2
 8004a78:	d901      	bls.n	8004a7e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e045      	b.n	8004b0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a7e:	4b06      	ldr	r3, [pc, #24]	@ (8004a98 <HAL_RCC_OscConfig+0x470>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d1f0      	bne.n	8004a6c <HAL_RCC_OscConfig+0x444>
 8004a8a:	e03d      	b.n	8004b08 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	699b      	ldr	r3, [r3, #24]
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d107      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	e038      	b.n	8004b0a <HAL_RCC_OscConfig+0x4e2>
 8004a98:	40023800 	.word	0x40023800
 8004a9c:	40007000 	.word	0x40007000
 8004aa0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004aa4:	4b1b      	ldr	r3, [pc, #108]	@ (8004b14 <HAL_RCC_OscConfig+0x4ec>)
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	699b      	ldr	r3, [r3, #24]
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d028      	beq.n	8004b04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d121      	bne.n	8004b04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d11a      	bne.n	8004b04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ace:	68fa      	ldr	r2, [r7, #12]
 8004ad0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004ada:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d111      	bne.n	8004b04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aea:	085b      	lsrs	r3, r3, #1
 8004aec:	3b01      	subs	r3, #1
 8004aee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d107      	bne.n	8004b04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004afe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d001      	beq.n	8004b08 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	e000      	b.n	8004b0a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004b08:	2300      	movs	r3, #0
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3718      	adds	r7, #24
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}
 8004b12:	bf00      	nop
 8004b14:	40023800 	.word	0x40023800

08004b18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b084      	sub	sp, #16
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d101      	bne.n	8004b2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e0cc      	b.n	8004cc6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b2c:	4b68      	ldr	r3, [pc, #416]	@ (8004cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 0307 	and.w	r3, r3, #7
 8004b34:	683a      	ldr	r2, [r7, #0]
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d90c      	bls.n	8004b54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b3a:	4b65      	ldr	r3, [pc, #404]	@ (8004cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b3c:	683a      	ldr	r2, [r7, #0]
 8004b3e:	b2d2      	uxtb	r2, r2
 8004b40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b42:	4b63      	ldr	r3, [pc, #396]	@ (8004cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 0307 	and.w	r3, r3, #7
 8004b4a:	683a      	ldr	r2, [r7, #0]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d001      	beq.n	8004b54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	e0b8      	b.n	8004cc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 0302 	and.w	r3, r3, #2
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d020      	beq.n	8004ba2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 0304 	and.w	r3, r3, #4
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d005      	beq.n	8004b78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b6c:	4b59      	ldr	r3, [pc, #356]	@ (8004cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	4a58      	ldr	r2, [pc, #352]	@ (8004cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b72:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004b76:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 0308 	and.w	r3, r3, #8
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d005      	beq.n	8004b90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b84:	4b53      	ldr	r3, [pc, #332]	@ (8004cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	4a52      	ldr	r2, [pc, #328]	@ (8004cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b8a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004b8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b90:	4b50      	ldr	r3, [pc, #320]	@ (8004cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	494d      	ldr	r1, [pc, #308]	@ (8004cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 0301 	and.w	r3, r3, #1
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d044      	beq.n	8004c38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d107      	bne.n	8004bc6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bb6:	4b47      	ldr	r3, [pc, #284]	@ (8004cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d119      	bne.n	8004bf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e07f      	b.n	8004cc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	d003      	beq.n	8004bd6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bd2:	2b03      	cmp	r3, #3
 8004bd4:	d107      	bne.n	8004be6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bd6:	4b3f      	ldr	r3, [pc, #252]	@ (8004cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d109      	bne.n	8004bf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e06f      	b.n	8004cc6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004be6:	4b3b      	ldr	r3, [pc, #236]	@ (8004cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 0302 	and.w	r3, r3, #2
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d101      	bne.n	8004bf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e067      	b.n	8004cc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bf6:	4b37      	ldr	r3, [pc, #220]	@ (8004cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	f023 0203 	bic.w	r2, r3, #3
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	4934      	ldr	r1, [pc, #208]	@ (8004cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c04:	4313      	orrs	r3, r2
 8004c06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c08:	f7fe fd72 	bl	80036f0 <HAL_GetTick>
 8004c0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c0e:	e00a      	b.n	8004c26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c10:	f7fe fd6e 	bl	80036f0 <HAL_GetTick>
 8004c14:	4602      	mov	r2, r0
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d901      	bls.n	8004c26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c22:	2303      	movs	r3, #3
 8004c24:	e04f      	b.n	8004cc6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c26:	4b2b      	ldr	r3, [pc, #172]	@ (8004cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	f003 020c 	and.w	r2, r3, #12
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d1eb      	bne.n	8004c10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c38:	4b25      	ldr	r3, [pc, #148]	@ (8004cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 0307 	and.w	r3, r3, #7
 8004c40:	683a      	ldr	r2, [r7, #0]
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d20c      	bcs.n	8004c60 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c46:	4b22      	ldr	r3, [pc, #136]	@ (8004cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8004c48:	683a      	ldr	r2, [r7, #0]
 8004c4a:	b2d2      	uxtb	r2, r2
 8004c4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c4e:	4b20      	ldr	r3, [pc, #128]	@ (8004cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 0307 	and.w	r3, r3, #7
 8004c56:	683a      	ldr	r2, [r7, #0]
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d001      	beq.n	8004c60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e032      	b.n	8004cc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 0304 	and.w	r3, r3, #4
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d008      	beq.n	8004c7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c6c:	4b19      	ldr	r3, [pc, #100]	@ (8004cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	4916      	ldr	r1, [pc, #88]	@ (8004cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 0308 	and.w	r3, r3, #8
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d009      	beq.n	8004c9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c8a:	4b12      	ldr	r3, [pc, #72]	@ (8004cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	691b      	ldr	r3, [r3, #16]
 8004c96:	00db      	lsls	r3, r3, #3
 8004c98:	490e      	ldr	r1, [pc, #56]	@ (8004cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004c9e:	f000 f821 	bl	8004ce4 <HAL_RCC_GetSysClockFreq>
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	4b0b      	ldr	r3, [pc, #44]	@ (8004cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	091b      	lsrs	r3, r3, #4
 8004caa:	f003 030f 	and.w	r3, r3, #15
 8004cae:	490a      	ldr	r1, [pc, #40]	@ (8004cd8 <HAL_RCC_ClockConfig+0x1c0>)
 8004cb0:	5ccb      	ldrb	r3, [r1, r3]
 8004cb2:	fa22 f303 	lsr.w	r3, r2, r3
 8004cb6:	4a09      	ldr	r2, [pc, #36]	@ (8004cdc <HAL_RCC_ClockConfig+0x1c4>)
 8004cb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004cba:	4b09      	ldr	r3, [pc, #36]	@ (8004ce0 <HAL_RCC_ClockConfig+0x1c8>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f7fe fcd2 	bl	8003668 <HAL_InitTick>

  return HAL_OK;
 8004cc4:	2300      	movs	r3, #0
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3710      	adds	r7, #16
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	40023c00 	.word	0x40023c00
 8004cd4:	40023800 	.word	0x40023800
 8004cd8:	0800840c 	.word	0x0800840c
 8004cdc:	20000068 	.word	0x20000068
 8004ce0:	2000006c 	.word	0x2000006c

08004ce4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ce4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ce8:	b094      	sub	sp, #80	@ 0x50
 8004cea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004cec:	2300      	movs	r3, #0
 8004cee:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004cfc:	4b79      	ldr	r3, [pc, #484]	@ (8004ee4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	f003 030c 	and.w	r3, r3, #12
 8004d04:	2b08      	cmp	r3, #8
 8004d06:	d00d      	beq.n	8004d24 <HAL_RCC_GetSysClockFreq+0x40>
 8004d08:	2b08      	cmp	r3, #8
 8004d0a:	f200 80e1 	bhi.w	8004ed0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d002      	beq.n	8004d18 <HAL_RCC_GetSysClockFreq+0x34>
 8004d12:	2b04      	cmp	r3, #4
 8004d14:	d003      	beq.n	8004d1e <HAL_RCC_GetSysClockFreq+0x3a>
 8004d16:	e0db      	b.n	8004ed0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d18:	4b73      	ldr	r3, [pc, #460]	@ (8004ee8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004d1a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d1c:	e0db      	b.n	8004ed6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d1e:	4b73      	ldr	r3, [pc, #460]	@ (8004eec <HAL_RCC_GetSysClockFreq+0x208>)
 8004d20:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d22:	e0d8      	b.n	8004ed6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d24:	4b6f      	ldr	r3, [pc, #444]	@ (8004ee4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d2c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d2e:	4b6d      	ldr	r3, [pc, #436]	@ (8004ee4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d063      	beq.n	8004e02 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d3a:	4b6a      	ldr	r3, [pc, #424]	@ (8004ee4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	099b      	lsrs	r3, r3, #6
 8004d40:	2200      	movs	r2, #0
 8004d42:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004d44:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004d46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d4c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d4e:	2300      	movs	r3, #0
 8004d50:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d52:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004d56:	4622      	mov	r2, r4
 8004d58:	462b      	mov	r3, r5
 8004d5a:	f04f 0000 	mov.w	r0, #0
 8004d5e:	f04f 0100 	mov.w	r1, #0
 8004d62:	0159      	lsls	r1, r3, #5
 8004d64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d68:	0150      	lsls	r0, r2, #5
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	460b      	mov	r3, r1
 8004d6e:	4621      	mov	r1, r4
 8004d70:	1a51      	subs	r1, r2, r1
 8004d72:	6139      	str	r1, [r7, #16]
 8004d74:	4629      	mov	r1, r5
 8004d76:	eb63 0301 	sbc.w	r3, r3, r1
 8004d7a:	617b      	str	r3, [r7, #20]
 8004d7c:	f04f 0200 	mov.w	r2, #0
 8004d80:	f04f 0300 	mov.w	r3, #0
 8004d84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d88:	4659      	mov	r1, fp
 8004d8a:	018b      	lsls	r3, r1, #6
 8004d8c:	4651      	mov	r1, sl
 8004d8e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d92:	4651      	mov	r1, sl
 8004d94:	018a      	lsls	r2, r1, #6
 8004d96:	4651      	mov	r1, sl
 8004d98:	ebb2 0801 	subs.w	r8, r2, r1
 8004d9c:	4659      	mov	r1, fp
 8004d9e:	eb63 0901 	sbc.w	r9, r3, r1
 8004da2:	f04f 0200 	mov.w	r2, #0
 8004da6:	f04f 0300 	mov.w	r3, #0
 8004daa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004dae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004db2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004db6:	4690      	mov	r8, r2
 8004db8:	4699      	mov	r9, r3
 8004dba:	4623      	mov	r3, r4
 8004dbc:	eb18 0303 	adds.w	r3, r8, r3
 8004dc0:	60bb      	str	r3, [r7, #8]
 8004dc2:	462b      	mov	r3, r5
 8004dc4:	eb49 0303 	adc.w	r3, r9, r3
 8004dc8:	60fb      	str	r3, [r7, #12]
 8004dca:	f04f 0200 	mov.w	r2, #0
 8004dce:	f04f 0300 	mov.w	r3, #0
 8004dd2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004dd6:	4629      	mov	r1, r5
 8004dd8:	024b      	lsls	r3, r1, #9
 8004dda:	4621      	mov	r1, r4
 8004ddc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004de0:	4621      	mov	r1, r4
 8004de2:	024a      	lsls	r2, r1, #9
 8004de4:	4610      	mov	r0, r2
 8004de6:	4619      	mov	r1, r3
 8004de8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004dea:	2200      	movs	r2, #0
 8004dec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004dee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004df0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004df4:	f7fb fa4c 	bl	8000290 <__aeabi_uldivmod>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	460b      	mov	r3, r1
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e00:	e058      	b.n	8004eb4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e02:	4b38      	ldr	r3, [pc, #224]	@ (8004ee4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	099b      	lsrs	r3, r3, #6
 8004e08:	2200      	movs	r2, #0
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	4611      	mov	r1, r2
 8004e0e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004e12:	623b      	str	r3, [r7, #32]
 8004e14:	2300      	movs	r3, #0
 8004e16:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e18:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004e1c:	4642      	mov	r2, r8
 8004e1e:	464b      	mov	r3, r9
 8004e20:	f04f 0000 	mov.w	r0, #0
 8004e24:	f04f 0100 	mov.w	r1, #0
 8004e28:	0159      	lsls	r1, r3, #5
 8004e2a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e2e:	0150      	lsls	r0, r2, #5
 8004e30:	4602      	mov	r2, r0
 8004e32:	460b      	mov	r3, r1
 8004e34:	4641      	mov	r1, r8
 8004e36:	ebb2 0a01 	subs.w	sl, r2, r1
 8004e3a:	4649      	mov	r1, r9
 8004e3c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004e40:	f04f 0200 	mov.w	r2, #0
 8004e44:	f04f 0300 	mov.w	r3, #0
 8004e48:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004e4c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004e50:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004e54:	ebb2 040a 	subs.w	r4, r2, sl
 8004e58:	eb63 050b 	sbc.w	r5, r3, fp
 8004e5c:	f04f 0200 	mov.w	r2, #0
 8004e60:	f04f 0300 	mov.w	r3, #0
 8004e64:	00eb      	lsls	r3, r5, #3
 8004e66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e6a:	00e2      	lsls	r2, r4, #3
 8004e6c:	4614      	mov	r4, r2
 8004e6e:	461d      	mov	r5, r3
 8004e70:	4643      	mov	r3, r8
 8004e72:	18e3      	adds	r3, r4, r3
 8004e74:	603b      	str	r3, [r7, #0]
 8004e76:	464b      	mov	r3, r9
 8004e78:	eb45 0303 	adc.w	r3, r5, r3
 8004e7c:	607b      	str	r3, [r7, #4]
 8004e7e:	f04f 0200 	mov.w	r2, #0
 8004e82:	f04f 0300 	mov.w	r3, #0
 8004e86:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004e8a:	4629      	mov	r1, r5
 8004e8c:	028b      	lsls	r3, r1, #10
 8004e8e:	4621      	mov	r1, r4
 8004e90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e94:	4621      	mov	r1, r4
 8004e96:	028a      	lsls	r2, r1, #10
 8004e98:	4610      	mov	r0, r2
 8004e9a:	4619      	mov	r1, r3
 8004e9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	61bb      	str	r3, [r7, #24]
 8004ea2:	61fa      	str	r2, [r7, #28]
 8004ea4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ea8:	f7fb f9f2 	bl	8000290 <__aeabi_uldivmod>
 8004eac:	4602      	mov	r2, r0
 8004eae:	460b      	mov	r3, r1
 8004eb0:	4613      	mov	r3, r2
 8004eb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004eb4:	4b0b      	ldr	r3, [pc, #44]	@ (8004ee4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	0c1b      	lsrs	r3, r3, #16
 8004eba:	f003 0303 	and.w	r3, r3, #3
 8004ebe:	3301      	adds	r3, #1
 8004ec0:	005b      	lsls	r3, r3, #1
 8004ec2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004ec4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004ec6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ecc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004ece:	e002      	b.n	8004ed6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ed0:	4b05      	ldr	r3, [pc, #20]	@ (8004ee8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004ed2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004ed4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ed6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3750      	adds	r7, #80	@ 0x50
 8004edc:	46bd      	mov	sp, r7
 8004ede:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ee2:	bf00      	nop
 8004ee4:	40023800 	.word	0x40023800
 8004ee8:	00f42400 	.word	0x00f42400
 8004eec:	007a1200 	.word	0x007a1200

08004ef0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ef4:	4b03      	ldr	r3, [pc, #12]	@ (8004f04 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	46bd      	mov	sp, r7
 8004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f00:	4770      	bx	lr
 8004f02:	bf00      	nop
 8004f04:	20000068 	.word	0x20000068

08004f08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004f0c:	f7ff fff0 	bl	8004ef0 <HAL_RCC_GetHCLKFreq>
 8004f10:	4602      	mov	r2, r0
 8004f12:	4b05      	ldr	r3, [pc, #20]	@ (8004f28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	0a9b      	lsrs	r3, r3, #10
 8004f18:	f003 0307 	and.w	r3, r3, #7
 8004f1c:	4903      	ldr	r1, [pc, #12]	@ (8004f2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f1e:	5ccb      	ldrb	r3, [r1, r3]
 8004f20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	bd80      	pop	{r7, pc}
 8004f28:	40023800 	.word	0x40023800
 8004f2c:	0800841c 	.word	0x0800841c

08004f30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004f34:	f7ff ffdc 	bl	8004ef0 <HAL_RCC_GetHCLKFreq>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	4b05      	ldr	r3, [pc, #20]	@ (8004f50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	0b5b      	lsrs	r3, r3, #13
 8004f40:	f003 0307 	and.w	r3, r3, #7
 8004f44:	4903      	ldr	r1, [pc, #12]	@ (8004f54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f46:	5ccb      	ldrb	r3, [r1, r3]
 8004f48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	bd80      	pop	{r7, pc}
 8004f50:	40023800 	.word	0x40023800
 8004f54:	0800841c 	.word	0x0800841c

08004f58 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b082      	sub	sp, #8
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d101      	bne.n	8004f6a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e07b      	b.n	8005062 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d108      	bne.n	8004f84 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f7a:	d009      	beq.n	8004f90 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	61da      	str	r2, [r3, #28]
 8004f82:	e005      	b.n	8004f90 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2200      	movs	r2, #0
 8004f88:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d106      	bne.n	8004fb0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f7fe f920 	bl	80031f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2202      	movs	r2, #2
 8004fb4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004fc6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004fd8:	431a      	orrs	r2, r3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004fe2:	431a      	orrs	r2, r3
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	691b      	ldr	r3, [r3, #16]
 8004fe8:	f003 0302 	and.w	r3, r3, #2
 8004fec:	431a      	orrs	r2, r3
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	695b      	ldr	r3, [r3, #20]
 8004ff2:	f003 0301 	and.w	r3, r3, #1
 8004ff6:	431a      	orrs	r2, r3
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	699b      	ldr	r3, [r3, #24]
 8004ffc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005000:	431a      	orrs	r2, r3
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	69db      	ldr	r3, [r3, #28]
 8005006:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800500a:	431a      	orrs	r2, r3
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6a1b      	ldr	r3, [r3, #32]
 8005010:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005014:	ea42 0103 	orr.w	r1, r2, r3
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800501c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	430a      	orrs	r2, r1
 8005026:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	699b      	ldr	r3, [r3, #24]
 800502c:	0c1b      	lsrs	r3, r3, #16
 800502e:	f003 0104 	and.w	r1, r3, #4
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005036:	f003 0210 	and.w	r2, r3, #16
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	430a      	orrs	r2, r1
 8005040:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	69da      	ldr	r2, [r3, #28]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005050:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005060:	2300      	movs	r3, #0
}
 8005062:	4618      	mov	r0, r3
 8005064:	3708      	adds	r7, #8
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}

0800506a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800506a:	b580      	push	{r7, lr}
 800506c:	b08a      	sub	sp, #40	@ 0x28
 800506e:	af00      	add	r7, sp, #0
 8005070:	60f8      	str	r0, [r7, #12]
 8005072:	60b9      	str	r1, [r7, #8]
 8005074:	607a      	str	r2, [r7, #4]
 8005076:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005078:	2301      	movs	r3, #1
 800507a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800507c:	f7fe fb38 	bl	80036f0 <HAL_GetTick>
 8005080:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005088:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005090:	887b      	ldrh	r3, [r7, #2]
 8005092:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005094:	7ffb      	ldrb	r3, [r7, #31]
 8005096:	2b01      	cmp	r3, #1
 8005098:	d00c      	beq.n	80050b4 <HAL_SPI_TransmitReceive+0x4a>
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80050a0:	d106      	bne.n	80050b0 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d102      	bne.n	80050b0 <HAL_SPI_TransmitReceive+0x46>
 80050aa:	7ffb      	ldrb	r3, [r7, #31]
 80050ac:	2b04      	cmp	r3, #4
 80050ae:	d001      	beq.n	80050b4 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80050b0:	2302      	movs	r3, #2
 80050b2:	e17f      	b.n	80053b4 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d005      	beq.n	80050c6 <HAL_SPI_TransmitReceive+0x5c>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d002      	beq.n	80050c6 <HAL_SPI_TransmitReceive+0x5c>
 80050c0:	887b      	ldrh	r3, [r7, #2]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d101      	bne.n	80050ca <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e174      	b.n	80053b4 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d101      	bne.n	80050d8 <HAL_SPI_TransmitReceive+0x6e>
 80050d4:	2302      	movs	r3, #2
 80050d6:	e16d      	b.n	80053b4 <HAL_SPI_TransmitReceive+0x34a>
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	2b04      	cmp	r3, #4
 80050ea:	d003      	beq.n	80050f4 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2205      	movs	r2, #5
 80050f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2200      	movs	r2, #0
 80050f8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	887a      	ldrh	r2, [r7, #2]
 8005104:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	887a      	ldrh	r2, [r7, #2]
 800510a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	68ba      	ldr	r2, [r7, #8]
 8005110:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	887a      	ldrh	r2, [r7, #2]
 8005116:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	887a      	ldrh	r2, [r7, #2]
 800511c:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2200      	movs	r2, #0
 8005122:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2200      	movs	r2, #0
 8005128:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005134:	2b40      	cmp	r3, #64	@ 0x40
 8005136:	d007      	beq.n	8005148 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005146:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005150:	d17e      	bne.n	8005250 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d002      	beq.n	8005160 <HAL_SPI_TransmitReceive+0xf6>
 800515a:	8afb      	ldrh	r3, [r7, #22]
 800515c:	2b01      	cmp	r3, #1
 800515e:	d16c      	bne.n	800523a <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005164:	881a      	ldrh	r2, [r3, #0]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005170:	1c9a      	adds	r2, r3, #2
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800517a:	b29b      	uxth	r3, r3
 800517c:	3b01      	subs	r3, #1
 800517e:	b29a      	uxth	r2, r3
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005184:	e059      	b.n	800523a <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	f003 0302 	and.w	r3, r3, #2
 8005190:	2b02      	cmp	r3, #2
 8005192:	d11b      	bne.n	80051cc <HAL_SPI_TransmitReceive+0x162>
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005198:	b29b      	uxth	r3, r3
 800519a:	2b00      	cmp	r3, #0
 800519c:	d016      	beq.n	80051cc <HAL_SPI_TransmitReceive+0x162>
 800519e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d113      	bne.n	80051cc <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051a8:	881a      	ldrh	r2, [r3, #0]
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051b4:	1c9a      	adds	r2, r3, #2
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80051be:	b29b      	uxth	r3, r3
 80051c0:	3b01      	subs	r3, #1
 80051c2:	b29a      	uxth	r2, r3
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80051c8:	2300      	movs	r3, #0
 80051ca:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	f003 0301 	and.w	r3, r3, #1
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d119      	bne.n	800520e <HAL_SPI_TransmitReceive+0x1a4>
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051de:	b29b      	uxth	r3, r3
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d014      	beq.n	800520e <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	68da      	ldr	r2, [r3, #12]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051ee:	b292      	uxth	r2, r2
 80051f0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051f6:	1c9a      	adds	r2, r3, #2
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005200:	b29b      	uxth	r3, r3
 8005202:	3b01      	subs	r3, #1
 8005204:	b29a      	uxth	r2, r3
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800520a:	2301      	movs	r3, #1
 800520c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800520e:	f7fe fa6f 	bl	80036f0 <HAL_GetTick>
 8005212:	4602      	mov	r2, r0
 8005214:	6a3b      	ldr	r3, [r7, #32]
 8005216:	1ad3      	subs	r3, r2, r3
 8005218:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800521a:	429a      	cmp	r2, r3
 800521c:	d80d      	bhi.n	800523a <HAL_SPI_TransmitReceive+0x1d0>
 800521e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005224:	d009      	beq.n	800523a <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2201      	movs	r2, #1
 800522a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2200      	movs	r2, #0
 8005232:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005236:	2303      	movs	r3, #3
 8005238:	e0bc      	b.n	80053b4 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800523e:	b29b      	uxth	r3, r3
 8005240:	2b00      	cmp	r3, #0
 8005242:	d1a0      	bne.n	8005186 <HAL_SPI_TransmitReceive+0x11c>
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005248:	b29b      	uxth	r3, r3
 800524a:	2b00      	cmp	r3, #0
 800524c:	d19b      	bne.n	8005186 <HAL_SPI_TransmitReceive+0x11c>
 800524e:	e082      	b.n	8005356 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d002      	beq.n	800525e <HAL_SPI_TransmitReceive+0x1f4>
 8005258:	8afb      	ldrh	r3, [r7, #22]
 800525a:	2b01      	cmp	r3, #1
 800525c:	d171      	bne.n	8005342 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	330c      	adds	r3, #12
 8005268:	7812      	ldrb	r2, [r2, #0]
 800526a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005270:	1c5a      	adds	r2, r3, #1
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800527a:	b29b      	uxth	r3, r3
 800527c:	3b01      	subs	r3, #1
 800527e:	b29a      	uxth	r2, r3
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005284:	e05d      	b.n	8005342 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	f003 0302 	and.w	r3, r3, #2
 8005290:	2b02      	cmp	r3, #2
 8005292:	d11c      	bne.n	80052ce <HAL_SPI_TransmitReceive+0x264>
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005298:	b29b      	uxth	r3, r3
 800529a:	2b00      	cmp	r3, #0
 800529c:	d017      	beq.n	80052ce <HAL_SPI_TransmitReceive+0x264>
 800529e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d114      	bne.n	80052ce <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	330c      	adds	r3, #12
 80052ae:	7812      	ldrb	r2, [r2, #0]
 80052b0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052b6:	1c5a      	adds	r2, r3, #1
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	3b01      	subs	r3, #1
 80052c4:	b29a      	uxth	r2, r3
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80052ca:	2300      	movs	r3, #0
 80052cc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	f003 0301 	and.w	r3, r3, #1
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d119      	bne.n	8005310 <HAL_SPI_TransmitReceive+0x2a6>
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d014      	beq.n	8005310 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	68da      	ldr	r2, [r3, #12]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052f0:	b2d2      	uxtb	r2, r2
 80052f2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052f8:	1c5a      	adds	r2, r3, #1
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005302:	b29b      	uxth	r3, r3
 8005304:	3b01      	subs	r3, #1
 8005306:	b29a      	uxth	r2, r3
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800530c:	2301      	movs	r3, #1
 800530e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005310:	f7fe f9ee 	bl	80036f0 <HAL_GetTick>
 8005314:	4602      	mov	r2, r0
 8005316:	6a3b      	ldr	r3, [r7, #32]
 8005318:	1ad3      	subs	r3, r2, r3
 800531a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800531c:	429a      	cmp	r2, r3
 800531e:	d803      	bhi.n	8005328 <HAL_SPI_TransmitReceive+0x2be>
 8005320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005326:	d102      	bne.n	800532e <HAL_SPI_TransmitReceive+0x2c4>
 8005328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800532a:	2b00      	cmp	r3, #0
 800532c:	d109      	bne.n	8005342 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2201      	movs	r2, #1
 8005332:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2200      	movs	r2, #0
 800533a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800533e:	2303      	movs	r3, #3
 8005340:	e038      	b.n	80053b4 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005346:	b29b      	uxth	r3, r3
 8005348:	2b00      	cmp	r3, #0
 800534a:	d19c      	bne.n	8005286 <HAL_SPI_TransmitReceive+0x21c>
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005350:	b29b      	uxth	r3, r3
 8005352:	2b00      	cmp	r3, #0
 8005354:	d197      	bne.n	8005286 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005356:	6a3a      	ldr	r2, [r7, #32]
 8005358:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800535a:	68f8      	ldr	r0, [r7, #12]
 800535c:	f000 f8b6 	bl	80054cc <SPI_EndRxTxTransaction>
 8005360:	4603      	mov	r3, r0
 8005362:	2b00      	cmp	r3, #0
 8005364:	d008      	beq.n	8005378 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2220      	movs	r2, #32
 800536a:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2200      	movs	r2, #0
 8005370:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e01d      	b.n	80053b4 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d10a      	bne.n	8005396 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005380:	2300      	movs	r3, #0
 8005382:	613b      	str	r3, [r7, #16]
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	68db      	ldr	r3, [r3, #12]
 800538a:	613b      	str	r3, [r7, #16]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	613b      	str	r3, [r7, #16]
 8005394:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2201      	movs	r2, #1
 800539a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2200      	movs	r2, #0
 80053a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d001      	beq.n	80053b2 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	e000      	b.n	80053b4 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80053b2:	2300      	movs	r3, #0
  }
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3728      	adds	r7, #40	@ 0x28
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}

080053bc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b088      	sub	sp, #32
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	60f8      	str	r0, [r7, #12]
 80053c4:	60b9      	str	r1, [r7, #8]
 80053c6:	603b      	str	r3, [r7, #0]
 80053c8:	4613      	mov	r3, r2
 80053ca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80053cc:	f7fe f990 	bl	80036f0 <HAL_GetTick>
 80053d0:	4602      	mov	r2, r0
 80053d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053d4:	1a9b      	subs	r3, r3, r2
 80053d6:	683a      	ldr	r2, [r7, #0]
 80053d8:	4413      	add	r3, r2
 80053da:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80053dc:	f7fe f988 	bl	80036f0 <HAL_GetTick>
 80053e0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80053e2:	4b39      	ldr	r3, [pc, #228]	@ (80054c8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	015b      	lsls	r3, r3, #5
 80053e8:	0d1b      	lsrs	r3, r3, #20
 80053ea:	69fa      	ldr	r2, [r7, #28]
 80053ec:	fb02 f303 	mul.w	r3, r2, r3
 80053f0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80053f2:	e054      	b.n	800549e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053fa:	d050      	beq.n	800549e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80053fc:	f7fe f978 	bl	80036f0 <HAL_GetTick>
 8005400:	4602      	mov	r2, r0
 8005402:	69bb      	ldr	r3, [r7, #24]
 8005404:	1ad3      	subs	r3, r2, r3
 8005406:	69fa      	ldr	r2, [r7, #28]
 8005408:	429a      	cmp	r2, r3
 800540a:	d902      	bls.n	8005412 <SPI_WaitFlagStateUntilTimeout+0x56>
 800540c:	69fb      	ldr	r3, [r7, #28]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d13d      	bne.n	800548e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	685a      	ldr	r2, [r3, #4]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005420:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800542a:	d111      	bne.n	8005450 <SPI_WaitFlagStateUntilTimeout+0x94>
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005434:	d004      	beq.n	8005440 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800543e:	d107      	bne.n	8005450 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800544e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005454:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005458:	d10f      	bne.n	800547a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005468:	601a      	str	r2, [r3, #0]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005478:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2201      	movs	r2, #1
 800547e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2200      	movs	r2, #0
 8005486:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	e017      	b.n	80054be <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d101      	bne.n	8005498 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005494:	2300      	movs	r3, #0
 8005496:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	3b01      	subs	r3, #1
 800549c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	689a      	ldr	r2, [r3, #8]
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	4013      	ands	r3, r2
 80054a8:	68ba      	ldr	r2, [r7, #8]
 80054aa:	429a      	cmp	r2, r3
 80054ac:	bf0c      	ite	eq
 80054ae:	2301      	moveq	r3, #1
 80054b0:	2300      	movne	r3, #0
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	461a      	mov	r2, r3
 80054b6:	79fb      	ldrb	r3, [r7, #7]
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d19b      	bne.n	80053f4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80054bc:	2300      	movs	r3, #0
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3720      	adds	r7, #32
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
 80054c6:	bf00      	nop
 80054c8:	20000068 	.word	0x20000068

080054cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b088      	sub	sp, #32
 80054d0:	af02      	add	r7, sp, #8
 80054d2:	60f8      	str	r0, [r7, #12]
 80054d4:	60b9      	str	r1, [r7, #8]
 80054d6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	9300      	str	r3, [sp, #0]
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	2201      	movs	r2, #1
 80054e0:	2102      	movs	r1, #2
 80054e2:	68f8      	ldr	r0, [r7, #12]
 80054e4:	f7ff ff6a 	bl	80053bc <SPI_WaitFlagStateUntilTimeout>
 80054e8:	4603      	mov	r3, r0
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d007      	beq.n	80054fe <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054f2:	f043 0220 	orr.w	r2, r3, #32
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80054fa:	2303      	movs	r3, #3
 80054fc:	e032      	b.n	8005564 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80054fe:	4b1b      	ldr	r3, [pc, #108]	@ (800556c <SPI_EndRxTxTransaction+0xa0>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a1b      	ldr	r2, [pc, #108]	@ (8005570 <SPI_EndRxTxTransaction+0xa4>)
 8005504:	fba2 2303 	umull	r2, r3, r2, r3
 8005508:	0d5b      	lsrs	r3, r3, #21
 800550a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800550e:	fb02 f303 	mul.w	r3, r2, r3
 8005512:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800551c:	d112      	bne.n	8005544 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	9300      	str	r3, [sp, #0]
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	2200      	movs	r2, #0
 8005526:	2180      	movs	r1, #128	@ 0x80
 8005528:	68f8      	ldr	r0, [r7, #12]
 800552a:	f7ff ff47 	bl	80053bc <SPI_WaitFlagStateUntilTimeout>
 800552e:	4603      	mov	r3, r0
 8005530:	2b00      	cmp	r3, #0
 8005532:	d016      	beq.n	8005562 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005538:	f043 0220 	orr.w	r2, r3, #32
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005540:	2303      	movs	r3, #3
 8005542:	e00f      	b.n	8005564 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d00a      	beq.n	8005560 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	3b01      	subs	r3, #1
 800554e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800555a:	2b80      	cmp	r3, #128	@ 0x80
 800555c:	d0f2      	beq.n	8005544 <SPI_EndRxTxTransaction+0x78>
 800555e:	e000      	b.n	8005562 <SPI_EndRxTxTransaction+0x96>
        break;
 8005560:	bf00      	nop
  }

  return HAL_OK;
 8005562:	2300      	movs	r3, #0
}
 8005564:	4618      	mov	r0, r3
 8005566:	3718      	adds	r7, #24
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}
 800556c:	20000068 	.word	0x20000068
 8005570:	165e9f81 	.word	0x165e9f81

08005574 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b082      	sub	sp, #8
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d101      	bne.n	8005586 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	e041      	b.n	800560a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800558c:	b2db      	uxtb	r3, r3
 800558e:	2b00      	cmp	r3, #0
 8005590:	d106      	bne.n	80055a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2200      	movs	r2, #0
 8005596:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f7fd fe70 	bl	8003280 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2202      	movs	r2, #2
 80055a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	3304      	adds	r3, #4
 80055b0:	4619      	mov	r1, r3
 80055b2:	4610      	mov	r0, r2
 80055b4:	f000 fb26 	bl	8005c04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2201      	movs	r2, #1
 80055bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2201      	movs	r2, #1
 80055c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2201      	movs	r2, #1
 80055cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2201      	movs	r2, #1
 80055d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2201      	movs	r2, #1
 80055f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2201      	movs	r2, #1
 80055fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005608:	2300      	movs	r3, #0
}
 800560a:	4618      	mov	r0, r3
 800560c:	3708      	adds	r7, #8
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}

08005612 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005612:	b580      	push	{r7, lr}
 8005614:	b082      	sub	sp, #8
 8005616:	af00      	add	r7, sp, #0
 8005618:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d101      	bne.n	8005624 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005620:	2301      	movs	r3, #1
 8005622:	e041      	b.n	80056a8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800562a:	b2db      	uxtb	r3, r3
 800562c:	2b00      	cmp	r3, #0
 800562e:	d106      	bne.n	800563e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f000 f839 	bl	80056b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2202      	movs	r2, #2
 8005642:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	3304      	adds	r3, #4
 800564e:	4619      	mov	r1, r3
 8005650:	4610      	mov	r0, r2
 8005652:	f000 fad7 	bl	8005c04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2201      	movs	r2, #1
 800565a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2201      	movs	r2, #1
 8005662:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2201      	movs	r2, #1
 800566a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2201      	movs	r2, #1
 8005672:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2201      	movs	r2, #1
 800567a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2201      	movs	r2, #1
 8005682:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2201      	movs	r2, #1
 800568a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2201      	movs	r2, #1
 8005692:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2201      	movs	r2, #1
 800569a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2201      	movs	r2, #1
 80056a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80056a6:	2300      	movs	r3, #0
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3708      	adds	r7, #8
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b083      	sub	sp, #12
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80056b8:	bf00      	nop
 80056ba:	370c      	adds	r7, #12
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr

080056c4 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b084      	sub	sp, #16
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056ce:	2300      	movs	r3, #0
 80056d0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d109      	bne.n	80056ec <HAL_TIM_PWM_Start_IT+0x28>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80056de:	b2db      	uxtb	r3, r3
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	bf14      	ite	ne
 80056e4:	2301      	movne	r3, #1
 80056e6:	2300      	moveq	r3, #0
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	e022      	b.n	8005732 <HAL_TIM_PWM_Start_IT+0x6e>
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	2b04      	cmp	r3, #4
 80056f0:	d109      	bne.n	8005706 <HAL_TIM_PWM_Start_IT+0x42>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	bf14      	ite	ne
 80056fe:	2301      	movne	r3, #1
 8005700:	2300      	moveq	r3, #0
 8005702:	b2db      	uxtb	r3, r3
 8005704:	e015      	b.n	8005732 <HAL_TIM_PWM_Start_IT+0x6e>
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	2b08      	cmp	r3, #8
 800570a:	d109      	bne.n	8005720 <HAL_TIM_PWM_Start_IT+0x5c>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005712:	b2db      	uxtb	r3, r3
 8005714:	2b01      	cmp	r3, #1
 8005716:	bf14      	ite	ne
 8005718:	2301      	movne	r3, #1
 800571a:	2300      	moveq	r3, #0
 800571c:	b2db      	uxtb	r3, r3
 800571e:	e008      	b.n	8005732 <HAL_TIM_PWM_Start_IT+0x6e>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005726:	b2db      	uxtb	r3, r3
 8005728:	2b01      	cmp	r3, #1
 800572a:	bf14      	ite	ne
 800572c:	2301      	movne	r3, #1
 800572e:	2300      	moveq	r3, #0
 8005730:	b2db      	uxtb	r3, r3
 8005732:	2b00      	cmp	r3, #0
 8005734:	d001      	beq.n	800573a <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	e0c7      	b.n	80058ca <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d104      	bne.n	800574a <HAL_TIM_PWM_Start_IT+0x86>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2202      	movs	r2, #2
 8005744:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005748:	e013      	b.n	8005772 <HAL_TIM_PWM_Start_IT+0xae>
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	2b04      	cmp	r3, #4
 800574e:	d104      	bne.n	800575a <HAL_TIM_PWM_Start_IT+0x96>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2202      	movs	r2, #2
 8005754:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005758:	e00b      	b.n	8005772 <HAL_TIM_PWM_Start_IT+0xae>
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	2b08      	cmp	r3, #8
 800575e:	d104      	bne.n	800576a <HAL_TIM_PWM_Start_IT+0xa6>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2202      	movs	r2, #2
 8005764:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005768:	e003      	b.n	8005772 <HAL_TIM_PWM_Start_IT+0xae>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2202      	movs	r2, #2
 800576e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	2b0c      	cmp	r3, #12
 8005776:	d841      	bhi.n	80057fc <HAL_TIM_PWM_Start_IT+0x138>
 8005778:	a201      	add	r2, pc, #4	@ (adr r2, 8005780 <HAL_TIM_PWM_Start_IT+0xbc>)
 800577a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800577e:	bf00      	nop
 8005780:	080057b5 	.word	0x080057b5
 8005784:	080057fd 	.word	0x080057fd
 8005788:	080057fd 	.word	0x080057fd
 800578c:	080057fd 	.word	0x080057fd
 8005790:	080057c7 	.word	0x080057c7
 8005794:	080057fd 	.word	0x080057fd
 8005798:	080057fd 	.word	0x080057fd
 800579c:	080057fd 	.word	0x080057fd
 80057a0:	080057d9 	.word	0x080057d9
 80057a4:	080057fd 	.word	0x080057fd
 80057a8:	080057fd 	.word	0x080057fd
 80057ac:	080057fd 	.word	0x080057fd
 80057b0:	080057eb 	.word	0x080057eb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	68da      	ldr	r2, [r3, #12]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f042 0202 	orr.w	r2, r2, #2
 80057c2:	60da      	str	r2, [r3, #12]
      break;
 80057c4:	e01d      	b.n	8005802 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	68da      	ldr	r2, [r3, #12]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f042 0204 	orr.w	r2, r2, #4
 80057d4:	60da      	str	r2, [r3, #12]
      break;
 80057d6:	e014      	b.n	8005802 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	68da      	ldr	r2, [r3, #12]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f042 0208 	orr.w	r2, r2, #8
 80057e6:	60da      	str	r2, [r3, #12]
      break;
 80057e8:	e00b      	b.n	8005802 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	68da      	ldr	r2, [r3, #12]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f042 0210 	orr.w	r2, r2, #16
 80057f8:	60da      	str	r2, [r3, #12]
      break;
 80057fa:	e002      	b.n	8005802 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	73fb      	strb	r3, [r7, #15]
      break;
 8005800:	bf00      	nop
  }

  if (status == HAL_OK)
 8005802:	7bfb      	ldrb	r3, [r7, #15]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d15f      	bne.n	80058c8 <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	2201      	movs	r2, #1
 800580e:	6839      	ldr	r1, [r7, #0]
 8005810:	4618      	mov	r0, r3
 8005812:	f000 fced 	bl	80061f0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a2e      	ldr	r2, [pc, #184]	@ (80058d4 <HAL_TIM_PWM_Start_IT+0x210>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d004      	beq.n	800582a <HAL_TIM_PWM_Start_IT+0x166>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a2c      	ldr	r2, [pc, #176]	@ (80058d8 <HAL_TIM_PWM_Start_IT+0x214>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d101      	bne.n	800582e <HAL_TIM_PWM_Start_IT+0x16a>
 800582a:	2301      	movs	r3, #1
 800582c:	e000      	b.n	8005830 <HAL_TIM_PWM_Start_IT+0x16c>
 800582e:	2300      	movs	r3, #0
 8005830:	2b00      	cmp	r3, #0
 8005832:	d007      	beq.n	8005844 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005842:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a22      	ldr	r2, [pc, #136]	@ (80058d4 <HAL_TIM_PWM_Start_IT+0x210>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d022      	beq.n	8005894 <HAL_TIM_PWM_Start_IT+0x1d0>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005856:	d01d      	beq.n	8005894 <HAL_TIM_PWM_Start_IT+0x1d0>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a1f      	ldr	r2, [pc, #124]	@ (80058dc <HAL_TIM_PWM_Start_IT+0x218>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d018      	beq.n	8005894 <HAL_TIM_PWM_Start_IT+0x1d0>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a1e      	ldr	r2, [pc, #120]	@ (80058e0 <HAL_TIM_PWM_Start_IT+0x21c>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d013      	beq.n	8005894 <HAL_TIM_PWM_Start_IT+0x1d0>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a1c      	ldr	r2, [pc, #112]	@ (80058e4 <HAL_TIM_PWM_Start_IT+0x220>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d00e      	beq.n	8005894 <HAL_TIM_PWM_Start_IT+0x1d0>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a17      	ldr	r2, [pc, #92]	@ (80058d8 <HAL_TIM_PWM_Start_IT+0x214>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d009      	beq.n	8005894 <HAL_TIM_PWM_Start_IT+0x1d0>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a18      	ldr	r2, [pc, #96]	@ (80058e8 <HAL_TIM_PWM_Start_IT+0x224>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d004      	beq.n	8005894 <HAL_TIM_PWM_Start_IT+0x1d0>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a17      	ldr	r2, [pc, #92]	@ (80058ec <HAL_TIM_PWM_Start_IT+0x228>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d111      	bne.n	80058b8 <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	f003 0307 	and.w	r3, r3, #7
 800589e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	2b06      	cmp	r3, #6
 80058a4:	d010      	beq.n	80058c8 <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f042 0201 	orr.w	r2, r2, #1
 80058b4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058b6:	e007      	b.n	80058c8 <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f042 0201 	orr.w	r2, r2, #1
 80058c6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80058c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3710      	adds	r7, #16
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}
 80058d2:	bf00      	nop
 80058d4:	40010000 	.word	0x40010000
 80058d8:	40010400 	.word	0x40010400
 80058dc:	40000400 	.word	0x40000400
 80058e0:	40000800 	.word	0x40000800
 80058e4:	40000c00 	.word	0x40000c00
 80058e8:	40014000 	.word	0x40014000
 80058ec:	40001800 	.word	0x40001800

080058f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b086      	sub	sp, #24
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	60f8      	str	r0, [r7, #12]
 80058f8:	60b9      	str	r1, [r7, #8]
 80058fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058fc:	2300      	movs	r3, #0
 80058fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005906:	2b01      	cmp	r3, #1
 8005908:	d101      	bne.n	800590e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800590a:	2302      	movs	r3, #2
 800590c:	e0ae      	b.n	8005a6c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2201      	movs	r2, #1
 8005912:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2b0c      	cmp	r3, #12
 800591a:	f200 809f 	bhi.w	8005a5c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800591e:	a201      	add	r2, pc, #4	@ (adr r2, 8005924 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005924:	08005959 	.word	0x08005959
 8005928:	08005a5d 	.word	0x08005a5d
 800592c:	08005a5d 	.word	0x08005a5d
 8005930:	08005a5d 	.word	0x08005a5d
 8005934:	08005999 	.word	0x08005999
 8005938:	08005a5d 	.word	0x08005a5d
 800593c:	08005a5d 	.word	0x08005a5d
 8005940:	08005a5d 	.word	0x08005a5d
 8005944:	080059db 	.word	0x080059db
 8005948:	08005a5d 	.word	0x08005a5d
 800594c:	08005a5d 	.word	0x08005a5d
 8005950:	08005a5d 	.word	0x08005a5d
 8005954:	08005a1b 	.word	0x08005a1b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	68b9      	ldr	r1, [r7, #8]
 800595e:	4618      	mov	r0, r3
 8005960:	f000 f9fc 	bl	8005d5c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	699a      	ldr	r2, [r3, #24]
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f042 0208 	orr.w	r2, r2, #8
 8005972:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	699a      	ldr	r2, [r3, #24]
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f022 0204 	bic.w	r2, r2, #4
 8005982:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	6999      	ldr	r1, [r3, #24]
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	691a      	ldr	r2, [r3, #16]
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	430a      	orrs	r2, r1
 8005994:	619a      	str	r2, [r3, #24]
      break;
 8005996:	e064      	b.n	8005a62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	68b9      	ldr	r1, [r7, #8]
 800599e:	4618      	mov	r0, r3
 80059a0:	f000 fa4c 	bl	8005e3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	699a      	ldr	r2, [r3, #24]
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80059b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	699a      	ldr	r2, [r3, #24]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80059c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	6999      	ldr	r1, [r3, #24]
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	691b      	ldr	r3, [r3, #16]
 80059ce:	021a      	lsls	r2, r3, #8
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	430a      	orrs	r2, r1
 80059d6:	619a      	str	r2, [r3, #24]
      break;
 80059d8:	e043      	b.n	8005a62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	68b9      	ldr	r1, [r7, #8]
 80059e0:	4618      	mov	r0, r3
 80059e2:	f000 faa1 	bl	8005f28 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	69da      	ldr	r2, [r3, #28]
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f042 0208 	orr.w	r2, r2, #8
 80059f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	69da      	ldr	r2, [r3, #28]
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f022 0204 	bic.w	r2, r2, #4
 8005a04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	69d9      	ldr	r1, [r3, #28]
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	691a      	ldr	r2, [r3, #16]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	430a      	orrs	r2, r1
 8005a16:	61da      	str	r2, [r3, #28]
      break;
 8005a18:	e023      	b.n	8005a62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	68b9      	ldr	r1, [r7, #8]
 8005a20:	4618      	mov	r0, r3
 8005a22:	f000 faf5 	bl	8006010 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	69da      	ldr	r2, [r3, #28]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005a34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	69da      	ldr	r2, [r3, #28]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	69d9      	ldr	r1, [r3, #28]
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	691b      	ldr	r3, [r3, #16]
 8005a50:	021a      	lsls	r2, r3, #8
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	430a      	orrs	r2, r1
 8005a58:	61da      	str	r2, [r3, #28]
      break;
 8005a5a:	e002      	b.n	8005a62 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	75fb      	strb	r3, [r7, #23]
      break;
 8005a60:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2200      	movs	r2, #0
 8005a66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005a6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3718      	adds	r7, #24
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}

08005a74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b084      	sub	sp, #16
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
 8005a7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d101      	bne.n	8005a90 <HAL_TIM_ConfigClockSource+0x1c>
 8005a8c:	2302      	movs	r3, #2
 8005a8e:	e0b4      	b.n	8005bfa <HAL_TIM_ConfigClockSource+0x186>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2201      	movs	r2, #1
 8005a94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2202      	movs	r2, #2
 8005a9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005aae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005ab6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	68ba      	ldr	r2, [r7, #8]
 8005abe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ac8:	d03e      	beq.n	8005b48 <HAL_TIM_ConfigClockSource+0xd4>
 8005aca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ace:	f200 8087 	bhi.w	8005be0 <HAL_TIM_ConfigClockSource+0x16c>
 8005ad2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ad6:	f000 8086 	beq.w	8005be6 <HAL_TIM_ConfigClockSource+0x172>
 8005ada:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ade:	d87f      	bhi.n	8005be0 <HAL_TIM_ConfigClockSource+0x16c>
 8005ae0:	2b70      	cmp	r3, #112	@ 0x70
 8005ae2:	d01a      	beq.n	8005b1a <HAL_TIM_ConfigClockSource+0xa6>
 8005ae4:	2b70      	cmp	r3, #112	@ 0x70
 8005ae6:	d87b      	bhi.n	8005be0 <HAL_TIM_ConfigClockSource+0x16c>
 8005ae8:	2b60      	cmp	r3, #96	@ 0x60
 8005aea:	d050      	beq.n	8005b8e <HAL_TIM_ConfigClockSource+0x11a>
 8005aec:	2b60      	cmp	r3, #96	@ 0x60
 8005aee:	d877      	bhi.n	8005be0 <HAL_TIM_ConfigClockSource+0x16c>
 8005af0:	2b50      	cmp	r3, #80	@ 0x50
 8005af2:	d03c      	beq.n	8005b6e <HAL_TIM_ConfigClockSource+0xfa>
 8005af4:	2b50      	cmp	r3, #80	@ 0x50
 8005af6:	d873      	bhi.n	8005be0 <HAL_TIM_ConfigClockSource+0x16c>
 8005af8:	2b40      	cmp	r3, #64	@ 0x40
 8005afa:	d058      	beq.n	8005bae <HAL_TIM_ConfigClockSource+0x13a>
 8005afc:	2b40      	cmp	r3, #64	@ 0x40
 8005afe:	d86f      	bhi.n	8005be0 <HAL_TIM_ConfigClockSource+0x16c>
 8005b00:	2b30      	cmp	r3, #48	@ 0x30
 8005b02:	d064      	beq.n	8005bce <HAL_TIM_ConfigClockSource+0x15a>
 8005b04:	2b30      	cmp	r3, #48	@ 0x30
 8005b06:	d86b      	bhi.n	8005be0 <HAL_TIM_ConfigClockSource+0x16c>
 8005b08:	2b20      	cmp	r3, #32
 8005b0a:	d060      	beq.n	8005bce <HAL_TIM_ConfigClockSource+0x15a>
 8005b0c:	2b20      	cmp	r3, #32
 8005b0e:	d867      	bhi.n	8005be0 <HAL_TIM_ConfigClockSource+0x16c>
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d05c      	beq.n	8005bce <HAL_TIM_ConfigClockSource+0x15a>
 8005b14:	2b10      	cmp	r3, #16
 8005b16:	d05a      	beq.n	8005bce <HAL_TIM_ConfigClockSource+0x15a>
 8005b18:	e062      	b.n	8005be0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b2a:	f000 fb41 	bl	80061b0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005b3c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	68ba      	ldr	r2, [r7, #8]
 8005b44:	609a      	str	r2, [r3, #8]
      break;
 8005b46:	e04f      	b.n	8005be8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b58:	f000 fb2a 	bl	80061b0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	689a      	ldr	r2, [r3, #8]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005b6a:	609a      	str	r2, [r3, #8]
      break;
 8005b6c:	e03c      	b.n	8005be8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b7a:	461a      	mov	r2, r3
 8005b7c:	f000 fa9e 	bl	80060bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	2150      	movs	r1, #80	@ 0x50
 8005b86:	4618      	mov	r0, r3
 8005b88:	f000 faf7 	bl	800617a <TIM_ITRx_SetConfig>
      break;
 8005b8c:	e02c      	b.n	8005be8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b9a:	461a      	mov	r2, r3
 8005b9c:	f000 fabd 	bl	800611a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	2160      	movs	r1, #96	@ 0x60
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f000 fae7 	bl	800617a <TIM_ITRx_SetConfig>
      break;
 8005bac:	e01c      	b.n	8005be8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bba:	461a      	mov	r2, r3
 8005bbc:	f000 fa7e 	bl	80060bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	2140      	movs	r1, #64	@ 0x40
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f000 fad7 	bl	800617a <TIM_ITRx_SetConfig>
      break;
 8005bcc:	e00c      	b.n	8005be8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4619      	mov	r1, r3
 8005bd8:	4610      	mov	r0, r2
 8005bda:	f000 face 	bl	800617a <TIM_ITRx_SetConfig>
      break;
 8005bde:	e003      	b.n	8005be8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005be0:	2301      	movs	r3, #1
 8005be2:	73fb      	strb	r3, [r7, #15]
      break;
 8005be4:	e000      	b.n	8005be8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005be6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2201      	movs	r2, #1
 8005bec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3710      	adds	r7, #16
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}
	...

08005c04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b085      	sub	sp, #20
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	4a46      	ldr	r2, [pc, #280]	@ (8005d30 <TIM_Base_SetConfig+0x12c>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d013      	beq.n	8005c44 <TIM_Base_SetConfig+0x40>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c22:	d00f      	beq.n	8005c44 <TIM_Base_SetConfig+0x40>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	4a43      	ldr	r2, [pc, #268]	@ (8005d34 <TIM_Base_SetConfig+0x130>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d00b      	beq.n	8005c44 <TIM_Base_SetConfig+0x40>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	4a42      	ldr	r2, [pc, #264]	@ (8005d38 <TIM_Base_SetConfig+0x134>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d007      	beq.n	8005c44 <TIM_Base_SetConfig+0x40>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	4a41      	ldr	r2, [pc, #260]	@ (8005d3c <TIM_Base_SetConfig+0x138>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d003      	beq.n	8005c44 <TIM_Base_SetConfig+0x40>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	4a40      	ldr	r2, [pc, #256]	@ (8005d40 <TIM_Base_SetConfig+0x13c>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d108      	bne.n	8005c56 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	68fa      	ldr	r2, [r7, #12]
 8005c52:	4313      	orrs	r3, r2
 8005c54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	4a35      	ldr	r2, [pc, #212]	@ (8005d30 <TIM_Base_SetConfig+0x12c>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d02b      	beq.n	8005cb6 <TIM_Base_SetConfig+0xb2>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c64:	d027      	beq.n	8005cb6 <TIM_Base_SetConfig+0xb2>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	4a32      	ldr	r2, [pc, #200]	@ (8005d34 <TIM_Base_SetConfig+0x130>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d023      	beq.n	8005cb6 <TIM_Base_SetConfig+0xb2>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	4a31      	ldr	r2, [pc, #196]	@ (8005d38 <TIM_Base_SetConfig+0x134>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d01f      	beq.n	8005cb6 <TIM_Base_SetConfig+0xb2>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	4a30      	ldr	r2, [pc, #192]	@ (8005d3c <TIM_Base_SetConfig+0x138>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d01b      	beq.n	8005cb6 <TIM_Base_SetConfig+0xb2>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	4a2f      	ldr	r2, [pc, #188]	@ (8005d40 <TIM_Base_SetConfig+0x13c>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d017      	beq.n	8005cb6 <TIM_Base_SetConfig+0xb2>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	4a2e      	ldr	r2, [pc, #184]	@ (8005d44 <TIM_Base_SetConfig+0x140>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d013      	beq.n	8005cb6 <TIM_Base_SetConfig+0xb2>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	4a2d      	ldr	r2, [pc, #180]	@ (8005d48 <TIM_Base_SetConfig+0x144>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d00f      	beq.n	8005cb6 <TIM_Base_SetConfig+0xb2>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	4a2c      	ldr	r2, [pc, #176]	@ (8005d4c <TIM_Base_SetConfig+0x148>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d00b      	beq.n	8005cb6 <TIM_Base_SetConfig+0xb2>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	4a2b      	ldr	r2, [pc, #172]	@ (8005d50 <TIM_Base_SetConfig+0x14c>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d007      	beq.n	8005cb6 <TIM_Base_SetConfig+0xb2>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	4a2a      	ldr	r2, [pc, #168]	@ (8005d54 <TIM_Base_SetConfig+0x150>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d003      	beq.n	8005cb6 <TIM_Base_SetConfig+0xb2>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4a29      	ldr	r2, [pc, #164]	@ (8005d58 <TIM_Base_SetConfig+0x154>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d108      	bne.n	8005cc8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	68fa      	ldr	r2, [r7, #12]
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	695b      	ldr	r3, [r3, #20]
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	68fa      	ldr	r2, [r7, #12]
 8005cda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	689a      	ldr	r2, [r3, #8]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	4a10      	ldr	r2, [pc, #64]	@ (8005d30 <TIM_Base_SetConfig+0x12c>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d003      	beq.n	8005cfc <TIM_Base_SetConfig+0xf8>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	4a12      	ldr	r2, [pc, #72]	@ (8005d40 <TIM_Base_SetConfig+0x13c>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d103      	bne.n	8005d04 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	691a      	ldr	r2, [r3, #16]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2201      	movs	r2, #1
 8005d08:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	691b      	ldr	r3, [r3, #16]
 8005d0e:	f003 0301 	and.w	r3, r3, #1
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d105      	bne.n	8005d22 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	691b      	ldr	r3, [r3, #16]
 8005d1a:	f023 0201 	bic.w	r2, r3, #1
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	611a      	str	r2, [r3, #16]
  }
}
 8005d22:	bf00      	nop
 8005d24:	3714      	adds	r7, #20
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr
 8005d2e:	bf00      	nop
 8005d30:	40010000 	.word	0x40010000
 8005d34:	40000400 	.word	0x40000400
 8005d38:	40000800 	.word	0x40000800
 8005d3c:	40000c00 	.word	0x40000c00
 8005d40:	40010400 	.word	0x40010400
 8005d44:	40014000 	.word	0x40014000
 8005d48:	40014400 	.word	0x40014400
 8005d4c:	40014800 	.word	0x40014800
 8005d50:	40001800 	.word	0x40001800
 8005d54:	40001c00 	.word	0x40001c00
 8005d58:	40002000 	.word	0x40002000

08005d5c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b087      	sub	sp, #28
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
 8005d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6a1b      	ldr	r3, [r3, #32]
 8005d6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6a1b      	ldr	r3, [r3, #32]
 8005d70:	f023 0201 	bic.w	r2, r3, #1
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	699b      	ldr	r3, [r3, #24]
 8005d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f023 0303 	bic.w	r3, r3, #3
 8005d92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	68fa      	ldr	r2, [r7, #12]
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	f023 0302 	bic.w	r3, r3, #2
 8005da4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	697a      	ldr	r2, [r7, #20]
 8005dac:	4313      	orrs	r3, r2
 8005dae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	4a20      	ldr	r2, [pc, #128]	@ (8005e34 <TIM_OC1_SetConfig+0xd8>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d003      	beq.n	8005dc0 <TIM_OC1_SetConfig+0x64>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	4a1f      	ldr	r2, [pc, #124]	@ (8005e38 <TIM_OC1_SetConfig+0xdc>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d10c      	bne.n	8005dda <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	f023 0308 	bic.w	r3, r3, #8
 8005dc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	68db      	ldr	r3, [r3, #12]
 8005dcc:	697a      	ldr	r2, [r7, #20]
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	f023 0304 	bic.w	r3, r3, #4
 8005dd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	4a15      	ldr	r2, [pc, #84]	@ (8005e34 <TIM_OC1_SetConfig+0xd8>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d003      	beq.n	8005dea <TIM_OC1_SetConfig+0x8e>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	4a14      	ldr	r2, [pc, #80]	@ (8005e38 <TIM_OC1_SetConfig+0xdc>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d111      	bne.n	8005e0e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005df0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005df8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	695b      	ldr	r3, [r3, #20]
 8005dfe:	693a      	ldr	r2, [r7, #16]
 8005e00:	4313      	orrs	r3, r2
 8005e02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	699b      	ldr	r3, [r3, #24]
 8005e08:	693a      	ldr	r2, [r7, #16]
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	693a      	ldr	r2, [r7, #16]
 8005e12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	68fa      	ldr	r2, [r7, #12]
 8005e18:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	685a      	ldr	r2, [r3, #4]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	697a      	ldr	r2, [r7, #20]
 8005e26:	621a      	str	r2, [r3, #32]
}
 8005e28:	bf00      	nop
 8005e2a:	371c      	adds	r7, #28
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr
 8005e34:	40010000 	.word	0x40010000
 8005e38:	40010400 	.word	0x40010400

08005e3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b087      	sub	sp, #28
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6a1b      	ldr	r3, [r3, #32]
 8005e4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6a1b      	ldr	r3, [r3, #32]
 8005e50:	f023 0210 	bic.w	r2, r3, #16
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	699b      	ldr	r3, [r3, #24]
 8005e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	021b      	lsls	r3, r3, #8
 8005e7a:	68fa      	ldr	r2, [r7, #12]
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	f023 0320 	bic.w	r3, r3, #32
 8005e86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	011b      	lsls	r3, r3, #4
 8005e8e:	697a      	ldr	r2, [r7, #20]
 8005e90:	4313      	orrs	r3, r2
 8005e92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	4a22      	ldr	r2, [pc, #136]	@ (8005f20 <TIM_OC2_SetConfig+0xe4>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d003      	beq.n	8005ea4 <TIM_OC2_SetConfig+0x68>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	4a21      	ldr	r2, [pc, #132]	@ (8005f24 <TIM_OC2_SetConfig+0xe8>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d10d      	bne.n	8005ec0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005eaa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	011b      	lsls	r3, r3, #4
 8005eb2:	697a      	ldr	r2, [r7, #20]
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ebe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	4a17      	ldr	r2, [pc, #92]	@ (8005f20 <TIM_OC2_SetConfig+0xe4>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d003      	beq.n	8005ed0 <TIM_OC2_SetConfig+0x94>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	4a16      	ldr	r2, [pc, #88]	@ (8005f24 <TIM_OC2_SetConfig+0xe8>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d113      	bne.n	8005ef8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005ed6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005ede:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	695b      	ldr	r3, [r3, #20]
 8005ee4:	009b      	lsls	r3, r3, #2
 8005ee6:	693a      	ldr	r2, [r7, #16]
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	699b      	ldr	r3, [r3, #24]
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	693a      	ldr	r2, [r7, #16]
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	693a      	ldr	r2, [r7, #16]
 8005efc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	68fa      	ldr	r2, [r7, #12]
 8005f02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	685a      	ldr	r2, [r3, #4]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	697a      	ldr	r2, [r7, #20]
 8005f10:	621a      	str	r2, [r3, #32]
}
 8005f12:	bf00      	nop
 8005f14:	371c      	adds	r7, #28
 8005f16:	46bd      	mov	sp, r7
 8005f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1c:	4770      	bx	lr
 8005f1e:	bf00      	nop
 8005f20:	40010000 	.word	0x40010000
 8005f24:	40010400 	.word	0x40010400

08005f28 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b087      	sub	sp, #28
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6a1b      	ldr	r3, [r3, #32]
 8005f36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6a1b      	ldr	r3, [r3, #32]
 8005f3c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	69db      	ldr	r3, [r3, #28]
 8005f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f023 0303 	bic.w	r3, r3, #3
 8005f5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	68fa      	ldr	r2, [r7, #12]
 8005f66:	4313      	orrs	r3, r2
 8005f68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005f70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	021b      	lsls	r3, r3, #8
 8005f78:	697a      	ldr	r2, [r7, #20]
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	4a21      	ldr	r2, [pc, #132]	@ (8006008 <TIM_OC3_SetConfig+0xe0>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d003      	beq.n	8005f8e <TIM_OC3_SetConfig+0x66>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	4a20      	ldr	r2, [pc, #128]	@ (800600c <TIM_OC3_SetConfig+0xe4>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d10d      	bne.n	8005faa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005f94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	68db      	ldr	r3, [r3, #12]
 8005f9a:	021b      	lsls	r3, r3, #8
 8005f9c:	697a      	ldr	r2, [r7, #20]
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005fa8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	4a16      	ldr	r2, [pc, #88]	@ (8006008 <TIM_OC3_SetConfig+0xe0>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d003      	beq.n	8005fba <TIM_OC3_SetConfig+0x92>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	4a15      	ldr	r2, [pc, #84]	@ (800600c <TIM_OC3_SetConfig+0xe4>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d113      	bne.n	8005fe2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005fc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005fc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	695b      	ldr	r3, [r3, #20]
 8005fce:	011b      	lsls	r3, r3, #4
 8005fd0:	693a      	ldr	r2, [r7, #16]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	699b      	ldr	r3, [r3, #24]
 8005fda:	011b      	lsls	r3, r3, #4
 8005fdc:	693a      	ldr	r2, [r7, #16]
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	693a      	ldr	r2, [r7, #16]
 8005fe6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	68fa      	ldr	r2, [r7, #12]
 8005fec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	685a      	ldr	r2, [r3, #4]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	697a      	ldr	r2, [r7, #20]
 8005ffa:	621a      	str	r2, [r3, #32]
}
 8005ffc:	bf00      	nop
 8005ffe:	371c      	adds	r7, #28
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr
 8006008:	40010000 	.word	0x40010000
 800600c:	40010400 	.word	0x40010400

08006010 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006010:	b480      	push	{r7}
 8006012:	b087      	sub	sp, #28
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6a1b      	ldr	r3, [r3, #32]
 800601e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6a1b      	ldr	r3, [r3, #32]
 8006024:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	69db      	ldr	r3, [r3, #28]
 8006036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800603e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006046:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	021b      	lsls	r3, r3, #8
 800604e:	68fa      	ldr	r2, [r7, #12]
 8006050:	4313      	orrs	r3, r2
 8006052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800605a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	031b      	lsls	r3, r3, #12
 8006062:	693a      	ldr	r2, [r7, #16]
 8006064:	4313      	orrs	r3, r2
 8006066:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	4a12      	ldr	r2, [pc, #72]	@ (80060b4 <TIM_OC4_SetConfig+0xa4>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d003      	beq.n	8006078 <TIM_OC4_SetConfig+0x68>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	4a11      	ldr	r2, [pc, #68]	@ (80060b8 <TIM_OC4_SetConfig+0xa8>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d109      	bne.n	800608c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800607e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	695b      	ldr	r3, [r3, #20]
 8006084:	019b      	lsls	r3, r3, #6
 8006086:	697a      	ldr	r2, [r7, #20]
 8006088:	4313      	orrs	r3, r2
 800608a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	697a      	ldr	r2, [r7, #20]
 8006090:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	68fa      	ldr	r2, [r7, #12]
 8006096:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	685a      	ldr	r2, [r3, #4]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	693a      	ldr	r2, [r7, #16]
 80060a4:	621a      	str	r2, [r3, #32]
}
 80060a6:	bf00      	nop
 80060a8:	371c      	adds	r7, #28
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr
 80060b2:	bf00      	nop
 80060b4:	40010000 	.word	0x40010000
 80060b8:	40010400 	.word	0x40010400

080060bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060bc:	b480      	push	{r7}
 80060be:	b087      	sub	sp, #28
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	60f8      	str	r0, [r7, #12]
 80060c4:	60b9      	str	r1, [r7, #8]
 80060c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6a1b      	ldr	r3, [r3, #32]
 80060cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	6a1b      	ldr	r3, [r3, #32]
 80060d2:	f023 0201 	bic.w	r2, r3, #1
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	699b      	ldr	r3, [r3, #24]
 80060de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80060e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	011b      	lsls	r3, r3, #4
 80060ec:	693a      	ldr	r2, [r7, #16]
 80060ee:	4313      	orrs	r3, r2
 80060f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	f023 030a 	bic.w	r3, r3, #10
 80060f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80060fa:	697a      	ldr	r2, [r7, #20]
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	4313      	orrs	r3, r2
 8006100:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	693a      	ldr	r2, [r7, #16]
 8006106:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	697a      	ldr	r2, [r7, #20]
 800610c:	621a      	str	r2, [r3, #32]
}
 800610e:	bf00      	nop
 8006110:	371c      	adds	r7, #28
 8006112:	46bd      	mov	sp, r7
 8006114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006118:	4770      	bx	lr

0800611a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800611a:	b480      	push	{r7}
 800611c:	b087      	sub	sp, #28
 800611e:	af00      	add	r7, sp, #0
 8006120:	60f8      	str	r0, [r7, #12]
 8006122:	60b9      	str	r1, [r7, #8]
 8006124:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	6a1b      	ldr	r3, [r3, #32]
 800612a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	6a1b      	ldr	r3, [r3, #32]
 8006130:	f023 0210 	bic.w	r2, r3, #16
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	699b      	ldr	r3, [r3, #24]
 800613c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006144:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	031b      	lsls	r3, r3, #12
 800614a:	693a      	ldr	r2, [r7, #16]
 800614c:	4313      	orrs	r3, r2
 800614e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006156:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	011b      	lsls	r3, r3, #4
 800615c:	697a      	ldr	r2, [r7, #20]
 800615e:	4313      	orrs	r3, r2
 8006160:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	693a      	ldr	r2, [r7, #16]
 8006166:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	697a      	ldr	r2, [r7, #20]
 800616c:	621a      	str	r2, [r3, #32]
}
 800616e:	bf00      	nop
 8006170:	371c      	adds	r7, #28
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr

0800617a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800617a:	b480      	push	{r7}
 800617c:	b085      	sub	sp, #20
 800617e:	af00      	add	r7, sp, #0
 8006180:	6078      	str	r0, [r7, #4]
 8006182:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006190:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006192:	683a      	ldr	r2, [r7, #0]
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	4313      	orrs	r3, r2
 8006198:	f043 0307 	orr.w	r3, r3, #7
 800619c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	68fa      	ldr	r2, [r7, #12]
 80061a2:	609a      	str	r2, [r3, #8]
}
 80061a4:	bf00      	nop
 80061a6:	3714      	adds	r7, #20
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr

080061b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b087      	sub	sp, #28
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	60f8      	str	r0, [r7, #12]
 80061b8:	60b9      	str	r1, [r7, #8]
 80061ba:	607a      	str	r2, [r7, #4]
 80061bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80061ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	021a      	lsls	r2, r3, #8
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	431a      	orrs	r2, r3
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	4313      	orrs	r3, r2
 80061d8:	697a      	ldr	r2, [r7, #20]
 80061da:	4313      	orrs	r3, r2
 80061dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	697a      	ldr	r2, [r7, #20]
 80061e2:	609a      	str	r2, [r3, #8]
}
 80061e4:	bf00      	nop
 80061e6:	371c      	adds	r7, #28
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr

080061f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b087      	sub	sp, #28
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	60f8      	str	r0, [r7, #12]
 80061f8:	60b9      	str	r1, [r7, #8]
 80061fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	f003 031f 	and.w	r3, r3, #31
 8006202:	2201      	movs	r2, #1
 8006204:	fa02 f303 	lsl.w	r3, r2, r3
 8006208:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	6a1a      	ldr	r2, [r3, #32]
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	43db      	mvns	r3, r3
 8006212:	401a      	ands	r2, r3
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	6a1a      	ldr	r2, [r3, #32]
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	f003 031f 	and.w	r3, r3, #31
 8006222:	6879      	ldr	r1, [r7, #4]
 8006224:	fa01 f303 	lsl.w	r3, r1, r3
 8006228:	431a      	orrs	r2, r3
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	621a      	str	r2, [r3, #32]
}
 800622e:	bf00      	nop
 8006230:	371c      	adds	r7, #28
 8006232:	46bd      	mov	sp, r7
 8006234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006238:	4770      	bx	lr
	...

0800623c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800623c:	b480      	push	{r7}
 800623e:	b085      	sub	sp, #20
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800624c:	2b01      	cmp	r3, #1
 800624e:	d101      	bne.n	8006254 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006250:	2302      	movs	r3, #2
 8006252:	e05a      	b.n	800630a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2201      	movs	r2, #1
 8006258:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2202      	movs	r2, #2
 8006260:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	689b      	ldr	r3, [r3, #8]
 8006272:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800627a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	68fa      	ldr	r2, [r7, #12]
 8006282:	4313      	orrs	r3, r2
 8006284:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	68fa      	ldr	r2, [r7, #12]
 800628c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a21      	ldr	r2, [pc, #132]	@ (8006318 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d022      	beq.n	80062de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062a0:	d01d      	beq.n	80062de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a1d      	ldr	r2, [pc, #116]	@ (800631c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d018      	beq.n	80062de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a1b      	ldr	r2, [pc, #108]	@ (8006320 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d013      	beq.n	80062de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a1a      	ldr	r2, [pc, #104]	@ (8006324 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d00e      	beq.n	80062de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a18      	ldr	r2, [pc, #96]	@ (8006328 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d009      	beq.n	80062de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a17      	ldr	r2, [pc, #92]	@ (800632c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d004      	beq.n	80062de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a15      	ldr	r2, [pc, #84]	@ (8006330 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d10c      	bne.n	80062f8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80062e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	68ba      	ldr	r2, [r7, #8]
 80062ec:	4313      	orrs	r3, r2
 80062ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	68ba      	ldr	r2, [r7, #8]
 80062f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2201      	movs	r2, #1
 80062fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2200      	movs	r2, #0
 8006304:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006308:	2300      	movs	r3, #0
}
 800630a:	4618      	mov	r0, r3
 800630c:	3714      	adds	r7, #20
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr
 8006316:	bf00      	nop
 8006318:	40010000 	.word	0x40010000
 800631c:	40000400 	.word	0x40000400
 8006320:	40000800 	.word	0x40000800
 8006324:	40000c00 	.word	0x40000c00
 8006328:	40010400 	.word	0x40010400
 800632c:	40014000 	.word	0x40014000
 8006330:	40001800 	.word	0x40001800

08006334 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b082      	sub	sp, #8
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d101      	bne.n	8006346 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	e042      	b.n	80063cc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800634c:	b2db      	uxtb	r3, r3
 800634e:	2b00      	cmp	r3, #0
 8006350:	d106      	bne.n	8006360 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2200      	movs	r2, #0
 8006356:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f7fc ffe8 	bl	8003330 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2224      	movs	r2, #36	@ 0x24
 8006364:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	68da      	ldr	r2, [r3, #12]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006376:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f000 f973 	bl	8006664 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	691a      	ldr	r2, [r3, #16]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800638c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	695a      	ldr	r2, [r3, #20]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800639c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	68da      	ldr	r2, [r3, #12]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80063ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2200      	movs	r2, #0
 80063b2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2220      	movs	r2, #32
 80063b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2220      	movs	r2, #32
 80063c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80063ca:	2300      	movs	r3, #0
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3708      	adds	r7, #8
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}

080063d4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b08a      	sub	sp, #40	@ 0x28
 80063d8:	af02      	add	r7, sp, #8
 80063da:	60f8      	str	r0, [r7, #12]
 80063dc:	60b9      	str	r1, [r7, #8]
 80063de:	603b      	str	r3, [r7, #0]
 80063e0:	4613      	mov	r3, r2
 80063e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80063e4:	2300      	movs	r3, #0
 80063e6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063ee:	b2db      	uxtb	r3, r3
 80063f0:	2b20      	cmp	r3, #32
 80063f2:	d175      	bne.n	80064e0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d002      	beq.n	8006400 <HAL_UART_Transmit+0x2c>
 80063fa:	88fb      	ldrh	r3, [r7, #6]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d101      	bne.n	8006404 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006400:	2301      	movs	r3, #1
 8006402:	e06e      	b.n	80064e2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2200      	movs	r2, #0
 8006408:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2221      	movs	r2, #33	@ 0x21
 800640e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006412:	f7fd f96d 	bl	80036f0 <HAL_GetTick>
 8006416:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	88fa      	ldrh	r2, [r7, #6]
 800641c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	88fa      	ldrh	r2, [r7, #6]
 8006422:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800642c:	d108      	bne.n	8006440 <HAL_UART_Transmit+0x6c>
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	691b      	ldr	r3, [r3, #16]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d104      	bne.n	8006440 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006436:	2300      	movs	r3, #0
 8006438:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	61bb      	str	r3, [r7, #24]
 800643e:	e003      	b.n	8006448 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006444:	2300      	movs	r3, #0
 8006446:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006448:	e02e      	b.n	80064a8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	9300      	str	r3, [sp, #0]
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	2200      	movs	r2, #0
 8006452:	2180      	movs	r1, #128	@ 0x80
 8006454:	68f8      	ldr	r0, [r7, #12]
 8006456:	f000 f848 	bl	80064ea <UART_WaitOnFlagUntilTimeout>
 800645a:	4603      	mov	r3, r0
 800645c:	2b00      	cmp	r3, #0
 800645e:	d005      	beq.n	800646c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2220      	movs	r2, #32
 8006464:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006468:	2303      	movs	r3, #3
 800646a:	e03a      	b.n	80064e2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800646c:	69fb      	ldr	r3, [r7, #28]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d10b      	bne.n	800648a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006472:	69bb      	ldr	r3, [r7, #24]
 8006474:	881b      	ldrh	r3, [r3, #0]
 8006476:	461a      	mov	r2, r3
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006480:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006482:	69bb      	ldr	r3, [r7, #24]
 8006484:	3302      	adds	r3, #2
 8006486:	61bb      	str	r3, [r7, #24]
 8006488:	e007      	b.n	800649a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800648a:	69fb      	ldr	r3, [r7, #28]
 800648c:	781a      	ldrb	r2, [r3, #0]
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006494:	69fb      	ldr	r3, [r7, #28]
 8006496:	3301      	adds	r3, #1
 8006498:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800649e:	b29b      	uxth	r3, r3
 80064a0:	3b01      	subs	r3, #1
 80064a2:	b29a      	uxth	r2, r3
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d1cb      	bne.n	800644a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	9300      	str	r3, [sp, #0]
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	2200      	movs	r2, #0
 80064ba:	2140      	movs	r1, #64	@ 0x40
 80064bc:	68f8      	ldr	r0, [r7, #12]
 80064be:	f000 f814 	bl	80064ea <UART_WaitOnFlagUntilTimeout>
 80064c2:	4603      	mov	r3, r0
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d005      	beq.n	80064d4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2220      	movs	r2, #32
 80064cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80064d0:	2303      	movs	r3, #3
 80064d2:	e006      	b.n	80064e2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2220      	movs	r2, #32
 80064d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80064dc:	2300      	movs	r3, #0
 80064de:	e000      	b.n	80064e2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80064e0:	2302      	movs	r3, #2
  }
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3720      	adds	r7, #32
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}

080064ea <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80064ea:	b580      	push	{r7, lr}
 80064ec:	b086      	sub	sp, #24
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	60f8      	str	r0, [r7, #12]
 80064f2:	60b9      	str	r1, [r7, #8]
 80064f4:	603b      	str	r3, [r7, #0]
 80064f6:	4613      	mov	r3, r2
 80064f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064fa:	e03b      	b.n	8006574 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064fc:	6a3b      	ldr	r3, [r7, #32]
 80064fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006502:	d037      	beq.n	8006574 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006504:	f7fd f8f4 	bl	80036f0 <HAL_GetTick>
 8006508:	4602      	mov	r2, r0
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	1ad3      	subs	r3, r2, r3
 800650e:	6a3a      	ldr	r2, [r7, #32]
 8006510:	429a      	cmp	r2, r3
 8006512:	d302      	bcc.n	800651a <UART_WaitOnFlagUntilTimeout+0x30>
 8006514:	6a3b      	ldr	r3, [r7, #32]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d101      	bne.n	800651e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800651a:	2303      	movs	r3, #3
 800651c:	e03a      	b.n	8006594 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	68db      	ldr	r3, [r3, #12]
 8006524:	f003 0304 	and.w	r3, r3, #4
 8006528:	2b00      	cmp	r3, #0
 800652a:	d023      	beq.n	8006574 <UART_WaitOnFlagUntilTimeout+0x8a>
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	2b80      	cmp	r3, #128	@ 0x80
 8006530:	d020      	beq.n	8006574 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	2b40      	cmp	r3, #64	@ 0x40
 8006536:	d01d      	beq.n	8006574 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f003 0308 	and.w	r3, r3, #8
 8006542:	2b08      	cmp	r3, #8
 8006544:	d116      	bne.n	8006574 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006546:	2300      	movs	r3, #0
 8006548:	617b      	str	r3, [r7, #20]
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	617b      	str	r3, [r7, #20]
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	617b      	str	r3, [r7, #20]
 800655a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800655c:	68f8      	ldr	r0, [r7, #12]
 800655e:	f000 f81d 	bl	800659c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2208      	movs	r2, #8
 8006566:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2200      	movs	r2, #0
 800656c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006570:	2301      	movs	r3, #1
 8006572:	e00f      	b.n	8006594 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	681a      	ldr	r2, [r3, #0]
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	4013      	ands	r3, r2
 800657e:	68ba      	ldr	r2, [r7, #8]
 8006580:	429a      	cmp	r2, r3
 8006582:	bf0c      	ite	eq
 8006584:	2301      	moveq	r3, #1
 8006586:	2300      	movne	r3, #0
 8006588:	b2db      	uxtb	r3, r3
 800658a:	461a      	mov	r2, r3
 800658c:	79fb      	ldrb	r3, [r7, #7]
 800658e:	429a      	cmp	r2, r3
 8006590:	d0b4      	beq.n	80064fc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006592:	2300      	movs	r3, #0
}
 8006594:	4618      	mov	r0, r3
 8006596:	3718      	adds	r7, #24
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}

0800659c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800659c:	b480      	push	{r7}
 800659e:	b095      	sub	sp, #84	@ 0x54
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	330c      	adds	r3, #12
 80065aa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065ae:	e853 3f00 	ldrex	r3, [r3]
 80065b2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80065b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065b6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80065ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	330c      	adds	r3, #12
 80065c2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80065c4:	643a      	str	r2, [r7, #64]	@ 0x40
 80065c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80065ca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80065cc:	e841 2300 	strex	r3, r2, [r1]
 80065d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80065d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d1e5      	bne.n	80065a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	3314      	adds	r3, #20
 80065de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e0:	6a3b      	ldr	r3, [r7, #32]
 80065e2:	e853 3f00 	ldrex	r3, [r3]
 80065e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80065e8:	69fb      	ldr	r3, [r7, #28]
 80065ea:	f023 0301 	bic.w	r3, r3, #1
 80065ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	3314      	adds	r3, #20
 80065f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80065f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80065fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80065fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006600:	e841 2300 	strex	r3, r2, [r1]
 8006604:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006608:	2b00      	cmp	r3, #0
 800660a:	d1e5      	bne.n	80065d8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006610:	2b01      	cmp	r3, #1
 8006612:	d119      	bne.n	8006648 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	330c      	adds	r3, #12
 800661a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	e853 3f00 	ldrex	r3, [r3]
 8006622:	60bb      	str	r3, [r7, #8]
   return(result);
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	f023 0310 	bic.w	r3, r3, #16
 800662a:	647b      	str	r3, [r7, #68]	@ 0x44
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	330c      	adds	r3, #12
 8006632:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006634:	61ba      	str	r2, [r7, #24]
 8006636:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006638:	6979      	ldr	r1, [r7, #20]
 800663a:	69ba      	ldr	r2, [r7, #24]
 800663c:	e841 2300 	strex	r3, r2, [r1]
 8006640:	613b      	str	r3, [r7, #16]
   return(result);
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d1e5      	bne.n	8006614 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2220      	movs	r2, #32
 800664c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2200      	movs	r2, #0
 8006654:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006656:	bf00      	nop
 8006658:	3754      	adds	r7, #84	@ 0x54
 800665a:	46bd      	mov	sp, r7
 800665c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006660:	4770      	bx	lr
	...

08006664 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006664:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006668:	b0c0      	sub	sp, #256	@ 0x100
 800666a:	af00      	add	r7, sp, #0
 800666c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	691b      	ldr	r3, [r3, #16]
 8006678:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800667c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006680:	68d9      	ldr	r1, [r3, #12]
 8006682:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006686:	681a      	ldr	r2, [r3, #0]
 8006688:	ea40 0301 	orr.w	r3, r0, r1
 800668c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800668e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006692:	689a      	ldr	r2, [r3, #8]
 8006694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006698:	691b      	ldr	r3, [r3, #16]
 800669a:	431a      	orrs	r2, r3
 800669c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066a0:	695b      	ldr	r3, [r3, #20]
 80066a2:	431a      	orrs	r2, r3
 80066a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066a8:	69db      	ldr	r3, [r3, #28]
 80066aa:	4313      	orrs	r3, r2
 80066ac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80066b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	68db      	ldr	r3, [r3, #12]
 80066b8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80066bc:	f021 010c 	bic.w	r1, r1, #12
 80066c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066c4:	681a      	ldr	r2, [r3, #0]
 80066c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80066ca:	430b      	orrs	r3, r1
 80066cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80066ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	695b      	ldr	r3, [r3, #20]
 80066d6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80066da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066de:	6999      	ldr	r1, [r3, #24]
 80066e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066e4:	681a      	ldr	r2, [r3, #0]
 80066e6:	ea40 0301 	orr.w	r3, r0, r1
 80066ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80066ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066f0:	681a      	ldr	r2, [r3, #0]
 80066f2:	4b8f      	ldr	r3, [pc, #572]	@ (8006930 <UART_SetConfig+0x2cc>)
 80066f4:	429a      	cmp	r2, r3
 80066f6:	d005      	beq.n	8006704 <UART_SetConfig+0xa0>
 80066f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	4b8d      	ldr	r3, [pc, #564]	@ (8006934 <UART_SetConfig+0x2d0>)
 8006700:	429a      	cmp	r2, r3
 8006702:	d104      	bne.n	800670e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006704:	f7fe fc14 	bl	8004f30 <HAL_RCC_GetPCLK2Freq>
 8006708:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800670c:	e003      	b.n	8006716 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800670e:	f7fe fbfb 	bl	8004f08 <HAL_RCC_GetPCLK1Freq>
 8006712:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006716:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800671a:	69db      	ldr	r3, [r3, #28]
 800671c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006720:	f040 810c 	bne.w	800693c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006724:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006728:	2200      	movs	r2, #0
 800672a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800672e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006732:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006736:	4622      	mov	r2, r4
 8006738:	462b      	mov	r3, r5
 800673a:	1891      	adds	r1, r2, r2
 800673c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800673e:	415b      	adcs	r3, r3
 8006740:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006742:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006746:	4621      	mov	r1, r4
 8006748:	eb12 0801 	adds.w	r8, r2, r1
 800674c:	4629      	mov	r1, r5
 800674e:	eb43 0901 	adc.w	r9, r3, r1
 8006752:	f04f 0200 	mov.w	r2, #0
 8006756:	f04f 0300 	mov.w	r3, #0
 800675a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800675e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006762:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006766:	4690      	mov	r8, r2
 8006768:	4699      	mov	r9, r3
 800676a:	4623      	mov	r3, r4
 800676c:	eb18 0303 	adds.w	r3, r8, r3
 8006770:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006774:	462b      	mov	r3, r5
 8006776:	eb49 0303 	adc.w	r3, r9, r3
 800677a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800677e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	2200      	movs	r2, #0
 8006786:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800678a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800678e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006792:	460b      	mov	r3, r1
 8006794:	18db      	adds	r3, r3, r3
 8006796:	653b      	str	r3, [r7, #80]	@ 0x50
 8006798:	4613      	mov	r3, r2
 800679a:	eb42 0303 	adc.w	r3, r2, r3
 800679e:	657b      	str	r3, [r7, #84]	@ 0x54
 80067a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80067a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80067a8:	f7f9 fd72 	bl	8000290 <__aeabi_uldivmod>
 80067ac:	4602      	mov	r2, r0
 80067ae:	460b      	mov	r3, r1
 80067b0:	4b61      	ldr	r3, [pc, #388]	@ (8006938 <UART_SetConfig+0x2d4>)
 80067b2:	fba3 2302 	umull	r2, r3, r3, r2
 80067b6:	095b      	lsrs	r3, r3, #5
 80067b8:	011c      	lsls	r4, r3, #4
 80067ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80067be:	2200      	movs	r2, #0
 80067c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80067c4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80067c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80067cc:	4642      	mov	r2, r8
 80067ce:	464b      	mov	r3, r9
 80067d0:	1891      	adds	r1, r2, r2
 80067d2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80067d4:	415b      	adcs	r3, r3
 80067d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80067d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80067dc:	4641      	mov	r1, r8
 80067de:	eb12 0a01 	adds.w	sl, r2, r1
 80067e2:	4649      	mov	r1, r9
 80067e4:	eb43 0b01 	adc.w	fp, r3, r1
 80067e8:	f04f 0200 	mov.w	r2, #0
 80067ec:	f04f 0300 	mov.w	r3, #0
 80067f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80067f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80067f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80067fc:	4692      	mov	sl, r2
 80067fe:	469b      	mov	fp, r3
 8006800:	4643      	mov	r3, r8
 8006802:	eb1a 0303 	adds.w	r3, sl, r3
 8006806:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800680a:	464b      	mov	r3, r9
 800680c:	eb4b 0303 	adc.w	r3, fp, r3
 8006810:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	2200      	movs	r2, #0
 800681c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006820:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006824:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006828:	460b      	mov	r3, r1
 800682a:	18db      	adds	r3, r3, r3
 800682c:	643b      	str	r3, [r7, #64]	@ 0x40
 800682e:	4613      	mov	r3, r2
 8006830:	eb42 0303 	adc.w	r3, r2, r3
 8006834:	647b      	str	r3, [r7, #68]	@ 0x44
 8006836:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800683a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800683e:	f7f9 fd27 	bl	8000290 <__aeabi_uldivmod>
 8006842:	4602      	mov	r2, r0
 8006844:	460b      	mov	r3, r1
 8006846:	4611      	mov	r1, r2
 8006848:	4b3b      	ldr	r3, [pc, #236]	@ (8006938 <UART_SetConfig+0x2d4>)
 800684a:	fba3 2301 	umull	r2, r3, r3, r1
 800684e:	095b      	lsrs	r3, r3, #5
 8006850:	2264      	movs	r2, #100	@ 0x64
 8006852:	fb02 f303 	mul.w	r3, r2, r3
 8006856:	1acb      	subs	r3, r1, r3
 8006858:	00db      	lsls	r3, r3, #3
 800685a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800685e:	4b36      	ldr	r3, [pc, #216]	@ (8006938 <UART_SetConfig+0x2d4>)
 8006860:	fba3 2302 	umull	r2, r3, r3, r2
 8006864:	095b      	lsrs	r3, r3, #5
 8006866:	005b      	lsls	r3, r3, #1
 8006868:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800686c:	441c      	add	r4, r3
 800686e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006872:	2200      	movs	r2, #0
 8006874:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006878:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800687c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006880:	4642      	mov	r2, r8
 8006882:	464b      	mov	r3, r9
 8006884:	1891      	adds	r1, r2, r2
 8006886:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006888:	415b      	adcs	r3, r3
 800688a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800688c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006890:	4641      	mov	r1, r8
 8006892:	1851      	adds	r1, r2, r1
 8006894:	6339      	str	r1, [r7, #48]	@ 0x30
 8006896:	4649      	mov	r1, r9
 8006898:	414b      	adcs	r3, r1
 800689a:	637b      	str	r3, [r7, #52]	@ 0x34
 800689c:	f04f 0200 	mov.w	r2, #0
 80068a0:	f04f 0300 	mov.w	r3, #0
 80068a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80068a8:	4659      	mov	r1, fp
 80068aa:	00cb      	lsls	r3, r1, #3
 80068ac:	4651      	mov	r1, sl
 80068ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80068b2:	4651      	mov	r1, sl
 80068b4:	00ca      	lsls	r2, r1, #3
 80068b6:	4610      	mov	r0, r2
 80068b8:	4619      	mov	r1, r3
 80068ba:	4603      	mov	r3, r0
 80068bc:	4642      	mov	r2, r8
 80068be:	189b      	adds	r3, r3, r2
 80068c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80068c4:	464b      	mov	r3, r9
 80068c6:	460a      	mov	r2, r1
 80068c8:	eb42 0303 	adc.w	r3, r2, r3
 80068cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80068d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	2200      	movs	r2, #0
 80068d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80068dc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80068e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80068e4:	460b      	mov	r3, r1
 80068e6:	18db      	adds	r3, r3, r3
 80068e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80068ea:	4613      	mov	r3, r2
 80068ec:	eb42 0303 	adc.w	r3, r2, r3
 80068f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80068f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80068f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80068fa:	f7f9 fcc9 	bl	8000290 <__aeabi_uldivmod>
 80068fe:	4602      	mov	r2, r0
 8006900:	460b      	mov	r3, r1
 8006902:	4b0d      	ldr	r3, [pc, #52]	@ (8006938 <UART_SetConfig+0x2d4>)
 8006904:	fba3 1302 	umull	r1, r3, r3, r2
 8006908:	095b      	lsrs	r3, r3, #5
 800690a:	2164      	movs	r1, #100	@ 0x64
 800690c:	fb01 f303 	mul.w	r3, r1, r3
 8006910:	1ad3      	subs	r3, r2, r3
 8006912:	00db      	lsls	r3, r3, #3
 8006914:	3332      	adds	r3, #50	@ 0x32
 8006916:	4a08      	ldr	r2, [pc, #32]	@ (8006938 <UART_SetConfig+0x2d4>)
 8006918:	fba2 2303 	umull	r2, r3, r2, r3
 800691c:	095b      	lsrs	r3, r3, #5
 800691e:	f003 0207 	and.w	r2, r3, #7
 8006922:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4422      	add	r2, r4
 800692a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800692c:	e106      	b.n	8006b3c <UART_SetConfig+0x4d8>
 800692e:	bf00      	nop
 8006930:	40011000 	.word	0x40011000
 8006934:	40011400 	.word	0x40011400
 8006938:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800693c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006940:	2200      	movs	r2, #0
 8006942:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006946:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800694a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800694e:	4642      	mov	r2, r8
 8006950:	464b      	mov	r3, r9
 8006952:	1891      	adds	r1, r2, r2
 8006954:	6239      	str	r1, [r7, #32]
 8006956:	415b      	adcs	r3, r3
 8006958:	627b      	str	r3, [r7, #36]	@ 0x24
 800695a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800695e:	4641      	mov	r1, r8
 8006960:	1854      	adds	r4, r2, r1
 8006962:	4649      	mov	r1, r9
 8006964:	eb43 0501 	adc.w	r5, r3, r1
 8006968:	f04f 0200 	mov.w	r2, #0
 800696c:	f04f 0300 	mov.w	r3, #0
 8006970:	00eb      	lsls	r3, r5, #3
 8006972:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006976:	00e2      	lsls	r2, r4, #3
 8006978:	4614      	mov	r4, r2
 800697a:	461d      	mov	r5, r3
 800697c:	4643      	mov	r3, r8
 800697e:	18e3      	adds	r3, r4, r3
 8006980:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006984:	464b      	mov	r3, r9
 8006986:	eb45 0303 	adc.w	r3, r5, r3
 800698a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800698e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800699a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800699e:	f04f 0200 	mov.w	r2, #0
 80069a2:	f04f 0300 	mov.w	r3, #0
 80069a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80069aa:	4629      	mov	r1, r5
 80069ac:	008b      	lsls	r3, r1, #2
 80069ae:	4621      	mov	r1, r4
 80069b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80069b4:	4621      	mov	r1, r4
 80069b6:	008a      	lsls	r2, r1, #2
 80069b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80069bc:	f7f9 fc68 	bl	8000290 <__aeabi_uldivmod>
 80069c0:	4602      	mov	r2, r0
 80069c2:	460b      	mov	r3, r1
 80069c4:	4b60      	ldr	r3, [pc, #384]	@ (8006b48 <UART_SetConfig+0x4e4>)
 80069c6:	fba3 2302 	umull	r2, r3, r3, r2
 80069ca:	095b      	lsrs	r3, r3, #5
 80069cc:	011c      	lsls	r4, r3, #4
 80069ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80069d2:	2200      	movs	r2, #0
 80069d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80069d8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80069dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80069e0:	4642      	mov	r2, r8
 80069e2:	464b      	mov	r3, r9
 80069e4:	1891      	adds	r1, r2, r2
 80069e6:	61b9      	str	r1, [r7, #24]
 80069e8:	415b      	adcs	r3, r3
 80069ea:	61fb      	str	r3, [r7, #28]
 80069ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80069f0:	4641      	mov	r1, r8
 80069f2:	1851      	adds	r1, r2, r1
 80069f4:	6139      	str	r1, [r7, #16]
 80069f6:	4649      	mov	r1, r9
 80069f8:	414b      	adcs	r3, r1
 80069fa:	617b      	str	r3, [r7, #20]
 80069fc:	f04f 0200 	mov.w	r2, #0
 8006a00:	f04f 0300 	mov.w	r3, #0
 8006a04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006a08:	4659      	mov	r1, fp
 8006a0a:	00cb      	lsls	r3, r1, #3
 8006a0c:	4651      	mov	r1, sl
 8006a0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a12:	4651      	mov	r1, sl
 8006a14:	00ca      	lsls	r2, r1, #3
 8006a16:	4610      	mov	r0, r2
 8006a18:	4619      	mov	r1, r3
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	4642      	mov	r2, r8
 8006a1e:	189b      	adds	r3, r3, r2
 8006a20:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006a24:	464b      	mov	r3, r9
 8006a26:	460a      	mov	r2, r1
 8006a28:	eb42 0303 	adc.w	r3, r2, r3
 8006a2c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	2200      	movs	r2, #0
 8006a38:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006a3a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006a3c:	f04f 0200 	mov.w	r2, #0
 8006a40:	f04f 0300 	mov.w	r3, #0
 8006a44:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006a48:	4649      	mov	r1, r9
 8006a4a:	008b      	lsls	r3, r1, #2
 8006a4c:	4641      	mov	r1, r8
 8006a4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a52:	4641      	mov	r1, r8
 8006a54:	008a      	lsls	r2, r1, #2
 8006a56:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006a5a:	f7f9 fc19 	bl	8000290 <__aeabi_uldivmod>
 8006a5e:	4602      	mov	r2, r0
 8006a60:	460b      	mov	r3, r1
 8006a62:	4611      	mov	r1, r2
 8006a64:	4b38      	ldr	r3, [pc, #224]	@ (8006b48 <UART_SetConfig+0x4e4>)
 8006a66:	fba3 2301 	umull	r2, r3, r3, r1
 8006a6a:	095b      	lsrs	r3, r3, #5
 8006a6c:	2264      	movs	r2, #100	@ 0x64
 8006a6e:	fb02 f303 	mul.w	r3, r2, r3
 8006a72:	1acb      	subs	r3, r1, r3
 8006a74:	011b      	lsls	r3, r3, #4
 8006a76:	3332      	adds	r3, #50	@ 0x32
 8006a78:	4a33      	ldr	r2, [pc, #204]	@ (8006b48 <UART_SetConfig+0x4e4>)
 8006a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8006a7e:	095b      	lsrs	r3, r3, #5
 8006a80:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006a84:	441c      	add	r4, r3
 8006a86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	673b      	str	r3, [r7, #112]	@ 0x70
 8006a8e:	677a      	str	r2, [r7, #116]	@ 0x74
 8006a90:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006a94:	4642      	mov	r2, r8
 8006a96:	464b      	mov	r3, r9
 8006a98:	1891      	adds	r1, r2, r2
 8006a9a:	60b9      	str	r1, [r7, #8]
 8006a9c:	415b      	adcs	r3, r3
 8006a9e:	60fb      	str	r3, [r7, #12]
 8006aa0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006aa4:	4641      	mov	r1, r8
 8006aa6:	1851      	adds	r1, r2, r1
 8006aa8:	6039      	str	r1, [r7, #0]
 8006aaa:	4649      	mov	r1, r9
 8006aac:	414b      	adcs	r3, r1
 8006aae:	607b      	str	r3, [r7, #4]
 8006ab0:	f04f 0200 	mov.w	r2, #0
 8006ab4:	f04f 0300 	mov.w	r3, #0
 8006ab8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006abc:	4659      	mov	r1, fp
 8006abe:	00cb      	lsls	r3, r1, #3
 8006ac0:	4651      	mov	r1, sl
 8006ac2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006ac6:	4651      	mov	r1, sl
 8006ac8:	00ca      	lsls	r2, r1, #3
 8006aca:	4610      	mov	r0, r2
 8006acc:	4619      	mov	r1, r3
 8006ace:	4603      	mov	r3, r0
 8006ad0:	4642      	mov	r2, r8
 8006ad2:	189b      	adds	r3, r3, r2
 8006ad4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006ad6:	464b      	mov	r3, r9
 8006ad8:	460a      	mov	r2, r1
 8006ada:	eb42 0303 	adc.w	r3, r2, r3
 8006ade:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	663b      	str	r3, [r7, #96]	@ 0x60
 8006aea:	667a      	str	r2, [r7, #100]	@ 0x64
 8006aec:	f04f 0200 	mov.w	r2, #0
 8006af0:	f04f 0300 	mov.w	r3, #0
 8006af4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006af8:	4649      	mov	r1, r9
 8006afa:	008b      	lsls	r3, r1, #2
 8006afc:	4641      	mov	r1, r8
 8006afe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b02:	4641      	mov	r1, r8
 8006b04:	008a      	lsls	r2, r1, #2
 8006b06:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006b0a:	f7f9 fbc1 	bl	8000290 <__aeabi_uldivmod>
 8006b0e:	4602      	mov	r2, r0
 8006b10:	460b      	mov	r3, r1
 8006b12:	4b0d      	ldr	r3, [pc, #52]	@ (8006b48 <UART_SetConfig+0x4e4>)
 8006b14:	fba3 1302 	umull	r1, r3, r3, r2
 8006b18:	095b      	lsrs	r3, r3, #5
 8006b1a:	2164      	movs	r1, #100	@ 0x64
 8006b1c:	fb01 f303 	mul.w	r3, r1, r3
 8006b20:	1ad3      	subs	r3, r2, r3
 8006b22:	011b      	lsls	r3, r3, #4
 8006b24:	3332      	adds	r3, #50	@ 0x32
 8006b26:	4a08      	ldr	r2, [pc, #32]	@ (8006b48 <UART_SetConfig+0x4e4>)
 8006b28:	fba2 2303 	umull	r2, r3, r2, r3
 8006b2c:	095b      	lsrs	r3, r3, #5
 8006b2e:	f003 020f 	and.w	r2, r3, #15
 8006b32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4422      	add	r2, r4
 8006b3a:	609a      	str	r2, [r3, #8]
}
 8006b3c:	bf00      	nop
 8006b3e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006b42:	46bd      	mov	sp, r7
 8006b44:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b48:	51eb851f 	.word	0x51eb851f

08006b4c <srand>:
 8006b4c:	b538      	push	{r3, r4, r5, lr}
 8006b4e:	4b10      	ldr	r3, [pc, #64]	@ (8006b90 <srand+0x44>)
 8006b50:	681d      	ldr	r5, [r3, #0]
 8006b52:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8006b54:	4604      	mov	r4, r0
 8006b56:	b9b3      	cbnz	r3, 8006b86 <srand+0x3a>
 8006b58:	2018      	movs	r0, #24
 8006b5a:	f000 fa75 	bl	8007048 <malloc>
 8006b5e:	4602      	mov	r2, r0
 8006b60:	6328      	str	r0, [r5, #48]	@ 0x30
 8006b62:	b920      	cbnz	r0, 8006b6e <srand+0x22>
 8006b64:	4b0b      	ldr	r3, [pc, #44]	@ (8006b94 <srand+0x48>)
 8006b66:	480c      	ldr	r0, [pc, #48]	@ (8006b98 <srand+0x4c>)
 8006b68:	2146      	movs	r1, #70	@ 0x46
 8006b6a:	f000 fa05 	bl	8006f78 <__assert_func>
 8006b6e:	490b      	ldr	r1, [pc, #44]	@ (8006b9c <srand+0x50>)
 8006b70:	4b0b      	ldr	r3, [pc, #44]	@ (8006ba0 <srand+0x54>)
 8006b72:	e9c0 1300 	strd	r1, r3, [r0]
 8006b76:	4b0b      	ldr	r3, [pc, #44]	@ (8006ba4 <srand+0x58>)
 8006b78:	6083      	str	r3, [r0, #8]
 8006b7a:	230b      	movs	r3, #11
 8006b7c:	8183      	strh	r3, [r0, #12]
 8006b7e:	2100      	movs	r1, #0
 8006b80:	2001      	movs	r0, #1
 8006b82:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8006b86:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8006b88:	2200      	movs	r2, #0
 8006b8a:	611c      	str	r4, [r3, #16]
 8006b8c:	615a      	str	r2, [r3, #20]
 8006b8e:	bd38      	pop	{r3, r4, r5, pc}
 8006b90:	20000080 	.word	0x20000080
 8006b94:	08008424 	.word	0x08008424
 8006b98:	0800843b 	.word	0x0800843b
 8006b9c:	abcd330e 	.word	0xabcd330e
 8006ba0:	e66d1234 	.word	0xe66d1234
 8006ba4:	0005deec 	.word	0x0005deec

08006ba8 <rand>:
 8006ba8:	4b16      	ldr	r3, [pc, #88]	@ (8006c04 <rand+0x5c>)
 8006baa:	b510      	push	{r4, lr}
 8006bac:	681c      	ldr	r4, [r3, #0]
 8006bae:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8006bb0:	b9b3      	cbnz	r3, 8006be0 <rand+0x38>
 8006bb2:	2018      	movs	r0, #24
 8006bb4:	f000 fa48 	bl	8007048 <malloc>
 8006bb8:	4602      	mov	r2, r0
 8006bba:	6320      	str	r0, [r4, #48]	@ 0x30
 8006bbc:	b920      	cbnz	r0, 8006bc8 <rand+0x20>
 8006bbe:	4b12      	ldr	r3, [pc, #72]	@ (8006c08 <rand+0x60>)
 8006bc0:	4812      	ldr	r0, [pc, #72]	@ (8006c0c <rand+0x64>)
 8006bc2:	2152      	movs	r1, #82	@ 0x52
 8006bc4:	f000 f9d8 	bl	8006f78 <__assert_func>
 8006bc8:	4911      	ldr	r1, [pc, #68]	@ (8006c10 <rand+0x68>)
 8006bca:	4b12      	ldr	r3, [pc, #72]	@ (8006c14 <rand+0x6c>)
 8006bcc:	e9c0 1300 	strd	r1, r3, [r0]
 8006bd0:	4b11      	ldr	r3, [pc, #68]	@ (8006c18 <rand+0x70>)
 8006bd2:	6083      	str	r3, [r0, #8]
 8006bd4:	230b      	movs	r3, #11
 8006bd6:	8183      	strh	r3, [r0, #12]
 8006bd8:	2100      	movs	r1, #0
 8006bda:	2001      	movs	r0, #1
 8006bdc:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8006be0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006be2:	480e      	ldr	r0, [pc, #56]	@ (8006c1c <rand+0x74>)
 8006be4:	690b      	ldr	r3, [r1, #16]
 8006be6:	694c      	ldr	r4, [r1, #20]
 8006be8:	4a0d      	ldr	r2, [pc, #52]	@ (8006c20 <rand+0x78>)
 8006bea:	4358      	muls	r0, r3
 8006bec:	fb02 0004 	mla	r0, r2, r4, r0
 8006bf0:	fba3 3202 	umull	r3, r2, r3, r2
 8006bf4:	3301      	adds	r3, #1
 8006bf6:	eb40 0002 	adc.w	r0, r0, r2
 8006bfa:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8006bfe:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8006c02:	bd10      	pop	{r4, pc}
 8006c04:	20000080 	.word	0x20000080
 8006c08:	08008424 	.word	0x08008424
 8006c0c:	0800843b 	.word	0x0800843b
 8006c10:	abcd330e 	.word	0xabcd330e
 8006c14:	e66d1234 	.word	0xe66d1234
 8006c18:	0005deec 	.word	0x0005deec
 8006c1c:	5851f42d 	.word	0x5851f42d
 8006c20:	4c957f2d 	.word	0x4c957f2d

08006c24 <std>:
 8006c24:	2300      	movs	r3, #0
 8006c26:	b510      	push	{r4, lr}
 8006c28:	4604      	mov	r4, r0
 8006c2a:	e9c0 3300 	strd	r3, r3, [r0]
 8006c2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006c32:	6083      	str	r3, [r0, #8]
 8006c34:	8181      	strh	r1, [r0, #12]
 8006c36:	6643      	str	r3, [r0, #100]	@ 0x64
 8006c38:	81c2      	strh	r2, [r0, #14]
 8006c3a:	6183      	str	r3, [r0, #24]
 8006c3c:	4619      	mov	r1, r3
 8006c3e:	2208      	movs	r2, #8
 8006c40:	305c      	adds	r0, #92	@ 0x5c
 8006c42:	f000 f914 	bl	8006e6e <memset>
 8006c46:	4b0d      	ldr	r3, [pc, #52]	@ (8006c7c <std+0x58>)
 8006c48:	6263      	str	r3, [r4, #36]	@ 0x24
 8006c4a:	4b0d      	ldr	r3, [pc, #52]	@ (8006c80 <std+0x5c>)
 8006c4c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8006c84 <std+0x60>)
 8006c50:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006c52:	4b0d      	ldr	r3, [pc, #52]	@ (8006c88 <std+0x64>)
 8006c54:	6323      	str	r3, [r4, #48]	@ 0x30
 8006c56:	4b0d      	ldr	r3, [pc, #52]	@ (8006c8c <std+0x68>)
 8006c58:	6224      	str	r4, [r4, #32]
 8006c5a:	429c      	cmp	r4, r3
 8006c5c:	d006      	beq.n	8006c6c <std+0x48>
 8006c5e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006c62:	4294      	cmp	r4, r2
 8006c64:	d002      	beq.n	8006c6c <std+0x48>
 8006c66:	33d0      	adds	r3, #208	@ 0xd0
 8006c68:	429c      	cmp	r4, r3
 8006c6a:	d105      	bne.n	8006c78 <std+0x54>
 8006c6c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006c70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c74:	f000 b974 	b.w	8006f60 <__retarget_lock_init_recursive>
 8006c78:	bd10      	pop	{r4, pc}
 8006c7a:	bf00      	nop
 8006c7c:	08006de9 	.word	0x08006de9
 8006c80:	08006e0b 	.word	0x08006e0b
 8006c84:	08006e43 	.word	0x08006e43
 8006c88:	08006e67 	.word	0x08006e67
 8006c8c:	200002b8 	.word	0x200002b8

08006c90 <stdio_exit_handler>:
 8006c90:	4a02      	ldr	r2, [pc, #8]	@ (8006c9c <stdio_exit_handler+0xc>)
 8006c92:	4903      	ldr	r1, [pc, #12]	@ (8006ca0 <stdio_exit_handler+0x10>)
 8006c94:	4803      	ldr	r0, [pc, #12]	@ (8006ca4 <stdio_exit_handler+0x14>)
 8006c96:	f000 b869 	b.w	8006d6c <_fwalk_sglue>
 8006c9a:	bf00      	nop
 8006c9c:	20000074 	.word	0x20000074
 8006ca0:	08007889 	.word	0x08007889
 8006ca4:	20000084 	.word	0x20000084

08006ca8 <cleanup_stdio>:
 8006ca8:	6841      	ldr	r1, [r0, #4]
 8006caa:	4b0c      	ldr	r3, [pc, #48]	@ (8006cdc <cleanup_stdio+0x34>)
 8006cac:	4299      	cmp	r1, r3
 8006cae:	b510      	push	{r4, lr}
 8006cb0:	4604      	mov	r4, r0
 8006cb2:	d001      	beq.n	8006cb8 <cleanup_stdio+0x10>
 8006cb4:	f000 fde8 	bl	8007888 <_fflush_r>
 8006cb8:	68a1      	ldr	r1, [r4, #8]
 8006cba:	4b09      	ldr	r3, [pc, #36]	@ (8006ce0 <cleanup_stdio+0x38>)
 8006cbc:	4299      	cmp	r1, r3
 8006cbe:	d002      	beq.n	8006cc6 <cleanup_stdio+0x1e>
 8006cc0:	4620      	mov	r0, r4
 8006cc2:	f000 fde1 	bl	8007888 <_fflush_r>
 8006cc6:	68e1      	ldr	r1, [r4, #12]
 8006cc8:	4b06      	ldr	r3, [pc, #24]	@ (8006ce4 <cleanup_stdio+0x3c>)
 8006cca:	4299      	cmp	r1, r3
 8006ccc:	d004      	beq.n	8006cd8 <cleanup_stdio+0x30>
 8006cce:	4620      	mov	r0, r4
 8006cd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cd4:	f000 bdd8 	b.w	8007888 <_fflush_r>
 8006cd8:	bd10      	pop	{r4, pc}
 8006cda:	bf00      	nop
 8006cdc:	200002b8 	.word	0x200002b8
 8006ce0:	20000320 	.word	0x20000320
 8006ce4:	20000388 	.word	0x20000388

08006ce8 <global_stdio_init.part.0>:
 8006ce8:	b510      	push	{r4, lr}
 8006cea:	4b0b      	ldr	r3, [pc, #44]	@ (8006d18 <global_stdio_init.part.0+0x30>)
 8006cec:	4c0b      	ldr	r4, [pc, #44]	@ (8006d1c <global_stdio_init.part.0+0x34>)
 8006cee:	4a0c      	ldr	r2, [pc, #48]	@ (8006d20 <global_stdio_init.part.0+0x38>)
 8006cf0:	601a      	str	r2, [r3, #0]
 8006cf2:	4620      	mov	r0, r4
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	2104      	movs	r1, #4
 8006cf8:	f7ff ff94 	bl	8006c24 <std>
 8006cfc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006d00:	2201      	movs	r2, #1
 8006d02:	2109      	movs	r1, #9
 8006d04:	f7ff ff8e 	bl	8006c24 <std>
 8006d08:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006d0c:	2202      	movs	r2, #2
 8006d0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d12:	2112      	movs	r1, #18
 8006d14:	f7ff bf86 	b.w	8006c24 <std>
 8006d18:	200003f0 	.word	0x200003f0
 8006d1c:	200002b8 	.word	0x200002b8
 8006d20:	08006c91 	.word	0x08006c91

08006d24 <__sfp_lock_acquire>:
 8006d24:	4801      	ldr	r0, [pc, #4]	@ (8006d2c <__sfp_lock_acquire+0x8>)
 8006d26:	f000 b91c 	b.w	8006f62 <__retarget_lock_acquire_recursive>
 8006d2a:	bf00      	nop
 8006d2c:	200003f9 	.word	0x200003f9

08006d30 <__sfp_lock_release>:
 8006d30:	4801      	ldr	r0, [pc, #4]	@ (8006d38 <__sfp_lock_release+0x8>)
 8006d32:	f000 b917 	b.w	8006f64 <__retarget_lock_release_recursive>
 8006d36:	bf00      	nop
 8006d38:	200003f9 	.word	0x200003f9

08006d3c <__sinit>:
 8006d3c:	b510      	push	{r4, lr}
 8006d3e:	4604      	mov	r4, r0
 8006d40:	f7ff fff0 	bl	8006d24 <__sfp_lock_acquire>
 8006d44:	6a23      	ldr	r3, [r4, #32]
 8006d46:	b11b      	cbz	r3, 8006d50 <__sinit+0x14>
 8006d48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d4c:	f7ff bff0 	b.w	8006d30 <__sfp_lock_release>
 8006d50:	4b04      	ldr	r3, [pc, #16]	@ (8006d64 <__sinit+0x28>)
 8006d52:	6223      	str	r3, [r4, #32]
 8006d54:	4b04      	ldr	r3, [pc, #16]	@ (8006d68 <__sinit+0x2c>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d1f5      	bne.n	8006d48 <__sinit+0xc>
 8006d5c:	f7ff ffc4 	bl	8006ce8 <global_stdio_init.part.0>
 8006d60:	e7f2      	b.n	8006d48 <__sinit+0xc>
 8006d62:	bf00      	nop
 8006d64:	08006ca9 	.word	0x08006ca9
 8006d68:	200003f0 	.word	0x200003f0

08006d6c <_fwalk_sglue>:
 8006d6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d70:	4607      	mov	r7, r0
 8006d72:	4688      	mov	r8, r1
 8006d74:	4614      	mov	r4, r2
 8006d76:	2600      	movs	r6, #0
 8006d78:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006d7c:	f1b9 0901 	subs.w	r9, r9, #1
 8006d80:	d505      	bpl.n	8006d8e <_fwalk_sglue+0x22>
 8006d82:	6824      	ldr	r4, [r4, #0]
 8006d84:	2c00      	cmp	r4, #0
 8006d86:	d1f7      	bne.n	8006d78 <_fwalk_sglue+0xc>
 8006d88:	4630      	mov	r0, r6
 8006d8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d8e:	89ab      	ldrh	r3, [r5, #12]
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	d907      	bls.n	8006da4 <_fwalk_sglue+0x38>
 8006d94:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006d98:	3301      	adds	r3, #1
 8006d9a:	d003      	beq.n	8006da4 <_fwalk_sglue+0x38>
 8006d9c:	4629      	mov	r1, r5
 8006d9e:	4638      	mov	r0, r7
 8006da0:	47c0      	blx	r8
 8006da2:	4306      	orrs	r6, r0
 8006da4:	3568      	adds	r5, #104	@ 0x68
 8006da6:	e7e9      	b.n	8006d7c <_fwalk_sglue+0x10>

08006da8 <siprintf>:
 8006da8:	b40e      	push	{r1, r2, r3}
 8006daa:	b500      	push	{lr}
 8006dac:	b09c      	sub	sp, #112	@ 0x70
 8006dae:	ab1d      	add	r3, sp, #116	@ 0x74
 8006db0:	9002      	str	r0, [sp, #8]
 8006db2:	9006      	str	r0, [sp, #24]
 8006db4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006db8:	4809      	ldr	r0, [pc, #36]	@ (8006de0 <siprintf+0x38>)
 8006dba:	9107      	str	r1, [sp, #28]
 8006dbc:	9104      	str	r1, [sp, #16]
 8006dbe:	4909      	ldr	r1, [pc, #36]	@ (8006de4 <siprintf+0x3c>)
 8006dc0:	f853 2b04 	ldr.w	r2, [r3], #4
 8006dc4:	9105      	str	r1, [sp, #20]
 8006dc6:	6800      	ldr	r0, [r0, #0]
 8006dc8:	9301      	str	r3, [sp, #4]
 8006dca:	a902      	add	r1, sp, #8
 8006dcc:	f000 fa4e 	bl	800726c <_svfiprintf_r>
 8006dd0:	9b02      	ldr	r3, [sp, #8]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	701a      	strb	r2, [r3, #0]
 8006dd6:	b01c      	add	sp, #112	@ 0x70
 8006dd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ddc:	b003      	add	sp, #12
 8006dde:	4770      	bx	lr
 8006de0:	20000080 	.word	0x20000080
 8006de4:	ffff0208 	.word	0xffff0208

08006de8 <__sread>:
 8006de8:	b510      	push	{r4, lr}
 8006dea:	460c      	mov	r4, r1
 8006dec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006df0:	f000 f868 	bl	8006ec4 <_read_r>
 8006df4:	2800      	cmp	r0, #0
 8006df6:	bfab      	itete	ge
 8006df8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006dfa:	89a3      	ldrhlt	r3, [r4, #12]
 8006dfc:	181b      	addge	r3, r3, r0
 8006dfe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006e02:	bfac      	ite	ge
 8006e04:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006e06:	81a3      	strhlt	r3, [r4, #12]
 8006e08:	bd10      	pop	{r4, pc}

08006e0a <__swrite>:
 8006e0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e0e:	461f      	mov	r7, r3
 8006e10:	898b      	ldrh	r3, [r1, #12]
 8006e12:	05db      	lsls	r3, r3, #23
 8006e14:	4605      	mov	r5, r0
 8006e16:	460c      	mov	r4, r1
 8006e18:	4616      	mov	r6, r2
 8006e1a:	d505      	bpl.n	8006e28 <__swrite+0x1e>
 8006e1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e20:	2302      	movs	r3, #2
 8006e22:	2200      	movs	r2, #0
 8006e24:	f000 f83c 	bl	8006ea0 <_lseek_r>
 8006e28:	89a3      	ldrh	r3, [r4, #12]
 8006e2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e2e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006e32:	81a3      	strh	r3, [r4, #12]
 8006e34:	4632      	mov	r2, r6
 8006e36:	463b      	mov	r3, r7
 8006e38:	4628      	mov	r0, r5
 8006e3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e3e:	f000 b853 	b.w	8006ee8 <_write_r>

08006e42 <__sseek>:
 8006e42:	b510      	push	{r4, lr}
 8006e44:	460c      	mov	r4, r1
 8006e46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e4a:	f000 f829 	bl	8006ea0 <_lseek_r>
 8006e4e:	1c43      	adds	r3, r0, #1
 8006e50:	89a3      	ldrh	r3, [r4, #12]
 8006e52:	bf15      	itete	ne
 8006e54:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006e56:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006e5a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006e5e:	81a3      	strheq	r3, [r4, #12]
 8006e60:	bf18      	it	ne
 8006e62:	81a3      	strhne	r3, [r4, #12]
 8006e64:	bd10      	pop	{r4, pc}

08006e66 <__sclose>:
 8006e66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e6a:	f000 b809 	b.w	8006e80 <_close_r>

08006e6e <memset>:
 8006e6e:	4402      	add	r2, r0
 8006e70:	4603      	mov	r3, r0
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d100      	bne.n	8006e78 <memset+0xa>
 8006e76:	4770      	bx	lr
 8006e78:	f803 1b01 	strb.w	r1, [r3], #1
 8006e7c:	e7f9      	b.n	8006e72 <memset+0x4>
	...

08006e80 <_close_r>:
 8006e80:	b538      	push	{r3, r4, r5, lr}
 8006e82:	4d06      	ldr	r5, [pc, #24]	@ (8006e9c <_close_r+0x1c>)
 8006e84:	2300      	movs	r3, #0
 8006e86:	4604      	mov	r4, r0
 8006e88:	4608      	mov	r0, r1
 8006e8a:	602b      	str	r3, [r5, #0]
 8006e8c:	f7fc fb23 	bl	80034d6 <_close>
 8006e90:	1c43      	adds	r3, r0, #1
 8006e92:	d102      	bne.n	8006e9a <_close_r+0x1a>
 8006e94:	682b      	ldr	r3, [r5, #0]
 8006e96:	b103      	cbz	r3, 8006e9a <_close_r+0x1a>
 8006e98:	6023      	str	r3, [r4, #0]
 8006e9a:	bd38      	pop	{r3, r4, r5, pc}
 8006e9c:	200003f4 	.word	0x200003f4

08006ea0 <_lseek_r>:
 8006ea0:	b538      	push	{r3, r4, r5, lr}
 8006ea2:	4d07      	ldr	r5, [pc, #28]	@ (8006ec0 <_lseek_r+0x20>)
 8006ea4:	4604      	mov	r4, r0
 8006ea6:	4608      	mov	r0, r1
 8006ea8:	4611      	mov	r1, r2
 8006eaa:	2200      	movs	r2, #0
 8006eac:	602a      	str	r2, [r5, #0]
 8006eae:	461a      	mov	r2, r3
 8006eb0:	f7fc fb38 	bl	8003524 <_lseek>
 8006eb4:	1c43      	adds	r3, r0, #1
 8006eb6:	d102      	bne.n	8006ebe <_lseek_r+0x1e>
 8006eb8:	682b      	ldr	r3, [r5, #0]
 8006eba:	b103      	cbz	r3, 8006ebe <_lseek_r+0x1e>
 8006ebc:	6023      	str	r3, [r4, #0]
 8006ebe:	bd38      	pop	{r3, r4, r5, pc}
 8006ec0:	200003f4 	.word	0x200003f4

08006ec4 <_read_r>:
 8006ec4:	b538      	push	{r3, r4, r5, lr}
 8006ec6:	4d07      	ldr	r5, [pc, #28]	@ (8006ee4 <_read_r+0x20>)
 8006ec8:	4604      	mov	r4, r0
 8006eca:	4608      	mov	r0, r1
 8006ecc:	4611      	mov	r1, r2
 8006ece:	2200      	movs	r2, #0
 8006ed0:	602a      	str	r2, [r5, #0]
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	f7fc fac6 	bl	8003464 <_read>
 8006ed8:	1c43      	adds	r3, r0, #1
 8006eda:	d102      	bne.n	8006ee2 <_read_r+0x1e>
 8006edc:	682b      	ldr	r3, [r5, #0]
 8006ede:	b103      	cbz	r3, 8006ee2 <_read_r+0x1e>
 8006ee0:	6023      	str	r3, [r4, #0]
 8006ee2:	bd38      	pop	{r3, r4, r5, pc}
 8006ee4:	200003f4 	.word	0x200003f4

08006ee8 <_write_r>:
 8006ee8:	b538      	push	{r3, r4, r5, lr}
 8006eea:	4d07      	ldr	r5, [pc, #28]	@ (8006f08 <_write_r+0x20>)
 8006eec:	4604      	mov	r4, r0
 8006eee:	4608      	mov	r0, r1
 8006ef0:	4611      	mov	r1, r2
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	602a      	str	r2, [r5, #0]
 8006ef6:	461a      	mov	r2, r3
 8006ef8:	f7fc fad1 	bl	800349e <_write>
 8006efc:	1c43      	adds	r3, r0, #1
 8006efe:	d102      	bne.n	8006f06 <_write_r+0x1e>
 8006f00:	682b      	ldr	r3, [r5, #0]
 8006f02:	b103      	cbz	r3, 8006f06 <_write_r+0x1e>
 8006f04:	6023      	str	r3, [r4, #0]
 8006f06:	bd38      	pop	{r3, r4, r5, pc}
 8006f08:	200003f4 	.word	0x200003f4

08006f0c <__errno>:
 8006f0c:	4b01      	ldr	r3, [pc, #4]	@ (8006f14 <__errno+0x8>)
 8006f0e:	6818      	ldr	r0, [r3, #0]
 8006f10:	4770      	bx	lr
 8006f12:	bf00      	nop
 8006f14:	20000080 	.word	0x20000080

08006f18 <__libc_init_array>:
 8006f18:	b570      	push	{r4, r5, r6, lr}
 8006f1a:	4d0d      	ldr	r5, [pc, #52]	@ (8006f50 <__libc_init_array+0x38>)
 8006f1c:	4c0d      	ldr	r4, [pc, #52]	@ (8006f54 <__libc_init_array+0x3c>)
 8006f1e:	1b64      	subs	r4, r4, r5
 8006f20:	10a4      	asrs	r4, r4, #2
 8006f22:	2600      	movs	r6, #0
 8006f24:	42a6      	cmp	r6, r4
 8006f26:	d109      	bne.n	8006f3c <__libc_init_array+0x24>
 8006f28:	4d0b      	ldr	r5, [pc, #44]	@ (8006f58 <__libc_init_array+0x40>)
 8006f2a:	4c0c      	ldr	r4, [pc, #48]	@ (8006f5c <__libc_init_array+0x44>)
 8006f2c:	f000 fff8 	bl	8007f20 <_init>
 8006f30:	1b64      	subs	r4, r4, r5
 8006f32:	10a4      	asrs	r4, r4, #2
 8006f34:	2600      	movs	r6, #0
 8006f36:	42a6      	cmp	r6, r4
 8006f38:	d105      	bne.n	8006f46 <__libc_init_array+0x2e>
 8006f3a:	bd70      	pop	{r4, r5, r6, pc}
 8006f3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f40:	4798      	blx	r3
 8006f42:	3601      	adds	r6, #1
 8006f44:	e7ee      	b.n	8006f24 <__libc_init_array+0xc>
 8006f46:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f4a:	4798      	blx	r3
 8006f4c:	3601      	adds	r6, #1
 8006f4e:	e7f2      	b.n	8006f36 <__libc_init_array+0x1e>
 8006f50:	0800850c 	.word	0x0800850c
 8006f54:	0800850c 	.word	0x0800850c
 8006f58:	0800850c 	.word	0x0800850c
 8006f5c:	08008510 	.word	0x08008510

08006f60 <__retarget_lock_init_recursive>:
 8006f60:	4770      	bx	lr

08006f62 <__retarget_lock_acquire_recursive>:
 8006f62:	4770      	bx	lr

08006f64 <__retarget_lock_release_recursive>:
 8006f64:	4770      	bx	lr

08006f66 <strcpy>:
 8006f66:	4603      	mov	r3, r0
 8006f68:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f6c:	f803 2b01 	strb.w	r2, [r3], #1
 8006f70:	2a00      	cmp	r2, #0
 8006f72:	d1f9      	bne.n	8006f68 <strcpy+0x2>
 8006f74:	4770      	bx	lr
	...

08006f78 <__assert_func>:
 8006f78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006f7a:	4614      	mov	r4, r2
 8006f7c:	461a      	mov	r2, r3
 8006f7e:	4b09      	ldr	r3, [pc, #36]	@ (8006fa4 <__assert_func+0x2c>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4605      	mov	r5, r0
 8006f84:	68d8      	ldr	r0, [r3, #12]
 8006f86:	b954      	cbnz	r4, 8006f9e <__assert_func+0x26>
 8006f88:	4b07      	ldr	r3, [pc, #28]	@ (8006fa8 <__assert_func+0x30>)
 8006f8a:	461c      	mov	r4, r3
 8006f8c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006f90:	9100      	str	r1, [sp, #0]
 8006f92:	462b      	mov	r3, r5
 8006f94:	4905      	ldr	r1, [pc, #20]	@ (8006fac <__assert_func+0x34>)
 8006f96:	f000 fc9f 	bl	80078d8 <fiprintf>
 8006f9a:	f000 fce7 	bl	800796c <abort>
 8006f9e:	4b04      	ldr	r3, [pc, #16]	@ (8006fb0 <__assert_func+0x38>)
 8006fa0:	e7f4      	b.n	8006f8c <__assert_func+0x14>
 8006fa2:	bf00      	nop
 8006fa4:	20000080 	.word	0x20000080
 8006fa8:	080084ce 	.word	0x080084ce
 8006fac:	080084a0 	.word	0x080084a0
 8006fb0:	08008493 	.word	0x08008493

08006fb4 <_free_r>:
 8006fb4:	b538      	push	{r3, r4, r5, lr}
 8006fb6:	4605      	mov	r5, r0
 8006fb8:	2900      	cmp	r1, #0
 8006fba:	d041      	beq.n	8007040 <_free_r+0x8c>
 8006fbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006fc0:	1f0c      	subs	r4, r1, #4
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	bfb8      	it	lt
 8006fc6:	18e4      	addlt	r4, r4, r3
 8006fc8:	f000 f8e8 	bl	800719c <__malloc_lock>
 8006fcc:	4a1d      	ldr	r2, [pc, #116]	@ (8007044 <_free_r+0x90>)
 8006fce:	6813      	ldr	r3, [r2, #0]
 8006fd0:	b933      	cbnz	r3, 8006fe0 <_free_r+0x2c>
 8006fd2:	6063      	str	r3, [r4, #4]
 8006fd4:	6014      	str	r4, [r2, #0]
 8006fd6:	4628      	mov	r0, r5
 8006fd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006fdc:	f000 b8e4 	b.w	80071a8 <__malloc_unlock>
 8006fe0:	42a3      	cmp	r3, r4
 8006fe2:	d908      	bls.n	8006ff6 <_free_r+0x42>
 8006fe4:	6820      	ldr	r0, [r4, #0]
 8006fe6:	1821      	adds	r1, r4, r0
 8006fe8:	428b      	cmp	r3, r1
 8006fea:	bf01      	itttt	eq
 8006fec:	6819      	ldreq	r1, [r3, #0]
 8006fee:	685b      	ldreq	r3, [r3, #4]
 8006ff0:	1809      	addeq	r1, r1, r0
 8006ff2:	6021      	streq	r1, [r4, #0]
 8006ff4:	e7ed      	b.n	8006fd2 <_free_r+0x1e>
 8006ff6:	461a      	mov	r2, r3
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	b10b      	cbz	r3, 8007000 <_free_r+0x4c>
 8006ffc:	42a3      	cmp	r3, r4
 8006ffe:	d9fa      	bls.n	8006ff6 <_free_r+0x42>
 8007000:	6811      	ldr	r1, [r2, #0]
 8007002:	1850      	adds	r0, r2, r1
 8007004:	42a0      	cmp	r0, r4
 8007006:	d10b      	bne.n	8007020 <_free_r+0x6c>
 8007008:	6820      	ldr	r0, [r4, #0]
 800700a:	4401      	add	r1, r0
 800700c:	1850      	adds	r0, r2, r1
 800700e:	4283      	cmp	r3, r0
 8007010:	6011      	str	r1, [r2, #0]
 8007012:	d1e0      	bne.n	8006fd6 <_free_r+0x22>
 8007014:	6818      	ldr	r0, [r3, #0]
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	6053      	str	r3, [r2, #4]
 800701a:	4408      	add	r0, r1
 800701c:	6010      	str	r0, [r2, #0]
 800701e:	e7da      	b.n	8006fd6 <_free_r+0x22>
 8007020:	d902      	bls.n	8007028 <_free_r+0x74>
 8007022:	230c      	movs	r3, #12
 8007024:	602b      	str	r3, [r5, #0]
 8007026:	e7d6      	b.n	8006fd6 <_free_r+0x22>
 8007028:	6820      	ldr	r0, [r4, #0]
 800702a:	1821      	adds	r1, r4, r0
 800702c:	428b      	cmp	r3, r1
 800702e:	bf04      	itt	eq
 8007030:	6819      	ldreq	r1, [r3, #0]
 8007032:	685b      	ldreq	r3, [r3, #4]
 8007034:	6063      	str	r3, [r4, #4]
 8007036:	bf04      	itt	eq
 8007038:	1809      	addeq	r1, r1, r0
 800703a:	6021      	streq	r1, [r4, #0]
 800703c:	6054      	str	r4, [r2, #4]
 800703e:	e7ca      	b.n	8006fd6 <_free_r+0x22>
 8007040:	bd38      	pop	{r3, r4, r5, pc}
 8007042:	bf00      	nop
 8007044:	20000400 	.word	0x20000400

08007048 <malloc>:
 8007048:	4b02      	ldr	r3, [pc, #8]	@ (8007054 <malloc+0xc>)
 800704a:	4601      	mov	r1, r0
 800704c:	6818      	ldr	r0, [r3, #0]
 800704e:	f000 b825 	b.w	800709c <_malloc_r>
 8007052:	bf00      	nop
 8007054:	20000080 	.word	0x20000080

08007058 <sbrk_aligned>:
 8007058:	b570      	push	{r4, r5, r6, lr}
 800705a:	4e0f      	ldr	r6, [pc, #60]	@ (8007098 <sbrk_aligned+0x40>)
 800705c:	460c      	mov	r4, r1
 800705e:	6831      	ldr	r1, [r6, #0]
 8007060:	4605      	mov	r5, r0
 8007062:	b911      	cbnz	r1, 800706a <sbrk_aligned+0x12>
 8007064:	f000 fc64 	bl	8007930 <_sbrk_r>
 8007068:	6030      	str	r0, [r6, #0]
 800706a:	4621      	mov	r1, r4
 800706c:	4628      	mov	r0, r5
 800706e:	f000 fc5f 	bl	8007930 <_sbrk_r>
 8007072:	1c43      	adds	r3, r0, #1
 8007074:	d103      	bne.n	800707e <sbrk_aligned+0x26>
 8007076:	f04f 34ff 	mov.w	r4, #4294967295
 800707a:	4620      	mov	r0, r4
 800707c:	bd70      	pop	{r4, r5, r6, pc}
 800707e:	1cc4      	adds	r4, r0, #3
 8007080:	f024 0403 	bic.w	r4, r4, #3
 8007084:	42a0      	cmp	r0, r4
 8007086:	d0f8      	beq.n	800707a <sbrk_aligned+0x22>
 8007088:	1a21      	subs	r1, r4, r0
 800708a:	4628      	mov	r0, r5
 800708c:	f000 fc50 	bl	8007930 <_sbrk_r>
 8007090:	3001      	adds	r0, #1
 8007092:	d1f2      	bne.n	800707a <sbrk_aligned+0x22>
 8007094:	e7ef      	b.n	8007076 <sbrk_aligned+0x1e>
 8007096:	bf00      	nop
 8007098:	200003fc 	.word	0x200003fc

0800709c <_malloc_r>:
 800709c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070a0:	1ccd      	adds	r5, r1, #3
 80070a2:	f025 0503 	bic.w	r5, r5, #3
 80070a6:	3508      	adds	r5, #8
 80070a8:	2d0c      	cmp	r5, #12
 80070aa:	bf38      	it	cc
 80070ac:	250c      	movcc	r5, #12
 80070ae:	2d00      	cmp	r5, #0
 80070b0:	4606      	mov	r6, r0
 80070b2:	db01      	blt.n	80070b8 <_malloc_r+0x1c>
 80070b4:	42a9      	cmp	r1, r5
 80070b6:	d904      	bls.n	80070c2 <_malloc_r+0x26>
 80070b8:	230c      	movs	r3, #12
 80070ba:	6033      	str	r3, [r6, #0]
 80070bc:	2000      	movs	r0, #0
 80070be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070c2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007198 <_malloc_r+0xfc>
 80070c6:	f000 f869 	bl	800719c <__malloc_lock>
 80070ca:	f8d8 3000 	ldr.w	r3, [r8]
 80070ce:	461c      	mov	r4, r3
 80070d0:	bb44      	cbnz	r4, 8007124 <_malloc_r+0x88>
 80070d2:	4629      	mov	r1, r5
 80070d4:	4630      	mov	r0, r6
 80070d6:	f7ff ffbf 	bl	8007058 <sbrk_aligned>
 80070da:	1c43      	adds	r3, r0, #1
 80070dc:	4604      	mov	r4, r0
 80070de:	d158      	bne.n	8007192 <_malloc_r+0xf6>
 80070e0:	f8d8 4000 	ldr.w	r4, [r8]
 80070e4:	4627      	mov	r7, r4
 80070e6:	2f00      	cmp	r7, #0
 80070e8:	d143      	bne.n	8007172 <_malloc_r+0xd6>
 80070ea:	2c00      	cmp	r4, #0
 80070ec:	d04b      	beq.n	8007186 <_malloc_r+0xea>
 80070ee:	6823      	ldr	r3, [r4, #0]
 80070f0:	4639      	mov	r1, r7
 80070f2:	4630      	mov	r0, r6
 80070f4:	eb04 0903 	add.w	r9, r4, r3
 80070f8:	f000 fc1a 	bl	8007930 <_sbrk_r>
 80070fc:	4581      	cmp	r9, r0
 80070fe:	d142      	bne.n	8007186 <_malloc_r+0xea>
 8007100:	6821      	ldr	r1, [r4, #0]
 8007102:	1a6d      	subs	r5, r5, r1
 8007104:	4629      	mov	r1, r5
 8007106:	4630      	mov	r0, r6
 8007108:	f7ff ffa6 	bl	8007058 <sbrk_aligned>
 800710c:	3001      	adds	r0, #1
 800710e:	d03a      	beq.n	8007186 <_malloc_r+0xea>
 8007110:	6823      	ldr	r3, [r4, #0]
 8007112:	442b      	add	r3, r5
 8007114:	6023      	str	r3, [r4, #0]
 8007116:	f8d8 3000 	ldr.w	r3, [r8]
 800711a:	685a      	ldr	r2, [r3, #4]
 800711c:	bb62      	cbnz	r2, 8007178 <_malloc_r+0xdc>
 800711e:	f8c8 7000 	str.w	r7, [r8]
 8007122:	e00f      	b.n	8007144 <_malloc_r+0xa8>
 8007124:	6822      	ldr	r2, [r4, #0]
 8007126:	1b52      	subs	r2, r2, r5
 8007128:	d420      	bmi.n	800716c <_malloc_r+0xd0>
 800712a:	2a0b      	cmp	r2, #11
 800712c:	d917      	bls.n	800715e <_malloc_r+0xc2>
 800712e:	1961      	adds	r1, r4, r5
 8007130:	42a3      	cmp	r3, r4
 8007132:	6025      	str	r5, [r4, #0]
 8007134:	bf18      	it	ne
 8007136:	6059      	strne	r1, [r3, #4]
 8007138:	6863      	ldr	r3, [r4, #4]
 800713a:	bf08      	it	eq
 800713c:	f8c8 1000 	streq.w	r1, [r8]
 8007140:	5162      	str	r2, [r4, r5]
 8007142:	604b      	str	r3, [r1, #4]
 8007144:	4630      	mov	r0, r6
 8007146:	f000 f82f 	bl	80071a8 <__malloc_unlock>
 800714a:	f104 000b 	add.w	r0, r4, #11
 800714e:	1d23      	adds	r3, r4, #4
 8007150:	f020 0007 	bic.w	r0, r0, #7
 8007154:	1ac2      	subs	r2, r0, r3
 8007156:	bf1c      	itt	ne
 8007158:	1a1b      	subne	r3, r3, r0
 800715a:	50a3      	strne	r3, [r4, r2]
 800715c:	e7af      	b.n	80070be <_malloc_r+0x22>
 800715e:	6862      	ldr	r2, [r4, #4]
 8007160:	42a3      	cmp	r3, r4
 8007162:	bf0c      	ite	eq
 8007164:	f8c8 2000 	streq.w	r2, [r8]
 8007168:	605a      	strne	r2, [r3, #4]
 800716a:	e7eb      	b.n	8007144 <_malloc_r+0xa8>
 800716c:	4623      	mov	r3, r4
 800716e:	6864      	ldr	r4, [r4, #4]
 8007170:	e7ae      	b.n	80070d0 <_malloc_r+0x34>
 8007172:	463c      	mov	r4, r7
 8007174:	687f      	ldr	r7, [r7, #4]
 8007176:	e7b6      	b.n	80070e6 <_malloc_r+0x4a>
 8007178:	461a      	mov	r2, r3
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	42a3      	cmp	r3, r4
 800717e:	d1fb      	bne.n	8007178 <_malloc_r+0xdc>
 8007180:	2300      	movs	r3, #0
 8007182:	6053      	str	r3, [r2, #4]
 8007184:	e7de      	b.n	8007144 <_malloc_r+0xa8>
 8007186:	230c      	movs	r3, #12
 8007188:	6033      	str	r3, [r6, #0]
 800718a:	4630      	mov	r0, r6
 800718c:	f000 f80c 	bl	80071a8 <__malloc_unlock>
 8007190:	e794      	b.n	80070bc <_malloc_r+0x20>
 8007192:	6005      	str	r5, [r0, #0]
 8007194:	e7d6      	b.n	8007144 <_malloc_r+0xa8>
 8007196:	bf00      	nop
 8007198:	20000400 	.word	0x20000400

0800719c <__malloc_lock>:
 800719c:	4801      	ldr	r0, [pc, #4]	@ (80071a4 <__malloc_lock+0x8>)
 800719e:	f7ff bee0 	b.w	8006f62 <__retarget_lock_acquire_recursive>
 80071a2:	bf00      	nop
 80071a4:	200003f8 	.word	0x200003f8

080071a8 <__malloc_unlock>:
 80071a8:	4801      	ldr	r0, [pc, #4]	@ (80071b0 <__malloc_unlock+0x8>)
 80071aa:	f7ff bedb 	b.w	8006f64 <__retarget_lock_release_recursive>
 80071ae:	bf00      	nop
 80071b0:	200003f8 	.word	0x200003f8

080071b4 <__ssputs_r>:
 80071b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071b8:	688e      	ldr	r6, [r1, #8]
 80071ba:	461f      	mov	r7, r3
 80071bc:	42be      	cmp	r6, r7
 80071be:	680b      	ldr	r3, [r1, #0]
 80071c0:	4682      	mov	sl, r0
 80071c2:	460c      	mov	r4, r1
 80071c4:	4690      	mov	r8, r2
 80071c6:	d82d      	bhi.n	8007224 <__ssputs_r+0x70>
 80071c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80071cc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80071d0:	d026      	beq.n	8007220 <__ssputs_r+0x6c>
 80071d2:	6965      	ldr	r5, [r4, #20]
 80071d4:	6909      	ldr	r1, [r1, #16]
 80071d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80071da:	eba3 0901 	sub.w	r9, r3, r1
 80071de:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80071e2:	1c7b      	adds	r3, r7, #1
 80071e4:	444b      	add	r3, r9
 80071e6:	106d      	asrs	r5, r5, #1
 80071e8:	429d      	cmp	r5, r3
 80071ea:	bf38      	it	cc
 80071ec:	461d      	movcc	r5, r3
 80071ee:	0553      	lsls	r3, r2, #21
 80071f0:	d527      	bpl.n	8007242 <__ssputs_r+0x8e>
 80071f2:	4629      	mov	r1, r5
 80071f4:	f7ff ff52 	bl	800709c <_malloc_r>
 80071f8:	4606      	mov	r6, r0
 80071fa:	b360      	cbz	r0, 8007256 <__ssputs_r+0xa2>
 80071fc:	6921      	ldr	r1, [r4, #16]
 80071fe:	464a      	mov	r2, r9
 8007200:	f000 fba6 	bl	8007950 <memcpy>
 8007204:	89a3      	ldrh	r3, [r4, #12]
 8007206:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800720a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800720e:	81a3      	strh	r3, [r4, #12]
 8007210:	6126      	str	r6, [r4, #16]
 8007212:	6165      	str	r5, [r4, #20]
 8007214:	444e      	add	r6, r9
 8007216:	eba5 0509 	sub.w	r5, r5, r9
 800721a:	6026      	str	r6, [r4, #0]
 800721c:	60a5      	str	r5, [r4, #8]
 800721e:	463e      	mov	r6, r7
 8007220:	42be      	cmp	r6, r7
 8007222:	d900      	bls.n	8007226 <__ssputs_r+0x72>
 8007224:	463e      	mov	r6, r7
 8007226:	6820      	ldr	r0, [r4, #0]
 8007228:	4632      	mov	r2, r6
 800722a:	4641      	mov	r1, r8
 800722c:	f000 fb66 	bl	80078fc <memmove>
 8007230:	68a3      	ldr	r3, [r4, #8]
 8007232:	1b9b      	subs	r3, r3, r6
 8007234:	60a3      	str	r3, [r4, #8]
 8007236:	6823      	ldr	r3, [r4, #0]
 8007238:	4433      	add	r3, r6
 800723a:	6023      	str	r3, [r4, #0]
 800723c:	2000      	movs	r0, #0
 800723e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007242:	462a      	mov	r2, r5
 8007244:	f000 fb99 	bl	800797a <_realloc_r>
 8007248:	4606      	mov	r6, r0
 800724a:	2800      	cmp	r0, #0
 800724c:	d1e0      	bne.n	8007210 <__ssputs_r+0x5c>
 800724e:	6921      	ldr	r1, [r4, #16]
 8007250:	4650      	mov	r0, sl
 8007252:	f7ff feaf 	bl	8006fb4 <_free_r>
 8007256:	230c      	movs	r3, #12
 8007258:	f8ca 3000 	str.w	r3, [sl]
 800725c:	89a3      	ldrh	r3, [r4, #12]
 800725e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007262:	81a3      	strh	r3, [r4, #12]
 8007264:	f04f 30ff 	mov.w	r0, #4294967295
 8007268:	e7e9      	b.n	800723e <__ssputs_r+0x8a>
	...

0800726c <_svfiprintf_r>:
 800726c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007270:	4698      	mov	r8, r3
 8007272:	898b      	ldrh	r3, [r1, #12]
 8007274:	061b      	lsls	r3, r3, #24
 8007276:	b09d      	sub	sp, #116	@ 0x74
 8007278:	4607      	mov	r7, r0
 800727a:	460d      	mov	r5, r1
 800727c:	4614      	mov	r4, r2
 800727e:	d510      	bpl.n	80072a2 <_svfiprintf_r+0x36>
 8007280:	690b      	ldr	r3, [r1, #16]
 8007282:	b973      	cbnz	r3, 80072a2 <_svfiprintf_r+0x36>
 8007284:	2140      	movs	r1, #64	@ 0x40
 8007286:	f7ff ff09 	bl	800709c <_malloc_r>
 800728a:	6028      	str	r0, [r5, #0]
 800728c:	6128      	str	r0, [r5, #16]
 800728e:	b930      	cbnz	r0, 800729e <_svfiprintf_r+0x32>
 8007290:	230c      	movs	r3, #12
 8007292:	603b      	str	r3, [r7, #0]
 8007294:	f04f 30ff 	mov.w	r0, #4294967295
 8007298:	b01d      	add	sp, #116	@ 0x74
 800729a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800729e:	2340      	movs	r3, #64	@ 0x40
 80072a0:	616b      	str	r3, [r5, #20]
 80072a2:	2300      	movs	r3, #0
 80072a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80072a6:	2320      	movs	r3, #32
 80072a8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80072ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80072b0:	2330      	movs	r3, #48	@ 0x30
 80072b2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007450 <_svfiprintf_r+0x1e4>
 80072b6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80072ba:	f04f 0901 	mov.w	r9, #1
 80072be:	4623      	mov	r3, r4
 80072c0:	469a      	mov	sl, r3
 80072c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80072c6:	b10a      	cbz	r2, 80072cc <_svfiprintf_r+0x60>
 80072c8:	2a25      	cmp	r2, #37	@ 0x25
 80072ca:	d1f9      	bne.n	80072c0 <_svfiprintf_r+0x54>
 80072cc:	ebba 0b04 	subs.w	fp, sl, r4
 80072d0:	d00b      	beq.n	80072ea <_svfiprintf_r+0x7e>
 80072d2:	465b      	mov	r3, fp
 80072d4:	4622      	mov	r2, r4
 80072d6:	4629      	mov	r1, r5
 80072d8:	4638      	mov	r0, r7
 80072da:	f7ff ff6b 	bl	80071b4 <__ssputs_r>
 80072de:	3001      	adds	r0, #1
 80072e0:	f000 80a7 	beq.w	8007432 <_svfiprintf_r+0x1c6>
 80072e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80072e6:	445a      	add	r2, fp
 80072e8:	9209      	str	r2, [sp, #36]	@ 0x24
 80072ea:	f89a 3000 	ldrb.w	r3, [sl]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	f000 809f 	beq.w	8007432 <_svfiprintf_r+0x1c6>
 80072f4:	2300      	movs	r3, #0
 80072f6:	f04f 32ff 	mov.w	r2, #4294967295
 80072fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80072fe:	f10a 0a01 	add.w	sl, sl, #1
 8007302:	9304      	str	r3, [sp, #16]
 8007304:	9307      	str	r3, [sp, #28]
 8007306:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800730a:	931a      	str	r3, [sp, #104]	@ 0x68
 800730c:	4654      	mov	r4, sl
 800730e:	2205      	movs	r2, #5
 8007310:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007314:	484e      	ldr	r0, [pc, #312]	@ (8007450 <_svfiprintf_r+0x1e4>)
 8007316:	f7f8 ff6b 	bl	80001f0 <memchr>
 800731a:	9a04      	ldr	r2, [sp, #16]
 800731c:	b9d8      	cbnz	r0, 8007356 <_svfiprintf_r+0xea>
 800731e:	06d0      	lsls	r0, r2, #27
 8007320:	bf44      	itt	mi
 8007322:	2320      	movmi	r3, #32
 8007324:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007328:	0711      	lsls	r1, r2, #28
 800732a:	bf44      	itt	mi
 800732c:	232b      	movmi	r3, #43	@ 0x2b
 800732e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007332:	f89a 3000 	ldrb.w	r3, [sl]
 8007336:	2b2a      	cmp	r3, #42	@ 0x2a
 8007338:	d015      	beq.n	8007366 <_svfiprintf_r+0xfa>
 800733a:	9a07      	ldr	r2, [sp, #28]
 800733c:	4654      	mov	r4, sl
 800733e:	2000      	movs	r0, #0
 8007340:	f04f 0c0a 	mov.w	ip, #10
 8007344:	4621      	mov	r1, r4
 8007346:	f811 3b01 	ldrb.w	r3, [r1], #1
 800734a:	3b30      	subs	r3, #48	@ 0x30
 800734c:	2b09      	cmp	r3, #9
 800734e:	d94b      	bls.n	80073e8 <_svfiprintf_r+0x17c>
 8007350:	b1b0      	cbz	r0, 8007380 <_svfiprintf_r+0x114>
 8007352:	9207      	str	r2, [sp, #28]
 8007354:	e014      	b.n	8007380 <_svfiprintf_r+0x114>
 8007356:	eba0 0308 	sub.w	r3, r0, r8
 800735a:	fa09 f303 	lsl.w	r3, r9, r3
 800735e:	4313      	orrs	r3, r2
 8007360:	9304      	str	r3, [sp, #16]
 8007362:	46a2      	mov	sl, r4
 8007364:	e7d2      	b.n	800730c <_svfiprintf_r+0xa0>
 8007366:	9b03      	ldr	r3, [sp, #12]
 8007368:	1d19      	adds	r1, r3, #4
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	9103      	str	r1, [sp, #12]
 800736e:	2b00      	cmp	r3, #0
 8007370:	bfbb      	ittet	lt
 8007372:	425b      	neglt	r3, r3
 8007374:	f042 0202 	orrlt.w	r2, r2, #2
 8007378:	9307      	strge	r3, [sp, #28]
 800737a:	9307      	strlt	r3, [sp, #28]
 800737c:	bfb8      	it	lt
 800737e:	9204      	strlt	r2, [sp, #16]
 8007380:	7823      	ldrb	r3, [r4, #0]
 8007382:	2b2e      	cmp	r3, #46	@ 0x2e
 8007384:	d10a      	bne.n	800739c <_svfiprintf_r+0x130>
 8007386:	7863      	ldrb	r3, [r4, #1]
 8007388:	2b2a      	cmp	r3, #42	@ 0x2a
 800738a:	d132      	bne.n	80073f2 <_svfiprintf_r+0x186>
 800738c:	9b03      	ldr	r3, [sp, #12]
 800738e:	1d1a      	adds	r2, r3, #4
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	9203      	str	r2, [sp, #12]
 8007394:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007398:	3402      	adds	r4, #2
 800739a:	9305      	str	r3, [sp, #20]
 800739c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007460 <_svfiprintf_r+0x1f4>
 80073a0:	7821      	ldrb	r1, [r4, #0]
 80073a2:	2203      	movs	r2, #3
 80073a4:	4650      	mov	r0, sl
 80073a6:	f7f8 ff23 	bl	80001f0 <memchr>
 80073aa:	b138      	cbz	r0, 80073bc <_svfiprintf_r+0x150>
 80073ac:	9b04      	ldr	r3, [sp, #16]
 80073ae:	eba0 000a 	sub.w	r0, r0, sl
 80073b2:	2240      	movs	r2, #64	@ 0x40
 80073b4:	4082      	lsls	r2, r0
 80073b6:	4313      	orrs	r3, r2
 80073b8:	3401      	adds	r4, #1
 80073ba:	9304      	str	r3, [sp, #16]
 80073bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073c0:	4824      	ldr	r0, [pc, #144]	@ (8007454 <_svfiprintf_r+0x1e8>)
 80073c2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80073c6:	2206      	movs	r2, #6
 80073c8:	f7f8 ff12 	bl	80001f0 <memchr>
 80073cc:	2800      	cmp	r0, #0
 80073ce:	d036      	beq.n	800743e <_svfiprintf_r+0x1d2>
 80073d0:	4b21      	ldr	r3, [pc, #132]	@ (8007458 <_svfiprintf_r+0x1ec>)
 80073d2:	bb1b      	cbnz	r3, 800741c <_svfiprintf_r+0x1b0>
 80073d4:	9b03      	ldr	r3, [sp, #12]
 80073d6:	3307      	adds	r3, #7
 80073d8:	f023 0307 	bic.w	r3, r3, #7
 80073dc:	3308      	adds	r3, #8
 80073de:	9303      	str	r3, [sp, #12]
 80073e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073e2:	4433      	add	r3, r6
 80073e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80073e6:	e76a      	b.n	80072be <_svfiprintf_r+0x52>
 80073e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80073ec:	460c      	mov	r4, r1
 80073ee:	2001      	movs	r0, #1
 80073f0:	e7a8      	b.n	8007344 <_svfiprintf_r+0xd8>
 80073f2:	2300      	movs	r3, #0
 80073f4:	3401      	adds	r4, #1
 80073f6:	9305      	str	r3, [sp, #20]
 80073f8:	4619      	mov	r1, r3
 80073fa:	f04f 0c0a 	mov.w	ip, #10
 80073fe:	4620      	mov	r0, r4
 8007400:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007404:	3a30      	subs	r2, #48	@ 0x30
 8007406:	2a09      	cmp	r2, #9
 8007408:	d903      	bls.n	8007412 <_svfiprintf_r+0x1a6>
 800740a:	2b00      	cmp	r3, #0
 800740c:	d0c6      	beq.n	800739c <_svfiprintf_r+0x130>
 800740e:	9105      	str	r1, [sp, #20]
 8007410:	e7c4      	b.n	800739c <_svfiprintf_r+0x130>
 8007412:	fb0c 2101 	mla	r1, ip, r1, r2
 8007416:	4604      	mov	r4, r0
 8007418:	2301      	movs	r3, #1
 800741a:	e7f0      	b.n	80073fe <_svfiprintf_r+0x192>
 800741c:	ab03      	add	r3, sp, #12
 800741e:	9300      	str	r3, [sp, #0]
 8007420:	462a      	mov	r2, r5
 8007422:	4b0e      	ldr	r3, [pc, #56]	@ (800745c <_svfiprintf_r+0x1f0>)
 8007424:	a904      	add	r1, sp, #16
 8007426:	4638      	mov	r0, r7
 8007428:	f3af 8000 	nop.w
 800742c:	1c42      	adds	r2, r0, #1
 800742e:	4606      	mov	r6, r0
 8007430:	d1d6      	bne.n	80073e0 <_svfiprintf_r+0x174>
 8007432:	89ab      	ldrh	r3, [r5, #12]
 8007434:	065b      	lsls	r3, r3, #25
 8007436:	f53f af2d 	bmi.w	8007294 <_svfiprintf_r+0x28>
 800743a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800743c:	e72c      	b.n	8007298 <_svfiprintf_r+0x2c>
 800743e:	ab03      	add	r3, sp, #12
 8007440:	9300      	str	r3, [sp, #0]
 8007442:	462a      	mov	r2, r5
 8007444:	4b05      	ldr	r3, [pc, #20]	@ (800745c <_svfiprintf_r+0x1f0>)
 8007446:	a904      	add	r1, sp, #16
 8007448:	4638      	mov	r0, r7
 800744a:	f000 f879 	bl	8007540 <_printf_i>
 800744e:	e7ed      	b.n	800742c <_svfiprintf_r+0x1c0>
 8007450:	080084cf 	.word	0x080084cf
 8007454:	080084d9 	.word	0x080084d9
 8007458:	00000000 	.word	0x00000000
 800745c:	080071b5 	.word	0x080071b5
 8007460:	080084d5 	.word	0x080084d5

08007464 <_printf_common>:
 8007464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007468:	4616      	mov	r6, r2
 800746a:	4698      	mov	r8, r3
 800746c:	688a      	ldr	r2, [r1, #8]
 800746e:	690b      	ldr	r3, [r1, #16]
 8007470:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007474:	4293      	cmp	r3, r2
 8007476:	bfb8      	it	lt
 8007478:	4613      	movlt	r3, r2
 800747a:	6033      	str	r3, [r6, #0]
 800747c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007480:	4607      	mov	r7, r0
 8007482:	460c      	mov	r4, r1
 8007484:	b10a      	cbz	r2, 800748a <_printf_common+0x26>
 8007486:	3301      	adds	r3, #1
 8007488:	6033      	str	r3, [r6, #0]
 800748a:	6823      	ldr	r3, [r4, #0]
 800748c:	0699      	lsls	r1, r3, #26
 800748e:	bf42      	ittt	mi
 8007490:	6833      	ldrmi	r3, [r6, #0]
 8007492:	3302      	addmi	r3, #2
 8007494:	6033      	strmi	r3, [r6, #0]
 8007496:	6825      	ldr	r5, [r4, #0]
 8007498:	f015 0506 	ands.w	r5, r5, #6
 800749c:	d106      	bne.n	80074ac <_printf_common+0x48>
 800749e:	f104 0a19 	add.w	sl, r4, #25
 80074a2:	68e3      	ldr	r3, [r4, #12]
 80074a4:	6832      	ldr	r2, [r6, #0]
 80074a6:	1a9b      	subs	r3, r3, r2
 80074a8:	42ab      	cmp	r3, r5
 80074aa:	dc26      	bgt.n	80074fa <_printf_common+0x96>
 80074ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80074b0:	6822      	ldr	r2, [r4, #0]
 80074b2:	3b00      	subs	r3, #0
 80074b4:	bf18      	it	ne
 80074b6:	2301      	movne	r3, #1
 80074b8:	0692      	lsls	r2, r2, #26
 80074ba:	d42b      	bmi.n	8007514 <_printf_common+0xb0>
 80074bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80074c0:	4641      	mov	r1, r8
 80074c2:	4638      	mov	r0, r7
 80074c4:	47c8      	blx	r9
 80074c6:	3001      	adds	r0, #1
 80074c8:	d01e      	beq.n	8007508 <_printf_common+0xa4>
 80074ca:	6823      	ldr	r3, [r4, #0]
 80074cc:	6922      	ldr	r2, [r4, #16]
 80074ce:	f003 0306 	and.w	r3, r3, #6
 80074d2:	2b04      	cmp	r3, #4
 80074d4:	bf02      	ittt	eq
 80074d6:	68e5      	ldreq	r5, [r4, #12]
 80074d8:	6833      	ldreq	r3, [r6, #0]
 80074da:	1aed      	subeq	r5, r5, r3
 80074dc:	68a3      	ldr	r3, [r4, #8]
 80074de:	bf0c      	ite	eq
 80074e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80074e4:	2500      	movne	r5, #0
 80074e6:	4293      	cmp	r3, r2
 80074e8:	bfc4      	itt	gt
 80074ea:	1a9b      	subgt	r3, r3, r2
 80074ec:	18ed      	addgt	r5, r5, r3
 80074ee:	2600      	movs	r6, #0
 80074f0:	341a      	adds	r4, #26
 80074f2:	42b5      	cmp	r5, r6
 80074f4:	d11a      	bne.n	800752c <_printf_common+0xc8>
 80074f6:	2000      	movs	r0, #0
 80074f8:	e008      	b.n	800750c <_printf_common+0xa8>
 80074fa:	2301      	movs	r3, #1
 80074fc:	4652      	mov	r2, sl
 80074fe:	4641      	mov	r1, r8
 8007500:	4638      	mov	r0, r7
 8007502:	47c8      	blx	r9
 8007504:	3001      	adds	r0, #1
 8007506:	d103      	bne.n	8007510 <_printf_common+0xac>
 8007508:	f04f 30ff 	mov.w	r0, #4294967295
 800750c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007510:	3501      	adds	r5, #1
 8007512:	e7c6      	b.n	80074a2 <_printf_common+0x3e>
 8007514:	18e1      	adds	r1, r4, r3
 8007516:	1c5a      	adds	r2, r3, #1
 8007518:	2030      	movs	r0, #48	@ 0x30
 800751a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800751e:	4422      	add	r2, r4
 8007520:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007524:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007528:	3302      	adds	r3, #2
 800752a:	e7c7      	b.n	80074bc <_printf_common+0x58>
 800752c:	2301      	movs	r3, #1
 800752e:	4622      	mov	r2, r4
 8007530:	4641      	mov	r1, r8
 8007532:	4638      	mov	r0, r7
 8007534:	47c8      	blx	r9
 8007536:	3001      	adds	r0, #1
 8007538:	d0e6      	beq.n	8007508 <_printf_common+0xa4>
 800753a:	3601      	adds	r6, #1
 800753c:	e7d9      	b.n	80074f2 <_printf_common+0x8e>
	...

08007540 <_printf_i>:
 8007540:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007544:	7e0f      	ldrb	r7, [r1, #24]
 8007546:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007548:	2f78      	cmp	r7, #120	@ 0x78
 800754a:	4691      	mov	r9, r2
 800754c:	4680      	mov	r8, r0
 800754e:	460c      	mov	r4, r1
 8007550:	469a      	mov	sl, r3
 8007552:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007556:	d807      	bhi.n	8007568 <_printf_i+0x28>
 8007558:	2f62      	cmp	r7, #98	@ 0x62
 800755a:	d80a      	bhi.n	8007572 <_printf_i+0x32>
 800755c:	2f00      	cmp	r7, #0
 800755e:	f000 80d2 	beq.w	8007706 <_printf_i+0x1c6>
 8007562:	2f58      	cmp	r7, #88	@ 0x58
 8007564:	f000 80b9 	beq.w	80076da <_printf_i+0x19a>
 8007568:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800756c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007570:	e03a      	b.n	80075e8 <_printf_i+0xa8>
 8007572:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007576:	2b15      	cmp	r3, #21
 8007578:	d8f6      	bhi.n	8007568 <_printf_i+0x28>
 800757a:	a101      	add	r1, pc, #4	@ (adr r1, 8007580 <_printf_i+0x40>)
 800757c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007580:	080075d9 	.word	0x080075d9
 8007584:	080075ed 	.word	0x080075ed
 8007588:	08007569 	.word	0x08007569
 800758c:	08007569 	.word	0x08007569
 8007590:	08007569 	.word	0x08007569
 8007594:	08007569 	.word	0x08007569
 8007598:	080075ed 	.word	0x080075ed
 800759c:	08007569 	.word	0x08007569
 80075a0:	08007569 	.word	0x08007569
 80075a4:	08007569 	.word	0x08007569
 80075a8:	08007569 	.word	0x08007569
 80075ac:	080076ed 	.word	0x080076ed
 80075b0:	08007617 	.word	0x08007617
 80075b4:	080076a7 	.word	0x080076a7
 80075b8:	08007569 	.word	0x08007569
 80075bc:	08007569 	.word	0x08007569
 80075c0:	0800770f 	.word	0x0800770f
 80075c4:	08007569 	.word	0x08007569
 80075c8:	08007617 	.word	0x08007617
 80075cc:	08007569 	.word	0x08007569
 80075d0:	08007569 	.word	0x08007569
 80075d4:	080076af 	.word	0x080076af
 80075d8:	6833      	ldr	r3, [r6, #0]
 80075da:	1d1a      	adds	r2, r3, #4
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	6032      	str	r2, [r6, #0]
 80075e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80075e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80075e8:	2301      	movs	r3, #1
 80075ea:	e09d      	b.n	8007728 <_printf_i+0x1e8>
 80075ec:	6833      	ldr	r3, [r6, #0]
 80075ee:	6820      	ldr	r0, [r4, #0]
 80075f0:	1d19      	adds	r1, r3, #4
 80075f2:	6031      	str	r1, [r6, #0]
 80075f4:	0606      	lsls	r6, r0, #24
 80075f6:	d501      	bpl.n	80075fc <_printf_i+0xbc>
 80075f8:	681d      	ldr	r5, [r3, #0]
 80075fa:	e003      	b.n	8007604 <_printf_i+0xc4>
 80075fc:	0645      	lsls	r5, r0, #25
 80075fe:	d5fb      	bpl.n	80075f8 <_printf_i+0xb8>
 8007600:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007604:	2d00      	cmp	r5, #0
 8007606:	da03      	bge.n	8007610 <_printf_i+0xd0>
 8007608:	232d      	movs	r3, #45	@ 0x2d
 800760a:	426d      	negs	r5, r5
 800760c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007610:	4859      	ldr	r0, [pc, #356]	@ (8007778 <_printf_i+0x238>)
 8007612:	230a      	movs	r3, #10
 8007614:	e011      	b.n	800763a <_printf_i+0xfa>
 8007616:	6821      	ldr	r1, [r4, #0]
 8007618:	6833      	ldr	r3, [r6, #0]
 800761a:	0608      	lsls	r0, r1, #24
 800761c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007620:	d402      	bmi.n	8007628 <_printf_i+0xe8>
 8007622:	0649      	lsls	r1, r1, #25
 8007624:	bf48      	it	mi
 8007626:	b2ad      	uxthmi	r5, r5
 8007628:	2f6f      	cmp	r7, #111	@ 0x6f
 800762a:	4853      	ldr	r0, [pc, #332]	@ (8007778 <_printf_i+0x238>)
 800762c:	6033      	str	r3, [r6, #0]
 800762e:	bf14      	ite	ne
 8007630:	230a      	movne	r3, #10
 8007632:	2308      	moveq	r3, #8
 8007634:	2100      	movs	r1, #0
 8007636:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800763a:	6866      	ldr	r6, [r4, #4]
 800763c:	60a6      	str	r6, [r4, #8]
 800763e:	2e00      	cmp	r6, #0
 8007640:	bfa2      	ittt	ge
 8007642:	6821      	ldrge	r1, [r4, #0]
 8007644:	f021 0104 	bicge.w	r1, r1, #4
 8007648:	6021      	strge	r1, [r4, #0]
 800764a:	b90d      	cbnz	r5, 8007650 <_printf_i+0x110>
 800764c:	2e00      	cmp	r6, #0
 800764e:	d04b      	beq.n	80076e8 <_printf_i+0x1a8>
 8007650:	4616      	mov	r6, r2
 8007652:	fbb5 f1f3 	udiv	r1, r5, r3
 8007656:	fb03 5711 	mls	r7, r3, r1, r5
 800765a:	5dc7      	ldrb	r7, [r0, r7]
 800765c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007660:	462f      	mov	r7, r5
 8007662:	42bb      	cmp	r3, r7
 8007664:	460d      	mov	r5, r1
 8007666:	d9f4      	bls.n	8007652 <_printf_i+0x112>
 8007668:	2b08      	cmp	r3, #8
 800766a:	d10b      	bne.n	8007684 <_printf_i+0x144>
 800766c:	6823      	ldr	r3, [r4, #0]
 800766e:	07df      	lsls	r7, r3, #31
 8007670:	d508      	bpl.n	8007684 <_printf_i+0x144>
 8007672:	6923      	ldr	r3, [r4, #16]
 8007674:	6861      	ldr	r1, [r4, #4]
 8007676:	4299      	cmp	r1, r3
 8007678:	bfde      	ittt	le
 800767a:	2330      	movle	r3, #48	@ 0x30
 800767c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007680:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007684:	1b92      	subs	r2, r2, r6
 8007686:	6122      	str	r2, [r4, #16]
 8007688:	f8cd a000 	str.w	sl, [sp]
 800768c:	464b      	mov	r3, r9
 800768e:	aa03      	add	r2, sp, #12
 8007690:	4621      	mov	r1, r4
 8007692:	4640      	mov	r0, r8
 8007694:	f7ff fee6 	bl	8007464 <_printf_common>
 8007698:	3001      	adds	r0, #1
 800769a:	d14a      	bne.n	8007732 <_printf_i+0x1f2>
 800769c:	f04f 30ff 	mov.w	r0, #4294967295
 80076a0:	b004      	add	sp, #16
 80076a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076a6:	6823      	ldr	r3, [r4, #0]
 80076a8:	f043 0320 	orr.w	r3, r3, #32
 80076ac:	6023      	str	r3, [r4, #0]
 80076ae:	4833      	ldr	r0, [pc, #204]	@ (800777c <_printf_i+0x23c>)
 80076b0:	2778      	movs	r7, #120	@ 0x78
 80076b2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80076b6:	6823      	ldr	r3, [r4, #0]
 80076b8:	6831      	ldr	r1, [r6, #0]
 80076ba:	061f      	lsls	r7, r3, #24
 80076bc:	f851 5b04 	ldr.w	r5, [r1], #4
 80076c0:	d402      	bmi.n	80076c8 <_printf_i+0x188>
 80076c2:	065f      	lsls	r7, r3, #25
 80076c4:	bf48      	it	mi
 80076c6:	b2ad      	uxthmi	r5, r5
 80076c8:	6031      	str	r1, [r6, #0]
 80076ca:	07d9      	lsls	r1, r3, #31
 80076cc:	bf44      	itt	mi
 80076ce:	f043 0320 	orrmi.w	r3, r3, #32
 80076d2:	6023      	strmi	r3, [r4, #0]
 80076d4:	b11d      	cbz	r5, 80076de <_printf_i+0x19e>
 80076d6:	2310      	movs	r3, #16
 80076d8:	e7ac      	b.n	8007634 <_printf_i+0xf4>
 80076da:	4827      	ldr	r0, [pc, #156]	@ (8007778 <_printf_i+0x238>)
 80076dc:	e7e9      	b.n	80076b2 <_printf_i+0x172>
 80076de:	6823      	ldr	r3, [r4, #0]
 80076e0:	f023 0320 	bic.w	r3, r3, #32
 80076e4:	6023      	str	r3, [r4, #0]
 80076e6:	e7f6      	b.n	80076d6 <_printf_i+0x196>
 80076e8:	4616      	mov	r6, r2
 80076ea:	e7bd      	b.n	8007668 <_printf_i+0x128>
 80076ec:	6833      	ldr	r3, [r6, #0]
 80076ee:	6825      	ldr	r5, [r4, #0]
 80076f0:	6961      	ldr	r1, [r4, #20]
 80076f2:	1d18      	adds	r0, r3, #4
 80076f4:	6030      	str	r0, [r6, #0]
 80076f6:	062e      	lsls	r6, r5, #24
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	d501      	bpl.n	8007700 <_printf_i+0x1c0>
 80076fc:	6019      	str	r1, [r3, #0]
 80076fe:	e002      	b.n	8007706 <_printf_i+0x1c6>
 8007700:	0668      	lsls	r0, r5, #25
 8007702:	d5fb      	bpl.n	80076fc <_printf_i+0x1bc>
 8007704:	8019      	strh	r1, [r3, #0]
 8007706:	2300      	movs	r3, #0
 8007708:	6123      	str	r3, [r4, #16]
 800770a:	4616      	mov	r6, r2
 800770c:	e7bc      	b.n	8007688 <_printf_i+0x148>
 800770e:	6833      	ldr	r3, [r6, #0]
 8007710:	1d1a      	adds	r2, r3, #4
 8007712:	6032      	str	r2, [r6, #0]
 8007714:	681e      	ldr	r6, [r3, #0]
 8007716:	6862      	ldr	r2, [r4, #4]
 8007718:	2100      	movs	r1, #0
 800771a:	4630      	mov	r0, r6
 800771c:	f7f8 fd68 	bl	80001f0 <memchr>
 8007720:	b108      	cbz	r0, 8007726 <_printf_i+0x1e6>
 8007722:	1b80      	subs	r0, r0, r6
 8007724:	6060      	str	r0, [r4, #4]
 8007726:	6863      	ldr	r3, [r4, #4]
 8007728:	6123      	str	r3, [r4, #16]
 800772a:	2300      	movs	r3, #0
 800772c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007730:	e7aa      	b.n	8007688 <_printf_i+0x148>
 8007732:	6923      	ldr	r3, [r4, #16]
 8007734:	4632      	mov	r2, r6
 8007736:	4649      	mov	r1, r9
 8007738:	4640      	mov	r0, r8
 800773a:	47d0      	blx	sl
 800773c:	3001      	adds	r0, #1
 800773e:	d0ad      	beq.n	800769c <_printf_i+0x15c>
 8007740:	6823      	ldr	r3, [r4, #0]
 8007742:	079b      	lsls	r3, r3, #30
 8007744:	d413      	bmi.n	800776e <_printf_i+0x22e>
 8007746:	68e0      	ldr	r0, [r4, #12]
 8007748:	9b03      	ldr	r3, [sp, #12]
 800774a:	4298      	cmp	r0, r3
 800774c:	bfb8      	it	lt
 800774e:	4618      	movlt	r0, r3
 8007750:	e7a6      	b.n	80076a0 <_printf_i+0x160>
 8007752:	2301      	movs	r3, #1
 8007754:	4632      	mov	r2, r6
 8007756:	4649      	mov	r1, r9
 8007758:	4640      	mov	r0, r8
 800775a:	47d0      	blx	sl
 800775c:	3001      	adds	r0, #1
 800775e:	d09d      	beq.n	800769c <_printf_i+0x15c>
 8007760:	3501      	adds	r5, #1
 8007762:	68e3      	ldr	r3, [r4, #12]
 8007764:	9903      	ldr	r1, [sp, #12]
 8007766:	1a5b      	subs	r3, r3, r1
 8007768:	42ab      	cmp	r3, r5
 800776a:	dcf2      	bgt.n	8007752 <_printf_i+0x212>
 800776c:	e7eb      	b.n	8007746 <_printf_i+0x206>
 800776e:	2500      	movs	r5, #0
 8007770:	f104 0619 	add.w	r6, r4, #25
 8007774:	e7f5      	b.n	8007762 <_printf_i+0x222>
 8007776:	bf00      	nop
 8007778:	080084e0 	.word	0x080084e0
 800777c:	080084f1 	.word	0x080084f1

08007780 <__sflush_r>:
 8007780:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007788:	0716      	lsls	r6, r2, #28
 800778a:	4605      	mov	r5, r0
 800778c:	460c      	mov	r4, r1
 800778e:	d454      	bmi.n	800783a <__sflush_r+0xba>
 8007790:	684b      	ldr	r3, [r1, #4]
 8007792:	2b00      	cmp	r3, #0
 8007794:	dc02      	bgt.n	800779c <__sflush_r+0x1c>
 8007796:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007798:	2b00      	cmp	r3, #0
 800779a:	dd48      	ble.n	800782e <__sflush_r+0xae>
 800779c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800779e:	2e00      	cmp	r6, #0
 80077a0:	d045      	beq.n	800782e <__sflush_r+0xae>
 80077a2:	2300      	movs	r3, #0
 80077a4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80077a8:	682f      	ldr	r7, [r5, #0]
 80077aa:	6a21      	ldr	r1, [r4, #32]
 80077ac:	602b      	str	r3, [r5, #0]
 80077ae:	d030      	beq.n	8007812 <__sflush_r+0x92>
 80077b0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80077b2:	89a3      	ldrh	r3, [r4, #12]
 80077b4:	0759      	lsls	r1, r3, #29
 80077b6:	d505      	bpl.n	80077c4 <__sflush_r+0x44>
 80077b8:	6863      	ldr	r3, [r4, #4]
 80077ba:	1ad2      	subs	r2, r2, r3
 80077bc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80077be:	b10b      	cbz	r3, 80077c4 <__sflush_r+0x44>
 80077c0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80077c2:	1ad2      	subs	r2, r2, r3
 80077c4:	2300      	movs	r3, #0
 80077c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80077c8:	6a21      	ldr	r1, [r4, #32]
 80077ca:	4628      	mov	r0, r5
 80077cc:	47b0      	blx	r6
 80077ce:	1c43      	adds	r3, r0, #1
 80077d0:	89a3      	ldrh	r3, [r4, #12]
 80077d2:	d106      	bne.n	80077e2 <__sflush_r+0x62>
 80077d4:	6829      	ldr	r1, [r5, #0]
 80077d6:	291d      	cmp	r1, #29
 80077d8:	d82b      	bhi.n	8007832 <__sflush_r+0xb2>
 80077da:	4a2a      	ldr	r2, [pc, #168]	@ (8007884 <__sflush_r+0x104>)
 80077dc:	410a      	asrs	r2, r1
 80077de:	07d6      	lsls	r6, r2, #31
 80077e0:	d427      	bmi.n	8007832 <__sflush_r+0xb2>
 80077e2:	2200      	movs	r2, #0
 80077e4:	6062      	str	r2, [r4, #4]
 80077e6:	04d9      	lsls	r1, r3, #19
 80077e8:	6922      	ldr	r2, [r4, #16]
 80077ea:	6022      	str	r2, [r4, #0]
 80077ec:	d504      	bpl.n	80077f8 <__sflush_r+0x78>
 80077ee:	1c42      	adds	r2, r0, #1
 80077f0:	d101      	bne.n	80077f6 <__sflush_r+0x76>
 80077f2:	682b      	ldr	r3, [r5, #0]
 80077f4:	b903      	cbnz	r3, 80077f8 <__sflush_r+0x78>
 80077f6:	6560      	str	r0, [r4, #84]	@ 0x54
 80077f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80077fa:	602f      	str	r7, [r5, #0]
 80077fc:	b1b9      	cbz	r1, 800782e <__sflush_r+0xae>
 80077fe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007802:	4299      	cmp	r1, r3
 8007804:	d002      	beq.n	800780c <__sflush_r+0x8c>
 8007806:	4628      	mov	r0, r5
 8007808:	f7ff fbd4 	bl	8006fb4 <_free_r>
 800780c:	2300      	movs	r3, #0
 800780e:	6363      	str	r3, [r4, #52]	@ 0x34
 8007810:	e00d      	b.n	800782e <__sflush_r+0xae>
 8007812:	2301      	movs	r3, #1
 8007814:	4628      	mov	r0, r5
 8007816:	47b0      	blx	r6
 8007818:	4602      	mov	r2, r0
 800781a:	1c50      	adds	r0, r2, #1
 800781c:	d1c9      	bne.n	80077b2 <__sflush_r+0x32>
 800781e:	682b      	ldr	r3, [r5, #0]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d0c6      	beq.n	80077b2 <__sflush_r+0x32>
 8007824:	2b1d      	cmp	r3, #29
 8007826:	d001      	beq.n	800782c <__sflush_r+0xac>
 8007828:	2b16      	cmp	r3, #22
 800782a:	d11e      	bne.n	800786a <__sflush_r+0xea>
 800782c:	602f      	str	r7, [r5, #0]
 800782e:	2000      	movs	r0, #0
 8007830:	e022      	b.n	8007878 <__sflush_r+0xf8>
 8007832:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007836:	b21b      	sxth	r3, r3
 8007838:	e01b      	b.n	8007872 <__sflush_r+0xf2>
 800783a:	690f      	ldr	r7, [r1, #16]
 800783c:	2f00      	cmp	r7, #0
 800783e:	d0f6      	beq.n	800782e <__sflush_r+0xae>
 8007840:	0793      	lsls	r3, r2, #30
 8007842:	680e      	ldr	r6, [r1, #0]
 8007844:	bf08      	it	eq
 8007846:	694b      	ldreq	r3, [r1, #20]
 8007848:	600f      	str	r7, [r1, #0]
 800784a:	bf18      	it	ne
 800784c:	2300      	movne	r3, #0
 800784e:	eba6 0807 	sub.w	r8, r6, r7
 8007852:	608b      	str	r3, [r1, #8]
 8007854:	f1b8 0f00 	cmp.w	r8, #0
 8007858:	dde9      	ble.n	800782e <__sflush_r+0xae>
 800785a:	6a21      	ldr	r1, [r4, #32]
 800785c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800785e:	4643      	mov	r3, r8
 8007860:	463a      	mov	r2, r7
 8007862:	4628      	mov	r0, r5
 8007864:	47b0      	blx	r6
 8007866:	2800      	cmp	r0, #0
 8007868:	dc08      	bgt.n	800787c <__sflush_r+0xfc>
 800786a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800786e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007872:	81a3      	strh	r3, [r4, #12]
 8007874:	f04f 30ff 	mov.w	r0, #4294967295
 8007878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800787c:	4407      	add	r7, r0
 800787e:	eba8 0800 	sub.w	r8, r8, r0
 8007882:	e7e7      	b.n	8007854 <__sflush_r+0xd4>
 8007884:	dfbffffe 	.word	0xdfbffffe

08007888 <_fflush_r>:
 8007888:	b538      	push	{r3, r4, r5, lr}
 800788a:	690b      	ldr	r3, [r1, #16]
 800788c:	4605      	mov	r5, r0
 800788e:	460c      	mov	r4, r1
 8007890:	b913      	cbnz	r3, 8007898 <_fflush_r+0x10>
 8007892:	2500      	movs	r5, #0
 8007894:	4628      	mov	r0, r5
 8007896:	bd38      	pop	{r3, r4, r5, pc}
 8007898:	b118      	cbz	r0, 80078a2 <_fflush_r+0x1a>
 800789a:	6a03      	ldr	r3, [r0, #32]
 800789c:	b90b      	cbnz	r3, 80078a2 <_fflush_r+0x1a>
 800789e:	f7ff fa4d 	bl	8006d3c <__sinit>
 80078a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d0f3      	beq.n	8007892 <_fflush_r+0xa>
 80078aa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80078ac:	07d0      	lsls	r0, r2, #31
 80078ae:	d404      	bmi.n	80078ba <_fflush_r+0x32>
 80078b0:	0599      	lsls	r1, r3, #22
 80078b2:	d402      	bmi.n	80078ba <_fflush_r+0x32>
 80078b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80078b6:	f7ff fb54 	bl	8006f62 <__retarget_lock_acquire_recursive>
 80078ba:	4628      	mov	r0, r5
 80078bc:	4621      	mov	r1, r4
 80078be:	f7ff ff5f 	bl	8007780 <__sflush_r>
 80078c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80078c4:	07da      	lsls	r2, r3, #31
 80078c6:	4605      	mov	r5, r0
 80078c8:	d4e4      	bmi.n	8007894 <_fflush_r+0xc>
 80078ca:	89a3      	ldrh	r3, [r4, #12]
 80078cc:	059b      	lsls	r3, r3, #22
 80078ce:	d4e1      	bmi.n	8007894 <_fflush_r+0xc>
 80078d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80078d2:	f7ff fb47 	bl	8006f64 <__retarget_lock_release_recursive>
 80078d6:	e7dd      	b.n	8007894 <_fflush_r+0xc>

080078d8 <fiprintf>:
 80078d8:	b40e      	push	{r1, r2, r3}
 80078da:	b503      	push	{r0, r1, lr}
 80078dc:	4601      	mov	r1, r0
 80078de:	ab03      	add	r3, sp, #12
 80078e0:	4805      	ldr	r0, [pc, #20]	@ (80078f8 <fiprintf+0x20>)
 80078e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80078e6:	6800      	ldr	r0, [r0, #0]
 80078e8:	9301      	str	r3, [sp, #4]
 80078ea:	f000 f89d 	bl	8007a28 <_vfiprintf_r>
 80078ee:	b002      	add	sp, #8
 80078f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80078f4:	b003      	add	sp, #12
 80078f6:	4770      	bx	lr
 80078f8:	20000080 	.word	0x20000080

080078fc <memmove>:
 80078fc:	4288      	cmp	r0, r1
 80078fe:	b510      	push	{r4, lr}
 8007900:	eb01 0402 	add.w	r4, r1, r2
 8007904:	d902      	bls.n	800790c <memmove+0x10>
 8007906:	4284      	cmp	r4, r0
 8007908:	4623      	mov	r3, r4
 800790a:	d807      	bhi.n	800791c <memmove+0x20>
 800790c:	1e43      	subs	r3, r0, #1
 800790e:	42a1      	cmp	r1, r4
 8007910:	d008      	beq.n	8007924 <memmove+0x28>
 8007912:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007916:	f803 2f01 	strb.w	r2, [r3, #1]!
 800791a:	e7f8      	b.n	800790e <memmove+0x12>
 800791c:	4402      	add	r2, r0
 800791e:	4601      	mov	r1, r0
 8007920:	428a      	cmp	r2, r1
 8007922:	d100      	bne.n	8007926 <memmove+0x2a>
 8007924:	bd10      	pop	{r4, pc}
 8007926:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800792a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800792e:	e7f7      	b.n	8007920 <memmove+0x24>

08007930 <_sbrk_r>:
 8007930:	b538      	push	{r3, r4, r5, lr}
 8007932:	4d06      	ldr	r5, [pc, #24]	@ (800794c <_sbrk_r+0x1c>)
 8007934:	2300      	movs	r3, #0
 8007936:	4604      	mov	r4, r0
 8007938:	4608      	mov	r0, r1
 800793a:	602b      	str	r3, [r5, #0]
 800793c:	f7fb fe00 	bl	8003540 <_sbrk>
 8007940:	1c43      	adds	r3, r0, #1
 8007942:	d102      	bne.n	800794a <_sbrk_r+0x1a>
 8007944:	682b      	ldr	r3, [r5, #0]
 8007946:	b103      	cbz	r3, 800794a <_sbrk_r+0x1a>
 8007948:	6023      	str	r3, [r4, #0]
 800794a:	bd38      	pop	{r3, r4, r5, pc}
 800794c:	200003f4 	.word	0x200003f4

08007950 <memcpy>:
 8007950:	440a      	add	r2, r1
 8007952:	4291      	cmp	r1, r2
 8007954:	f100 33ff 	add.w	r3, r0, #4294967295
 8007958:	d100      	bne.n	800795c <memcpy+0xc>
 800795a:	4770      	bx	lr
 800795c:	b510      	push	{r4, lr}
 800795e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007962:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007966:	4291      	cmp	r1, r2
 8007968:	d1f9      	bne.n	800795e <memcpy+0xe>
 800796a:	bd10      	pop	{r4, pc}

0800796c <abort>:
 800796c:	b508      	push	{r3, lr}
 800796e:	2006      	movs	r0, #6
 8007970:	f000 fa2e 	bl	8007dd0 <raise>
 8007974:	2001      	movs	r0, #1
 8007976:	f7fb fd6a 	bl	800344e <_exit>

0800797a <_realloc_r>:
 800797a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800797e:	4680      	mov	r8, r0
 8007980:	4615      	mov	r5, r2
 8007982:	460c      	mov	r4, r1
 8007984:	b921      	cbnz	r1, 8007990 <_realloc_r+0x16>
 8007986:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800798a:	4611      	mov	r1, r2
 800798c:	f7ff bb86 	b.w	800709c <_malloc_r>
 8007990:	b92a      	cbnz	r2, 800799e <_realloc_r+0x24>
 8007992:	f7ff fb0f 	bl	8006fb4 <_free_r>
 8007996:	2400      	movs	r4, #0
 8007998:	4620      	mov	r0, r4
 800799a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800799e:	f000 fa33 	bl	8007e08 <_malloc_usable_size_r>
 80079a2:	4285      	cmp	r5, r0
 80079a4:	4606      	mov	r6, r0
 80079a6:	d802      	bhi.n	80079ae <_realloc_r+0x34>
 80079a8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80079ac:	d8f4      	bhi.n	8007998 <_realloc_r+0x1e>
 80079ae:	4629      	mov	r1, r5
 80079b0:	4640      	mov	r0, r8
 80079b2:	f7ff fb73 	bl	800709c <_malloc_r>
 80079b6:	4607      	mov	r7, r0
 80079b8:	2800      	cmp	r0, #0
 80079ba:	d0ec      	beq.n	8007996 <_realloc_r+0x1c>
 80079bc:	42b5      	cmp	r5, r6
 80079be:	462a      	mov	r2, r5
 80079c0:	4621      	mov	r1, r4
 80079c2:	bf28      	it	cs
 80079c4:	4632      	movcs	r2, r6
 80079c6:	f7ff ffc3 	bl	8007950 <memcpy>
 80079ca:	4621      	mov	r1, r4
 80079cc:	4640      	mov	r0, r8
 80079ce:	f7ff faf1 	bl	8006fb4 <_free_r>
 80079d2:	463c      	mov	r4, r7
 80079d4:	e7e0      	b.n	8007998 <_realloc_r+0x1e>

080079d6 <__sfputc_r>:
 80079d6:	6893      	ldr	r3, [r2, #8]
 80079d8:	3b01      	subs	r3, #1
 80079da:	2b00      	cmp	r3, #0
 80079dc:	b410      	push	{r4}
 80079de:	6093      	str	r3, [r2, #8]
 80079e0:	da08      	bge.n	80079f4 <__sfputc_r+0x1e>
 80079e2:	6994      	ldr	r4, [r2, #24]
 80079e4:	42a3      	cmp	r3, r4
 80079e6:	db01      	blt.n	80079ec <__sfputc_r+0x16>
 80079e8:	290a      	cmp	r1, #10
 80079ea:	d103      	bne.n	80079f4 <__sfputc_r+0x1e>
 80079ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80079f0:	f000 b932 	b.w	8007c58 <__swbuf_r>
 80079f4:	6813      	ldr	r3, [r2, #0]
 80079f6:	1c58      	adds	r0, r3, #1
 80079f8:	6010      	str	r0, [r2, #0]
 80079fa:	7019      	strb	r1, [r3, #0]
 80079fc:	4608      	mov	r0, r1
 80079fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a02:	4770      	bx	lr

08007a04 <__sfputs_r>:
 8007a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a06:	4606      	mov	r6, r0
 8007a08:	460f      	mov	r7, r1
 8007a0a:	4614      	mov	r4, r2
 8007a0c:	18d5      	adds	r5, r2, r3
 8007a0e:	42ac      	cmp	r4, r5
 8007a10:	d101      	bne.n	8007a16 <__sfputs_r+0x12>
 8007a12:	2000      	movs	r0, #0
 8007a14:	e007      	b.n	8007a26 <__sfputs_r+0x22>
 8007a16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a1a:	463a      	mov	r2, r7
 8007a1c:	4630      	mov	r0, r6
 8007a1e:	f7ff ffda 	bl	80079d6 <__sfputc_r>
 8007a22:	1c43      	adds	r3, r0, #1
 8007a24:	d1f3      	bne.n	8007a0e <__sfputs_r+0xa>
 8007a26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007a28 <_vfiprintf_r>:
 8007a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a2c:	460d      	mov	r5, r1
 8007a2e:	b09d      	sub	sp, #116	@ 0x74
 8007a30:	4614      	mov	r4, r2
 8007a32:	4698      	mov	r8, r3
 8007a34:	4606      	mov	r6, r0
 8007a36:	b118      	cbz	r0, 8007a40 <_vfiprintf_r+0x18>
 8007a38:	6a03      	ldr	r3, [r0, #32]
 8007a3a:	b90b      	cbnz	r3, 8007a40 <_vfiprintf_r+0x18>
 8007a3c:	f7ff f97e 	bl	8006d3c <__sinit>
 8007a40:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007a42:	07d9      	lsls	r1, r3, #31
 8007a44:	d405      	bmi.n	8007a52 <_vfiprintf_r+0x2a>
 8007a46:	89ab      	ldrh	r3, [r5, #12]
 8007a48:	059a      	lsls	r2, r3, #22
 8007a4a:	d402      	bmi.n	8007a52 <_vfiprintf_r+0x2a>
 8007a4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007a4e:	f7ff fa88 	bl	8006f62 <__retarget_lock_acquire_recursive>
 8007a52:	89ab      	ldrh	r3, [r5, #12]
 8007a54:	071b      	lsls	r3, r3, #28
 8007a56:	d501      	bpl.n	8007a5c <_vfiprintf_r+0x34>
 8007a58:	692b      	ldr	r3, [r5, #16]
 8007a5a:	b99b      	cbnz	r3, 8007a84 <_vfiprintf_r+0x5c>
 8007a5c:	4629      	mov	r1, r5
 8007a5e:	4630      	mov	r0, r6
 8007a60:	f000 f938 	bl	8007cd4 <__swsetup_r>
 8007a64:	b170      	cbz	r0, 8007a84 <_vfiprintf_r+0x5c>
 8007a66:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007a68:	07dc      	lsls	r4, r3, #31
 8007a6a:	d504      	bpl.n	8007a76 <_vfiprintf_r+0x4e>
 8007a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a70:	b01d      	add	sp, #116	@ 0x74
 8007a72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a76:	89ab      	ldrh	r3, [r5, #12]
 8007a78:	0598      	lsls	r0, r3, #22
 8007a7a:	d4f7      	bmi.n	8007a6c <_vfiprintf_r+0x44>
 8007a7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007a7e:	f7ff fa71 	bl	8006f64 <__retarget_lock_release_recursive>
 8007a82:	e7f3      	b.n	8007a6c <_vfiprintf_r+0x44>
 8007a84:	2300      	movs	r3, #0
 8007a86:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a88:	2320      	movs	r3, #32
 8007a8a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007a8e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a92:	2330      	movs	r3, #48	@ 0x30
 8007a94:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007c44 <_vfiprintf_r+0x21c>
 8007a98:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007a9c:	f04f 0901 	mov.w	r9, #1
 8007aa0:	4623      	mov	r3, r4
 8007aa2:	469a      	mov	sl, r3
 8007aa4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007aa8:	b10a      	cbz	r2, 8007aae <_vfiprintf_r+0x86>
 8007aaa:	2a25      	cmp	r2, #37	@ 0x25
 8007aac:	d1f9      	bne.n	8007aa2 <_vfiprintf_r+0x7a>
 8007aae:	ebba 0b04 	subs.w	fp, sl, r4
 8007ab2:	d00b      	beq.n	8007acc <_vfiprintf_r+0xa4>
 8007ab4:	465b      	mov	r3, fp
 8007ab6:	4622      	mov	r2, r4
 8007ab8:	4629      	mov	r1, r5
 8007aba:	4630      	mov	r0, r6
 8007abc:	f7ff ffa2 	bl	8007a04 <__sfputs_r>
 8007ac0:	3001      	adds	r0, #1
 8007ac2:	f000 80a7 	beq.w	8007c14 <_vfiprintf_r+0x1ec>
 8007ac6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007ac8:	445a      	add	r2, fp
 8007aca:	9209      	str	r2, [sp, #36]	@ 0x24
 8007acc:	f89a 3000 	ldrb.w	r3, [sl]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	f000 809f 	beq.w	8007c14 <_vfiprintf_r+0x1ec>
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	f04f 32ff 	mov.w	r2, #4294967295
 8007adc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ae0:	f10a 0a01 	add.w	sl, sl, #1
 8007ae4:	9304      	str	r3, [sp, #16]
 8007ae6:	9307      	str	r3, [sp, #28]
 8007ae8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007aec:	931a      	str	r3, [sp, #104]	@ 0x68
 8007aee:	4654      	mov	r4, sl
 8007af0:	2205      	movs	r2, #5
 8007af2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007af6:	4853      	ldr	r0, [pc, #332]	@ (8007c44 <_vfiprintf_r+0x21c>)
 8007af8:	f7f8 fb7a 	bl	80001f0 <memchr>
 8007afc:	9a04      	ldr	r2, [sp, #16]
 8007afe:	b9d8      	cbnz	r0, 8007b38 <_vfiprintf_r+0x110>
 8007b00:	06d1      	lsls	r1, r2, #27
 8007b02:	bf44      	itt	mi
 8007b04:	2320      	movmi	r3, #32
 8007b06:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007b0a:	0713      	lsls	r3, r2, #28
 8007b0c:	bf44      	itt	mi
 8007b0e:	232b      	movmi	r3, #43	@ 0x2b
 8007b10:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007b14:	f89a 3000 	ldrb.w	r3, [sl]
 8007b18:	2b2a      	cmp	r3, #42	@ 0x2a
 8007b1a:	d015      	beq.n	8007b48 <_vfiprintf_r+0x120>
 8007b1c:	9a07      	ldr	r2, [sp, #28]
 8007b1e:	4654      	mov	r4, sl
 8007b20:	2000      	movs	r0, #0
 8007b22:	f04f 0c0a 	mov.w	ip, #10
 8007b26:	4621      	mov	r1, r4
 8007b28:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b2c:	3b30      	subs	r3, #48	@ 0x30
 8007b2e:	2b09      	cmp	r3, #9
 8007b30:	d94b      	bls.n	8007bca <_vfiprintf_r+0x1a2>
 8007b32:	b1b0      	cbz	r0, 8007b62 <_vfiprintf_r+0x13a>
 8007b34:	9207      	str	r2, [sp, #28]
 8007b36:	e014      	b.n	8007b62 <_vfiprintf_r+0x13a>
 8007b38:	eba0 0308 	sub.w	r3, r0, r8
 8007b3c:	fa09 f303 	lsl.w	r3, r9, r3
 8007b40:	4313      	orrs	r3, r2
 8007b42:	9304      	str	r3, [sp, #16]
 8007b44:	46a2      	mov	sl, r4
 8007b46:	e7d2      	b.n	8007aee <_vfiprintf_r+0xc6>
 8007b48:	9b03      	ldr	r3, [sp, #12]
 8007b4a:	1d19      	adds	r1, r3, #4
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	9103      	str	r1, [sp, #12]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	bfbb      	ittet	lt
 8007b54:	425b      	neglt	r3, r3
 8007b56:	f042 0202 	orrlt.w	r2, r2, #2
 8007b5a:	9307      	strge	r3, [sp, #28]
 8007b5c:	9307      	strlt	r3, [sp, #28]
 8007b5e:	bfb8      	it	lt
 8007b60:	9204      	strlt	r2, [sp, #16]
 8007b62:	7823      	ldrb	r3, [r4, #0]
 8007b64:	2b2e      	cmp	r3, #46	@ 0x2e
 8007b66:	d10a      	bne.n	8007b7e <_vfiprintf_r+0x156>
 8007b68:	7863      	ldrb	r3, [r4, #1]
 8007b6a:	2b2a      	cmp	r3, #42	@ 0x2a
 8007b6c:	d132      	bne.n	8007bd4 <_vfiprintf_r+0x1ac>
 8007b6e:	9b03      	ldr	r3, [sp, #12]
 8007b70:	1d1a      	adds	r2, r3, #4
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	9203      	str	r2, [sp, #12]
 8007b76:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007b7a:	3402      	adds	r4, #2
 8007b7c:	9305      	str	r3, [sp, #20]
 8007b7e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007c54 <_vfiprintf_r+0x22c>
 8007b82:	7821      	ldrb	r1, [r4, #0]
 8007b84:	2203      	movs	r2, #3
 8007b86:	4650      	mov	r0, sl
 8007b88:	f7f8 fb32 	bl	80001f0 <memchr>
 8007b8c:	b138      	cbz	r0, 8007b9e <_vfiprintf_r+0x176>
 8007b8e:	9b04      	ldr	r3, [sp, #16]
 8007b90:	eba0 000a 	sub.w	r0, r0, sl
 8007b94:	2240      	movs	r2, #64	@ 0x40
 8007b96:	4082      	lsls	r2, r0
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	3401      	adds	r4, #1
 8007b9c:	9304      	str	r3, [sp, #16]
 8007b9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ba2:	4829      	ldr	r0, [pc, #164]	@ (8007c48 <_vfiprintf_r+0x220>)
 8007ba4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007ba8:	2206      	movs	r2, #6
 8007baa:	f7f8 fb21 	bl	80001f0 <memchr>
 8007bae:	2800      	cmp	r0, #0
 8007bb0:	d03f      	beq.n	8007c32 <_vfiprintf_r+0x20a>
 8007bb2:	4b26      	ldr	r3, [pc, #152]	@ (8007c4c <_vfiprintf_r+0x224>)
 8007bb4:	bb1b      	cbnz	r3, 8007bfe <_vfiprintf_r+0x1d6>
 8007bb6:	9b03      	ldr	r3, [sp, #12]
 8007bb8:	3307      	adds	r3, #7
 8007bba:	f023 0307 	bic.w	r3, r3, #7
 8007bbe:	3308      	adds	r3, #8
 8007bc0:	9303      	str	r3, [sp, #12]
 8007bc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bc4:	443b      	add	r3, r7
 8007bc6:	9309      	str	r3, [sp, #36]	@ 0x24
 8007bc8:	e76a      	b.n	8007aa0 <_vfiprintf_r+0x78>
 8007bca:	fb0c 3202 	mla	r2, ip, r2, r3
 8007bce:	460c      	mov	r4, r1
 8007bd0:	2001      	movs	r0, #1
 8007bd2:	e7a8      	b.n	8007b26 <_vfiprintf_r+0xfe>
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	3401      	adds	r4, #1
 8007bd8:	9305      	str	r3, [sp, #20]
 8007bda:	4619      	mov	r1, r3
 8007bdc:	f04f 0c0a 	mov.w	ip, #10
 8007be0:	4620      	mov	r0, r4
 8007be2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007be6:	3a30      	subs	r2, #48	@ 0x30
 8007be8:	2a09      	cmp	r2, #9
 8007bea:	d903      	bls.n	8007bf4 <_vfiprintf_r+0x1cc>
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d0c6      	beq.n	8007b7e <_vfiprintf_r+0x156>
 8007bf0:	9105      	str	r1, [sp, #20]
 8007bf2:	e7c4      	b.n	8007b7e <_vfiprintf_r+0x156>
 8007bf4:	fb0c 2101 	mla	r1, ip, r1, r2
 8007bf8:	4604      	mov	r4, r0
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	e7f0      	b.n	8007be0 <_vfiprintf_r+0x1b8>
 8007bfe:	ab03      	add	r3, sp, #12
 8007c00:	9300      	str	r3, [sp, #0]
 8007c02:	462a      	mov	r2, r5
 8007c04:	4b12      	ldr	r3, [pc, #72]	@ (8007c50 <_vfiprintf_r+0x228>)
 8007c06:	a904      	add	r1, sp, #16
 8007c08:	4630      	mov	r0, r6
 8007c0a:	f3af 8000 	nop.w
 8007c0e:	4607      	mov	r7, r0
 8007c10:	1c78      	adds	r0, r7, #1
 8007c12:	d1d6      	bne.n	8007bc2 <_vfiprintf_r+0x19a>
 8007c14:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007c16:	07d9      	lsls	r1, r3, #31
 8007c18:	d405      	bmi.n	8007c26 <_vfiprintf_r+0x1fe>
 8007c1a:	89ab      	ldrh	r3, [r5, #12]
 8007c1c:	059a      	lsls	r2, r3, #22
 8007c1e:	d402      	bmi.n	8007c26 <_vfiprintf_r+0x1fe>
 8007c20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007c22:	f7ff f99f 	bl	8006f64 <__retarget_lock_release_recursive>
 8007c26:	89ab      	ldrh	r3, [r5, #12]
 8007c28:	065b      	lsls	r3, r3, #25
 8007c2a:	f53f af1f 	bmi.w	8007a6c <_vfiprintf_r+0x44>
 8007c2e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007c30:	e71e      	b.n	8007a70 <_vfiprintf_r+0x48>
 8007c32:	ab03      	add	r3, sp, #12
 8007c34:	9300      	str	r3, [sp, #0]
 8007c36:	462a      	mov	r2, r5
 8007c38:	4b05      	ldr	r3, [pc, #20]	@ (8007c50 <_vfiprintf_r+0x228>)
 8007c3a:	a904      	add	r1, sp, #16
 8007c3c:	4630      	mov	r0, r6
 8007c3e:	f7ff fc7f 	bl	8007540 <_printf_i>
 8007c42:	e7e4      	b.n	8007c0e <_vfiprintf_r+0x1e6>
 8007c44:	080084cf 	.word	0x080084cf
 8007c48:	080084d9 	.word	0x080084d9
 8007c4c:	00000000 	.word	0x00000000
 8007c50:	08007a05 	.word	0x08007a05
 8007c54:	080084d5 	.word	0x080084d5

08007c58 <__swbuf_r>:
 8007c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c5a:	460e      	mov	r6, r1
 8007c5c:	4614      	mov	r4, r2
 8007c5e:	4605      	mov	r5, r0
 8007c60:	b118      	cbz	r0, 8007c6a <__swbuf_r+0x12>
 8007c62:	6a03      	ldr	r3, [r0, #32]
 8007c64:	b90b      	cbnz	r3, 8007c6a <__swbuf_r+0x12>
 8007c66:	f7ff f869 	bl	8006d3c <__sinit>
 8007c6a:	69a3      	ldr	r3, [r4, #24]
 8007c6c:	60a3      	str	r3, [r4, #8]
 8007c6e:	89a3      	ldrh	r3, [r4, #12]
 8007c70:	071a      	lsls	r2, r3, #28
 8007c72:	d501      	bpl.n	8007c78 <__swbuf_r+0x20>
 8007c74:	6923      	ldr	r3, [r4, #16]
 8007c76:	b943      	cbnz	r3, 8007c8a <__swbuf_r+0x32>
 8007c78:	4621      	mov	r1, r4
 8007c7a:	4628      	mov	r0, r5
 8007c7c:	f000 f82a 	bl	8007cd4 <__swsetup_r>
 8007c80:	b118      	cbz	r0, 8007c8a <__swbuf_r+0x32>
 8007c82:	f04f 37ff 	mov.w	r7, #4294967295
 8007c86:	4638      	mov	r0, r7
 8007c88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c8a:	6823      	ldr	r3, [r4, #0]
 8007c8c:	6922      	ldr	r2, [r4, #16]
 8007c8e:	1a98      	subs	r0, r3, r2
 8007c90:	6963      	ldr	r3, [r4, #20]
 8007c92:	b2f6      	uxtb	r6, r6
 8007c94:	4283      	cmp	r3, r0
 8007c96:	4637      	mov	r7, r6
 8007c98:	dc05      	bgt.n	8007ca6 <__swbuf_r+0x4e>
 8007c9a:	4621      	mov	r1, r4
 8007c9c:	4628      	mov	r0, r5
 8007c9e:	f7ff fdf3 	bl	8007888 <_fflush_r>
 8007ca2:	2800      	cmp	r0, #0
 8007ca4:	d1ed      	bne.n	8007c82 <__swbuf_r+0x2a>
 8007ca6:	68a3      	ldr	r3, [r4, #8]
 8007ca8:	3b01      	subs	r3, #1
 8007caa:	60a3      	str	r3, [r4, #8]
 8007cac:	6823      	ldr	r3, [r4, #0]
 8007cae:	1c5a      	adds	r2, r3, #1
 8007cb0:	6022      	str	r2, [r4, #0]
 8007cb2:	701e      	strb	r6, [r3, #0]
 8007cb4:	6962      	ldr	r2, [r4, #20]
 8007cb6:	1c43      	adds	r3, r0, #1
 8007cb8:	429a      	cmp	r2, r3
 8007cba:	d004      	beq.n	8007cc6 <__swbuf_r+0x6e>
 8007cbc:	89a3      	ldrh	r3, [r4, #12]
 8007cbe:	07db      	lsls	r3, r3, #31
 8007cc0:	d5e1      	bpl.n	8007c86 <__swbuf_r+0x2e>
 8007cc2:	2e0a      	cmp	r6, #10
 8007cc4:	d1df      	bne.n	8007c86 <__swbuf_r+0x2e>
 8007cc6:	4621      	mov	r1, r4
 8007cc8:	4628      	mov	r0, r5
 8007cca:	f7ff fddd 	bl	8007888 <_fflush_r>
 8007cce:	2800      	cmp	r0, #0
 8007cd0:	d0d9      	beq.n	8007c86 <__swbuf_r+0x2e>
 8007cd2:	e7d6      	b.n	8007c82 <__swbuf_r+0x2a>

08007cd4 <__swsetup_r>:
 8007cd4:	b538      	push	{r3, r4, r5, lr}
 8007cd6:	4b29      	ldr	r3, [pc, #164]	@ (8007d7c <__swsetup_r+0xa8>)
 8007cd8:	4605      	mov	r5, r0
 8007cda:	6818      	ldr	r0, [r3, #0]
 8007cdc:	460c      	mov	r4, r1
 8007cde:	b118      	cbz	r0, 8007ce8 <__swsetup_r+0x14>
 8007ce0:	6a03      	ldr	r3, [r0, #32]
 8007ce2:	b90b      	cbnz	r3, 8007ce8 <__swsetup_r+0x14>
 8007ce4:	f7ff f82a 	bl	8006d3c <__sinit>
 8007ce8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cec:	0719      	lsls	r1, r3, #28
 8007cee:	d422      	bmi.n	8007d36 <__swsetup_r+0x62>
 8007cf0:	06da      	lsls	r2, r3, #27
 8007cf2:	d407      	bmi.n	8007d04 <__swsetup_r+0x30>
 8007cf4:	2209      	movs	r2, #9
 8007cf6:	602a      	str	r2, [r5, #0]
 8007cf8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007cfc:	81a3      	strh	r3, [r4, #12]
 8007cfe:	f04f 30ff 	mov.w	r0, #4294967295
 8007d02:	e033      	b.n	8007d6c <__swsetup_r+0x98>
 8007d04:	0758      	lsls	r0, r3, #29
 8007d06:	d512      	bpl.n	8007d2e <__swsetup_r+0x5a>
 8007d08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007d0a:	b141      	cbz	r1, 8007d1e <__swsetup_r+0x4a>
 8007d0c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007d10:	4299      	cmp	r1, r3
 8007d12:	d002      	beq.n	8007d1a <__swsetup_r+0x46>
 8007d14:	4628      	mov	r0, r5
 8007d16:	f7ff f94d 	bl	8006fb4 <_free_r>
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	6363      	str	r3, [r4, #52]	@ 0x34
 8007d1e:	89a3      	ldrh	r3, [r4, #12]
 8007d20:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007d24:	81a3      	strh	r3, [r4, #12]
 8007d26:	2300      	movs	r3, #0
 8007d28:	6063      	str	r3, [r4, #4]
 8007d2a:	6923      	ldr	r3, [r4, #16]
 8007d2c:	6023      	str	r3, [r4, #0]
 8007d2e:	89a3      	ldrh	r3, [r4, #12]
 8007d30:	f043 0308 	orr.w	r3, r3, #8
 8007d34:	81a3      	strh	r3, [r4, #12]
 8007d36:	6923      	ldr	r3, [r4, #16]
 8007d38:	b94b      	cbnz	r3, 8007d4e <__swsetup_r+0x7a>
 8007d3a:	89a3      	ldrh	r3, [r4, #12]
 8007d3c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007d40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d44:	d003      	beq.n	8007d4e <__swsetup_r+0x7a>
 8007d46:	4621      	mov	r1, r4
 8007d48:	4628      	mov	r0, r5
 8007d4a:	f000 f88b 	bl	8007e64 <__smakebuf_r>
 8007d4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d52:	f013 0201 	ands.w	r2, r3, #1
 8007d56:	d00a      	beq.n	8007d6e <__swsetup_r+0x9a>
 8007d58:	2200      	movs	r2, #0
 8007d5a:	60a2      	str	r2, [r4, #8]
 8007d5c:	6962      	ldr	r2, [r4, #20]
 8007d5e:	4252      	negs	r2, r2
 8007d60:	61a2      	str	r2, [r4, #24]
 8007d62:	6922      	ldr	r2, [r4, #16]
 8007d64:	b942      	cbnz	r2, 8007d78 <__swsetup_r+0xa4>
 8007d66:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007d6a:	d1c5      	bne.n	8007cf8 <__swsetup_r+0x24>
 8007d6c:	bd38      	pop	{r3, r4, r5, pc}
 8007d6e:	0799      	lsls	r1, r3, #30
 8007d70:	bf58      	it	pl
 8007d72:	6962      	ldrpl	r2, [r4, #20]
 8007d74:	60a2      	str	r2, [r4, #8]
 8007d76:	e7f4      	b.n	8007d62 <__swsetup_r+0x8e>
 8007d78:	2000      	movs	r0, #0
 8007d7a:	e7f7      	b.n	8007d6c <__swsetup_r+0x98>
 8007d7c:	20000080 	.word	0x20000080

08007d80 <_raise_r>:
 8007d80:	291f      	cmp	r1, #31
 8007d82:	b538      	push	{r3, r4, r5, lr}
 8007d84:	4605      	mov	r5, r0
 8007d86:	460c      	mov	r4, r1
 8007d88:	d904      	bls.n	8007d94 <_raise_r+0x14>
 8007d8a:	2316      	movs	r3, #22
 8007d8c:	6003      	str	r3, [r0, #0]
 8007d8e:	f04f 30ff 	mov.w	r0, #4294967295
 8007d92:	bd38      	pop	{r3, r4, r5, pc}
 8007d94:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007d96:	b112      	cbz	r2, 8007d9e <_raise_r+0x1e>
 8007d98:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007d9c:	b94b      	cbnz	r3, 8007db2 <_raise_r+0x32>
 8007d9e:	4628      	mov	r0, r5
 8007da0:	f000 f830 	bl	8007e04 <_getpid_r>
 8007da4:	4622      	mov	r2, r4
 8007da6:	4601      	mov	r1, r0
 8007da8:	4628      	mov	r0, r5
 8007daa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007dae:	f000 b817 	b.w	8007de0 <_kill_r>
 8007db2:	2b01      	cmp	r3, #1
 8007db4:	d00a      	beq.n	8007dcc <_raise_r+0x4c>
 8007db6:	1c59      	adds	r1, r3, #1
 8007db8:	d103      	bne.n	8007dc2 <_raise_r+0x42>
 8007dba:	2316      	movs	r3, #22
 8007dbc:	6003      	str	r3, [r0, #0]
 8007dbe:	2001      	movs	r0, #1
 8007dc0:	e7e7      	b.n	8007d92 <_raise_r+0x12>
 8007dc2:	2100      	movs	r1, #0
 8007dc4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007dc8:	4620      	mov	r0, r4
 8007dca:	4798      	blx	r3
 8007dcc:	2000      	movs	r0, #0
 8007dce:	e7e0      	b.n	8007d92 <_raise_r+0x12>

08007dd0 <raise>:
 8007dd0:	4b02      	ldr	r3, [pc, #8]	@ (8007ddc <raise+0xc>)
 8007dd2:	4601      	mov	r1, r0
 8007dd4:	6818      	ldr	r0, [r3, #0]
 8007dd6:	f7ff bfd3 	b.w	8007d80 <_raise_r>
 8007dda:	bf00      	nop
 8007ddc:	20000080 	.word	0x20000080

08007de0 <_kill_r>:
 8007de0:	b538      	push	{r3, r4, r5, lr}
 8007de2:	4d07      	ldr	r5, [pc, #28]	@ (8007e00 <_kill_r+0x20>)
 8007de4:	2300      	movs	r3, #0
 8007de6:	4604      	mov	r4, r0
 8007de8:	4608      	mov	r0, r1
 8007dea:	4611      	mov	r1, r2
 8007dec:	602b      	str	r3, [r5, #0]
 8007dee:	f7fb fb1e 	bl	800342e <_kill>
 8007df2:	1c43      	adds	r3, r0, #1
 8007df4:	d102      	bne.n	8007dfc <_kill_r+0x1c>
 8007df6:	682b      	ldr	r3, [r5, #0]
 8007df8:	b103      	cbz	r3, 8007dfc <_kill_r+0x1c>
 8007dfa:	6023      	str	r3, [r4, #0]
 8007dfc:	bd38      	pop	{r3, r4, r5, pc}
 8007dfe:	bf00      	nop
 8007e00:	200003f4 	.word	0x200003f4

08007e04 <_getpid_r>:
 8007e04:	f7fb bb0b 	b.w	800341e <_getpid>

08007e08 <_malloc_usable_size_r>:
 8007e08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e0c:	1f18      	subs	r0, r3, #4
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	bfbc      	itt	lt
 8007e12:	580b      	ldrlt	r3, [r1, r0]
 8007e14:	18c0      	addlt	r0, r0, r3
 8007e16:	4770      	bx	lr

08007e18 <__swhatbuf_r>:
 8007e18:	b570      	push	{r4, r5, r6, lr}
 8007e1a:	460c      	mov	r4, r1
 8007e1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e20:	2900      	cmp	r1, #0
 8007e22:	b096      	sub	sp, #88	@ 0x58
 8007e24:	4615      	mov	r5, r2
 8007e26:	461e      	mov	r6, r3
 8007e28:	da0d      	bge.n	8007e46 <__swhatbuf_r+0x2e>
 8007e2a:	89a3      	ldrh	r3, [r4, #12]
 8007e2c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007e30:	f04f 0100 	mov.w	r1, #0
 8007e34:	bf14      	ite	ne
 8007e36:	2340      	movne	r3, #64	@ 0x40
 8007e38:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007e3c:	2000      	movs	r0, #0
 8007e3e:	6031      	str	r1, [r6, #0]
 8007e40:	602b      	str	r3, [r5, #0]
 8007e42:	b016      	add	sp, #88	@ 0x58
 8007e44:	bd70      	pop	{r4, r5, r6, pc}
 8007e46:	466a      	mov	r2, sp
 8007e48:	f000 f848 	bl	8007edc <_fstat_r>
 8007e4c:	2800      	cmp	r0, #0
 8007e4e:	dbec      	blt.n	8007e2a <__swhatbuf_r+0x12>
 8007e50:	9901      	ldr	r1, [sp, #4]
 8007e52:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007e56:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007e5a:	4259      	negs	r1, r3
 8007e5c:	4159      	adcs	r1, r3
 8007e5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007e62:	e7eb      	b.n	8007e3c <__swhatbuf_r+0x24>

08007e64 <__smakebuf_r>:
 8007e64:	898b      	ldrh	r3, [r1, #12]
 8007e66:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e68:	079d      	lsls	r5, r3, #30
 8007e6a:	4606      	mov	r6, r0
 8007e6c:	460c      	mov	r4, r1
 8007e6e:	d507      	bpl.n	8007e80 <__smakebuf_r+0x1c>
 8007e70:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007e74:	6023      	str	r3, [r4, #0]
 8007e76:	6123      	str	r3, [r4, #16]
 8007e78:	2301      	movs	r3, #1
 8007e7a:	6163      	str	r3, [r4, #20]
 8007e7c:	b003      	add	sp, #12
 8007e7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e80:	ab01      	add	r3, sp, #4
 8007e82:	466a      	mov	r2, sp
 8007e84:	f7ff ffc8 	bl	8007e18 <__swhatbuf_r>
 8007e88:	9f00      	ldr	r7, [sp, #0]
 8007e8a:	4605      	mov	r5, r0
 8007e8c:	4639      	mov	r1, r7
 8007e8e:	4630      	mov	r0, r6
 8007e90:	f7ff f904 	bl	800709c <_malloc_r>
 8007e94:	b948      	cbnz	r0, 8007eaa <__smakebuf_r+0x46>
 8007e96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e9a:	059a      	lsls	r2, r3, #22
 8007e9c:	d4ee      	bmi.n	8007e7c <__smakebuf_r+0x18>
 8007e9e:	f023 0303 	bic.w	r3, r3, #3
 8007ea2:	f043 0302 	orr.w	r3, r3, #2
 8007ea6:	81a3      	strh	r3, [r4, #12]
 8007ea8:	e7e2      	b.n	8007e70 <__smakebuf_r+0xc>
 8007eaa:	89a3      	ldrh	r3, [r4, #12]
 8007eac:	6020      	str	r0, [r4, #0]
 8007eae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007eb2:	81a3      	strh	r3, [r4, #12]
 8007eb4:	9b01      	ldr	r3, [sp, #4]
 8007eb6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007eba:	b15b      	cbz	r3, 8007ed4 <__smakebuf_r+0x70>
 8007ebc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ec0:	4630      	mov	r0, r6
 8007ec2:	f000 f81d 	bl	8007f00 <_isatty_r>
 8007ec6:	b128      	cbz	r0, 8007ed4 <__smakebuf_r+0x70>
 8007ec8:	89a3      	ldrh	r3, [r4, #12]
 8007eca:	f023 0303 	bic.w	r3, r3, #3
 8007ece:	f043 0301 	orr.w	r3, r3, #1
 8007ed2:	81a3      	strh	r3, [r4, #12]
 8007ed4:	89a3      	ldrh	r3, [r4, #12]
 8007ed6:	431d      	orrs	r5, r3
 8007ed8:	81a5      	strh	r5, [r4, #12]
 8007eda:	e7cf      	b.n	8007e7c <__smakebuf_r+0x18>

08007edc <_fstat_r>:
 8007edc:	b538      	push	{r3, r4, r5, lr}
 8007ede:	4d07      	ldr	r5, [pc, #28]	@ (8007efc <_fstat_r+0x20>)
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	4604      	mov	r4, r0
 8007ee4:	4608      	mov	r0, r1
 8007ee6:	4611      	mov	r1, r2
 8007ee8:	602b      	str	r3, [r5, #0]
 8007eea:	f7fb fb00 	bl	80034ee <_fstat>
 8007eee:	1c43      	adds	r3, r0, #1
 8007ef0:	d102      	bne.n	8007ef8 <_fstat_r+0x1c>
 8007ef2:	682b      	ldr	r3, [r5, #0]
 8007ef4:	b103      	cbz	r3, 8007ef8 <_fstat_r+0x1c>
 8007ef6:	6023      	str	r3, [r4, #0]
 8007ef8:	bd38      	pop	{r3, r4, r5, pc}
 8007efa:	bf00      	nop
 8007efc:	200003f4 	.word	0x200003f4

08007f00 <_isatty_r>:
 8007f00:	b538      	push	{r3, r4, r5, lr}
 8007f02:	4d06      	ldr	r5, [pc, #24]	@ (8007f1c <_isatty_r+0x1c>)
 8007f04:	2300      	movs	r3, #0
 8007f06:	4604      	mov	r4, r0
 8007f08:	4608      	mov	r0, r1
 8007f0a:	602b      	str	r3, [r5, #0]
 8007f0c:	f7fb faff 	bl	800350e <_isatty>
 8007f10:	1c43      	adds	r3, r0, #1
 8007f12:	d102      	bne.n	8007f1a <_isatty_r+0x1a>
 8007f14:	682b      	ldr	r3, [r5, #0]
 8007f16:	b103      	cbz	r3, 8007f1a <_isatty_r+0x1a>
 8007f18:	6023      	str	r3, [r4, #0]
 8007f1a:	bd38      	pop	{r3, r4, r5, pc}
 8007f1c:	200003f4 	.word	0x200003f4

08007f20 <_init>:
 8007f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f22:	bf00      	nop
 8007f24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f26:	bc08      	pop	{r3}
 8007f28:	469e      	mov	lr, r3
 8007f2a:	4770      	bx	lr

08007f2c <_fini>:
 8007f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f2e:	bf00      	nop
 8007f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f32:	bc08      	pop	{r3}
 8007f34:	469e      	mov	lr, r3
 8007f36:	4770      	bx	lr
